/**
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { CLAIM_VALIDATION_ERROR, NBF_CLAIM, SUPPORTED_SIGNATURE_ALGORITHMS } from "../constants";
import { AsgardeoAuthException } from "../exception";
export class CryptoHelper {
    constructor(cryptoUtils) {
        this._cryptoUtils = cryptoUtils;
    }
    /**
     * Generate code verifier.
     *
     * @return {string} code verifier.
     */
    getCodeVerifier() {
        return this._cryptoUtils.base64URLEncode(this._cryptoUtils.generateRandomBytes(32));
    }
    /**
     * Derive code challenge from the code verifier.
     *
     * @param {string} verifier.
     *
     * @return {string} code challenge.
     */
    getCodeChallenge(verifier) {
        return this._cryptoUtils.base64URLEncode(this._cryptoUtils.hashSha256(verifier));
    }
    /**
     * Get JWK used for the id_token
     *
     * @param {string} jwtHeader header of the id_token.
     * @param {JWKInterface[]} keys jwks response.
     *
     * @return {JWKInterface} public key.
     *
     * @throws {AsgardeoAuthException}
     */
    /* eslint-disable @typescript-eslint/no-explicit-any */
    getJWKForTheIdToken(jwtHeader, keys) {
        const headerJSON = JSON.parse(this._cryptoUtils.base64URLDecode(jwtHeader));
        for (const key of keys) {
            if (headerJSON.kid === key.kid) {
                return key;
            }
        }
        throw new AsgardeoAuthException("JS-CRYPTO_UTIL-GJFTIT-IV01", "kid not found.", "Failed to find the 'kid' specified in the id_token. 'kid' found in the header : " +
            headerJSON.kid +
            ", Expected values: " +
            keys.map((key) => key.kid).join(", "));
    }
    /**
     * Verify id token.
     *
     * @param idToken id_token received from the IdP.
     * @param {JWKInterface} jwk public key used for signing.
     * @param {string} clientID app identification.
     * @param {string} issuer id_token issuer.
     * @param {string} username Username.
     * @param {number} clockTolerance - Allowed leeway for id_tokens (in seconds).
     *
     * @return {Promise<boolean>} whether the id_token is valid.
     *
     * @throws {AsgardeoAuthException} if the id_token is invalid.
     */
    isValidIdToken(idToken, jwk, clientID, issuer, username, clockTolerance) {
        return this._cryptoUtils
            .verifyJwt(idToken, jwk, SUPPORTED_SIGNATURE_ALGORITHMS, clientID, issuer, username, clockTolerance)
            .then((response) => {
            if (response) {
                return Promise.resolve(true);
            }
            return Promise.reject(new AsgardeoAuthException("JS-CRYPTO_HELPER-IVIT-IV01", "Invalid ID token.", "ID token validation returned false"));
        }).catch((error) => {
            if ((error === null || error === void 0 ? void 0 : error.code) === CLAIM_VALIDATION_ERROR && (error === null || error === void 0 ? void 0 : error.claim) === NBF_CLAIM) {
                return Promise.reject(new AsgardeoAuthException("JS-CRYPTO_UTILS-IVIT-IV02", "JWT NBF CLAIM VALIDATION FAILED", "JWT NBF claim validation has been failed"));
            }
            return Promise.reject(new AsgardeoAuthException("JS-CRYPTO_UTILS-IVIT-IV03", "JWT VALIDATION FAILED", "JWT validation has been failed"));
        });
    }
    /**
     * This function decodes the payload of an id token and returns it.
     *
     * @param {string} idToken - The id token to be decoded.
     *
     * @return {DecodedIdTokenPayloadInterface} - The decoded payload of the id token.
     *
     * @throws {AsgardeoAuthException}
     */
    decodeIDToken(idToken) {
        try {
            const utf8String = this._cryptoUtils.base64URLDecode(idToken.split(".")[1]);
            const payload = JSON.parse(utf8String);
            return payload;
        }
        catch (error) {
            throw new AsgardeoAuthException("JS-CRYPTO_UTIL-DIT-IV01", "Decoding ID token failed.", error);
        }
    }
}
//# sourceMappingURL=crypto-helper.js.map