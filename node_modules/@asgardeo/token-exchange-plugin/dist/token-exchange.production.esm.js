function l(l,Z,d,c){return new(d||(d=Promise))((function(b,i){function G(l){try{m(c.next(l))}catch(l){i(l)}}function I(l){try{m(c.throw(l))}catch(l){i(l)}}function m(l){var Z;l.done?b(l.value):(Z=l.value,Z instanceof d?Z:new d((function(l){l(Z)}))).then(G,I)}m((c=c.apply(l,Z||[])).next())}))}var Z,d="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function c(l,Z,d,c){return new(d||(d=Promise))((function(b,i){function G(l){try{m(c.next(l))}catch(l){i(l)}}function I(l){try{m(c.throw(l))}catch(l){i(l)}}function m(l){var Z;l.done?b(l.value):(Z=l.value,Z instanceof d?Z:new d((function(l){l(Z)}))).then(G,I)}m((c=c.apply(l,Z||[])).next())}))}function b(l,Z,d,c){return new(d||(d=Promise))((function(b,i){function G(l){try{m(c.next(l))}catch(l){i(l)}}function I(l){try{m(c.throw(l))}catch(l){i(l)}}function m(l){var Z;l.done?b(l.value):(Z=l.value,Z instanceof d?Z:new d((function(l){l(Z)}))).then(G,I)}m((c=c.apply(l,Z||[])).next())}))}!function(l){l.formPost="form_post",l.query="query"}(Z||(Z={}));const i="{{token}}",G="{{username}}",I="{{scope}}",m="{{clientID}}",X="{{clientSecret}}";var a;!function(l){l.ConfigData="config_data",l.OIDCProviderMetaData="oidc_provider_meta_data",l.SessionData="session_data",l.TemporaryData="temporary_data"}(a||(a={}));const V="refresh_token_timer",t="pkce_code_verifier",W="#",o=["RS256","RS512","RS384","PS256"],u="ERR_JWT_CLAIM_VALIDATION_FAILED",n="nbf",h="code",e="session_state",g="sign_out_url",p="sign_out_success",s="state",y="openid";var C;!function(l){l.Include="include",l.SameOrigin="same-origin",l.Omit="omit"}(C||(C={}));class R{constructor(l,Z,d){this.message=d,this.name=Z,this.code=l,Object.setPrototypeOf(this,new.target.prototype)}}class Y{constructor(){}static filterClaimsFromIDTokenPayload(l){const Z=Object.assign({},l);null==Z||delete Z.iss,null==Z||delete Z.aud,null==Z||delete Z.exp,null==Z||delete Z.iat,null==Z||delete Z.acr,null==Z||delete Z.amr,null==Z||delete Z.azp,null==Z||delete Z.auth_time,null==Z||delete Z.nonce,null==Z||delete Z.c_hash,null==Z||delete Z.at_hash,null==Z||delete Z.nbf,null==Z||delete Z.isk,null==Z||delete Z.sid;const d={};return Object.entries(Z).forEach((([l,Z])=>{const c=l.split("_").map(((l,Z)=>0===Z?l:[l[0].toUpperCase(),...l.slice(1)].join(""))).join("");d[c]=Z})),d}static getTokenRequestHeaders(){return{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"}}static generateStateParamForRequestCorrelation(l,Z){const d=parseInt(l.split("#")[1]);return Z?`${Z}_request_${d}`:`request_${d}`}static extractPKCEKeyFromStateParam(l){return`pkce_code_verifier#${parseInt(l.split("request_")[1])}`}}Y.getTenantDomainFromIdTokenPayload=(l,Z="@")=>{const d=l.sub.split(Z);return d.length>2?d[d.length-1]:""};class S{constructor(l,Z){this._dataLayer=l,this._config=()=>b(this,void 0,void 0,(function*(){return yield this._dataLayer.getConfigData()})),this._oidcProviderMetaData=()=>b(this,void 0,void 0,(function*(){return yield this._dataLayer.getOIDCProviderMetaData()})),this._cryptoHelper=Z}resolveEndpoints(l){return b(this,void 0,void 0,(function*(){const Z={},d=yield this._config();return d.endpoints&&Object.keys(d.endpoints).forEach((l=>{const c=l.replace(/[A-Z]/g,(l=>`_${l.toLowerCase()}`));Z[c]=(null==d?void 0:d.endpoints)?d.endpoints[l]:""})),Object.assign(Object.assign({},l),Z)}))}resolveEndpointsExplicitly(){return b(this,void 0,void 0,(function*(){const l={},Z=yield this._config(),d=["authorization_endpoint","end_session_endpoint","jwks_uri","check_session_iframe","revocation_endpoint","token_endpoint","issuer","userinfo_endpoint"];if(!Z.endpoints||!Object.keys(null==Z?void 0:Z.endpoints).every((l=>{const Z=l.replace(/[A-Z]/g,(l=>`_${l.toLowerCase()}`));return d.includes(Z)})))throw new R("JS-AUTH_HELPER-REE-NF01","No required endpoints.","Required oidc endpoints are not defined");return Z.endpoints&&Object.keys(Z.endpoints).forEach((d=>{const c=d.replace(/[A-Z]/g,(l=>`_${l.toLowerCase()}`));l[c]=(null==Z?void 0:Z.endpoints)?Z.endpoints[d]:""})),Object.assign({},l)}))}resolveEndpointsByBaseURL(){return b(this,void 0,void 0,(function*(){const l={},Z=yield this._config(),d=Z.baseUrl;if(!d)throw new R("JS-AUTH_HELPER_REBO-NF01","Base URL not defined.","Base URL is not defined in AuthClient config.");Z.endpoints&&Object.keys(Z.endpoints).forEach((d=>{const c=d.replace(/[A-Z]/g,(l=>`_${l.toLowerCase()}`));l[c]=(null==Z?void 0:Z.endpoints)?Z.endpoints[d]:""}));const c={authorization_endpoint:`${d}/oauth2/authorize`,end_session_endpoint:`${d}/oidc/logout`,issuer:`${d}/oauth2/token`,jwks_uri:`${d}/oauth2/jwks`,check_session_iframe:`${d}/oidc/checksession`,revocation_endpoint:`${d}/oauth2/revoke`,token_endpoint:`${d}/oauth2/token`,userinfo_endpoint:`${d}/oauth2/userinfo`};return Object.assign(Object.assign({},c),l)}))}validateIdToken(l){return b(this,void 0,void 0,(function*(){const Z=(yield this._dataLayer.getOIDCProviderMetaData()).jwks_uri,d=yield this._config();if(!Z||0===Z.trim().length)throw new R("JS_AUTH_HELPER-VIT-NF01","JWKS endpoint not found.","No JWKS endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the JWKS endpoint passed to the SDK is empty.");let c;try{c=yield fetch(Z,{credentials:d.sendCookiesInRequests?C.Include:C.SameOrigin})}catch(Z){throw new R("JS-AUTH_HELPER-VIT-NE02","Request to jwks endpoint failed.",null!=Z?Z:"The request sent to get the jwks from the server failed.")}if(200!==c.status||!c.ok)throw new R("JS-AUTH_HELPER-VIT-HE03",`Invalid response status received for jwks request (${c.statusText}).`,yield c.json());const b=(yield this._oidcProviderMetaData()).issuer,{keys:i}=yield c.json(),G=yield this._cryptoHelper.getJWKForTheIdToken(l.split(".")[0],i);return this._cryptoHelper.isValidIdToken(l,G,(yield this._config()).clientID,null!=b?b:"",this._cryptoHelper.decodeIDToken(l).sub,(yield this._config()).clockTolerance)}))}getAuthenticatedUserInfo(l){var Z,d,c,b;const i=this._cryptoHelper.decodeIDToken(l),G=Y.getTenantDomainFromIdTokenPayload(i),I=null!==(Z=null==i?void 0:i.username)&&void 0!==Z?Z:"",m=null!==(d=i.given_name)&&void 0!==d?d:"",X=null!==(c=i.family_name)&&void 0!==c?c:"",a=m&&X?`${m} ${X}`:m||X||"",V=null!==(b=i.preferred_username)&&void 0!==b?b:a;return Object.assign({displayName:V,tenantDomain:G,username:I},Y.filterClaimsFromIDTokenPayload(i))}replaceCustomGrantTemplateTags(l,Z){var d;return b(this,void 0,void 0,(function*(){let c="openid";const b=yield this._config(),i=yield this._dataLayer.getSessionData(Z);return b.scope&&b.scope.length>0&&(b.scope.includes("openid")||b.scope.push("openid"),c=b.scope.join(" ")),l.replace("{{token}}",i.access_token).replace("{{username}}",this.getAuthenticatedUserInfo(i.id_token).username).replace("{{scope}}",c).replace("{{clientID}}",b.clientID).replace("{{clientSecret}}",null!==(d=b.clientSecret)&&void 0!==d?d:"")}))}clearUserSessionData(l){return b(this,void 0,void 0,(function*(){yield this._dataLayer.removeTemporaryData(l),yield this._dataLayer.removeSessionData(l)}))}handleTokenResponse(l,Z){return b(this,void 0,void 0,(function*(){if(200!==l.status||!l.ok)throw new R("JS-AUTH_HELPER-HTR-NE01",`Invalid response status received for token request (${l.statusText}).`,yield l.json());const d=yield l.json();if(d.created_at=(new Date).getTime(),(yield this._config()).validateIDToken)return this.validateIdToken(d.id_token).then((()=>b(this,void 0,void 0,(function*(){yield this._dataLayer.setSessionData(d,Z);const l={accessToken:d.access_token,createdAt:d.created_at,expiresIn:d.expires_in,idToken:d.id_token,refreshToken:d.refresh_token,scope:d.scope,tokenType:d.token_type};return Promise.resolve(l)}))));{const l={accessToken:d.access_token,createdAt:d.created_at,expiresIn:d.expires_in,idToken:d.id_token,refreshToken:d.refresh_token,scope:d.scope,tokenType:d.token_type};return yield this._dataLayer.setSessionData(d,Z),Promise.resolve(l)}}))}generatePKCEKey(l){var Z;return b(this,void 0,void 0,(function*(){const d=yield this._dataLayer.getTemporaryData(l),c=[];Object.keys(d).forEach((l=>{l.startsWith("pkce_code_verifier")&&c.push(l)}));const b=c.sort().pop();return`pkce_code_verifier#${parseInt(null!==(Z=null==b?void 0:b.split("#")[1])&&void 0!==Z?Z:"-1")+1}`}))}}class K{constructor(l){this._cryptoUtils=l}getCodeVerifier(){return this._cryptoUtils.base64URLEncode(this._cryptoUtils.generateRandomBytes(32))}getCodeChallenge(l){return this._cryptoUtils.base64URLEncode(this._cryptoUtils.hashSha256(l))}getJWKForTheIdToken(l,Z){const d=JSON.parse(this._cryptoUtils.base64URLDecode(l));for(const l of Z)if(d.kid===l.kid)return l;throw new R("JS-CRYPTO_UTIL-GJFTIT-IV01","kid not found.","Failed to find the 'kid' specified in the id_token. 'kid' found in the header : "+d.kid+", Expected values: "+Z.map((l=>l.kid)).join(", "))}isValidIdToken(l,Z,d,c,b,i){return this._cryptoUtils.verifyJwt(l,Z,o,d,c,b,i).then((l=>l?Promise.resolve(!0):Promise.reject(new R("JS-CRYPTO_HELPER-IVIT-IV01","Invalid ID token.","ID token validation returned false")))).catch((l=>"ERR_JWT_CLAIM_VALIDATION_FAILED"===(null==l?void 0:l.code)&&"nbf"===(null==l?void 0:l.claim)?Promise.reject(new R("JS-CRYPTO_UTILS-IVIT-IV02","JWT NBF CLAIM VALIDATION FAILED","JWT NBF claim validation has been failed")):Promise.reject(new R("JS-CRYPTO_UTILS-IVIT-IV03","JWT VALIDATION FAILED","JWT validation has been failed"))))}decodeIDToken(l){try{const Z=this._cryptoUtils.base64URLDecode(l.split(".")[1]);return JSON.parse(Z)}catch(l){throw new R("JS-CRYPTO_UTIL-DIT-IV01","Decoding ID token failed.",l)}}}class N{constructor(l,Z){this._cryptoUtils=Z,this._cryptoHelper=new K(Z),this._authenticationHelper=new S(l,this._cryptoHelper),this._dataLayer=l,this._config=()=>b(this,void 0,void 0,(function*(){return yield this._dataLayer.getConfigData()})),this._oidcProviderMetaData=()=>b(this,void 0,void 0,(function*(){return yield this._dataLayer.getOIDCProviderMetaData()}))}getAuthorizationURL(l,Z){var d,c,i;return b(this,void 0,void 0,(function*(){const b=yield this._dataLayer.getOIDCProviderMetaDataParameter("authorization_endpoint"),G=yield this._config();if(!b||0===b.trim().length)throw new R("JS-AUTH_CORE-GAU-NF01","No authorization endpoint found.","No authorization endpoint was found in the OIDC provider meta data from the well-known endpoint or the authorization endpoint passed to the SDK is empty.");const I=new URL(b),m=new Map;m.set("response_type","code"),m.set("client_id",G.clientID);let X="openid";G.scope&&G.scope.length>0&&(G.scope.includes("openid")||G.scope.push("openid"),X=G.scope.join(" ")),m.set("scope",X),m.set("redirect_uri",G.signInRedirectURL),G.responseMode&&m.set("response_mode",G.responseMode);const a=yield this._authenticationHelper.generatePKCEKey(Z);if(G.enablePKCE){const l=null===(d=this._cryptoHelper)||void 0===d?void 0:d.getCodeVerifier(),b=null===(c=this._cryptoHelper)||void 0===c?void 0:c.getCodeChallenge(l);yield this._dataLayer.setTemporaryDataParameter(a,l,Z),m.set("code_challenge_method","S256"),m.set("code_challenge",b)}G.prompt&&m.set("prompt",G.prompt);const V=l;if(V)for(const[l,Z]of Object.entries(V))if(""!=l&&""!=Z&&"state"!==l){const d=l.replace(/[A-Z]/g,(l=>`_${l.toLowerCase()}`));m.set(d,Z.toString())}m.set("state",Y.generateStateParamForRequestCorrelation(a,V?null===(i=V.state)||void 0===i?void 0:i.toString():""));for(const[l,Z]of m.entries())I.searchParams.append(l,Z);return I.toString()}))}requestAccessToken(l,Z,d,c){return b(this,void 0,void 0,(function*(){const b=(yield this._oidcProviderMetaData()).token_endpoint,i=yield this._config();if(!b||0===b.trim().length)throw new R("JS-AUTH_CORE-RAT1-NF01","Token endpoint not found.","No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the token endpoint passed to the SDK is empty.");Z&&(yield this._dataLayer.setSessionDataParameter("session_state",Z,c));const G=[];G.push(`client_id=${i.clientID}`),i.clientSecret&&i.clientSecret.trim().length>0&&G.push(`client_secret=${i.clientSecret}`);const I=l;let m;G.push(`code=${I}`),G.push("grant_type=authorization_code"),G.push(`redirect_uri=${i.signInRedirectURL}`),i.enablePKCE&&(G.push(`code_verifier=${yield this._dataLayer.getTemporaryDataParameter(Y.extractPKCEKeyFromStateParam(d),c)}`),yield this._dataLayer.removeTemporaryDataParameter(Y.extractPKCEKeyFromStateParam(d),c));try{m=yield fetch(b,{body:G.join("&"),credentials:i.sendCookiesInRequests?C.Include:C.SameOrigin,headers:new Headers(Y.getTokenRequestHeaders()),method:"POST"})}catch(b){throw new R("JS-AUTH_CORE-RAT1-NE02","Requesting access token failed",null!=b?b:"The request to get the access token from the server failed.")}if(!m.ok)throw new R("JS-AUTH_CORE-RAT1-HE03",`Requesting access token failed with ${m.statusText}`,yield m.json());return yield this._authenticationHelper.handleTokenResponse(m,c)}))}refreshAccessToken(l){return b(this,void 0,void 0,(function*(){const Z=(yield this._oidcProviderMetaData()).token_endpoint,d=yield this._config(),c=yield this._dataLayer.getSessionData(l);if(!c.refresh_token)throw new R("JS-AUTH_CORE-RAT2-NF01","No refresh token found.","There was no refresh token found. Asgardeo doesn't return a refresh token if the refresh token grant is not enabled.");if(!Z||0===Z.trim().length)throw new R("JS-AUTH_CORE-RAT2-NF02","No refresh token endpoint found.","No refresh token endpoint was in the OIDC provider meta data returned by the well-known endpoint or the refresh token endpoint passed to the SDK is empty.");const b=[];let i;b.push(`client_id=${d.clientID}`),b.push(`refresh_token=${c.refresh_token}`),b.push("grant_type=refresh_token"),d.clientSecret&&d.clientSecret.trim().length>0&&b.push(`client_secret=${d.clientSecret}`);try{i=yield fetch(Z,{body:b.join("&"),credentials:d.sendCookiesInRequests?C.Include:C.SameOrigin,headers:new Headers(Y.getTokenRequestHeaders()),method:"POST"})}catch(Z){throw new R("JS-AUTH_CORE-RAT2-NR03","Refresh access token request failed.",null!=Z?Z:"The request to refresh the access token failed.")}if(!i.ok)throw new R("JS-AUTH_CORE-RAT2-HE04",`Refreshing access token failed with ${i.statusText}`,yield i.json());return this._authenticationHelper.handleTokenResponse(i,l)}))}revokeAccessToken(l){return b(this,void 0,void 0,(function*(){const Z=(yield this._oidcProviderMetaData()).revocation_endpoint,d=yield this._config();if(!Z||0===Z.trim().length)throw new R("JS-AUTH_CORE-RAT3-NF01","No revoke access token endpoint found.","No revoke access token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the revoke access token endpoint passed to the SDK is empty.");const c=[];let b;c.push(`client_id=${d.clientID}`),c.push(`token=${(yield this._dataLayer.getSessionData(l)).access_token}`),c.push("token_type_hint=access_token");try{b=yield fetch(Z,{body:c.join("&"),credentials:d.sendCookiesInRequests?C.Include:C.SameOrigin,headers:new Headers(Y.getTokenRequestHeaders()),method:"POST"})}catch(Z){throw new R("JS-AUTH_CORE-RAT3-NE02","The request to revoke access token failed.",null!=Z?Z:"The request sent to revoke the access token failed.")}if(200!==b.status||!b.ok)throw new R("JS-AUTH_CORE-RAT3-HE03",`Invalid response status received for revoke access token request (${b.statusText}).`,yield b.json());return this._authenticationHelper.clearUserSessionData(l),Promise.resolve(b)}))}requestCustomGrant(l,Z){return b(this,void 0,void 0,(function*(){const d=yield this._oidcProviderMetaData(),c=yield this._config();let i;if(i=l.tokenEndpoint&&0!==l.tokenEndpoint.trim().length?l.tokenEndpoint:d.token_endpoint,!i||0===i.trim().length)throw new R("JS-AUTH_CORE-RCG-NF01","Token endpoint not found.","No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the token endpoint passed to the SDK is empty.");const G=yield Promise.all(Object.entries(l.data).map((([l,d])=>b(this,void 0,void 0,(function*(){const c=yield this._authenticationHelper.replaceCustomGrantTemplateTags(d,Z);return`${l}=${c}`})))));let I=Object.assign({},Y.getTokenRequestHeaders());l.attachToken&&(I=Object.assign(Object.assign({},I),{Authorization:`Bearer ${(yield this._dataLayer.getSessionData(Z)).access_token}`}));const m={body:G.join("&"),credentials:c.sendCookiesInRequests?C.Include:C.SameOrigin,headers:new Headers(I),method:"POST"};let X;try{X=yield fetch(i,m)}catch(l){throw new R("JS-AUTH_CORE-RCG-NE02","The custom grant request failed.",null!=l?l:"The request sent to get the custom grant failed.")}if(200!==X.status||!X.ok)throw new R("JS-AUTH_CORE-RCG-HE03",`Invalid response status received for the custom grant request. (${X.statusText})`,yield X.json());return l.returnsSession?this._authenticationHelper.handleTokenResponse(X,Z):Promise.resolve(yield X.json())}))}getBasicUserInfo(l){return b(this,void 0,void 0,(function*(){const Z=yield this._dataLayer.getSessionData(l),d=this._authenticationHelper.getAuthenticatedUserInfo(null==Z?void 0:Z.id_token);let c={allowedScopes:Z.scope,sessionState:Z.session_state};return Object.keys(d).forEach((l=>{void 0!==d[l]&&""!==d[l]&&null!==d[l]||delete d[l]})),c=Object.assign(Object.assign({},c),d),c}))}getDecodedIDToken(l){return b(this,void 0,void 0,(function*(){const Z=(yield this._dataLayer.getSessionData(l)).id_token;return this._cryptoHelper.decodeIDToken(Z)}))}getCryptoHelper(){return b(this,void 0,void 0,(function*(){return this._cryptoHelper}))}getIDToken(l){return b(this,void 0,void 0,(function*(){return(yield this._dataLayer.getSessionData(l)).id_token}))}getOIDCProviderMetaData(l){return b(this,void 0,void 0,(function*(){const Z=yield this._config();if(!l&&(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated")))return Promise.resolve();const d=Z.wellKnownEndpoint;if(d){let l;try{if(l=yield fetch(d),200!==l.status||!l.ok)throw new Error}catch(Z){throw new R("JS-AUTH_CORE-GOPMD-HE01","Invalid well-known response","The well known endpoint response has been failed with an error.")}return yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpoints(yield l.json())),yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}if(Z.baseUrl){try{yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpointsByBaseURL())}catch(Z){throw new R("JS-AUTH_CORE-GOPMD-IV02","Resolving endpoints failed.",null!=Z?Z:"Resolving endpoints by base url failed.")}return yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}try{yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpointsExplicitly())}catch(Z){throw new R("JS-AUTH_CORE-GOPMD-IV03","Resolving endpoints failed.",null!=Z?Z:"Resolving endpoints by explicitly failed.")}return yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}))}getOIDCServiceEndpoints(){var l,Z,d,c,i,G,I,m,X,a;return b(this,void 0,void 0,(function*(){const b=yield this._oidcProviderMetaData();return{authorizationEndpoint:null!==(l=b.authorization_endpoint)&&void 0!==l?l:"",checkSessionIframe:null!==(Z=b.check_session_iframe)&&void 0!==Z?Z:"",endSessionEndpoint:null!==(d=b.end_session_endpoint)&&void 0!==d?d:"",introspectionEndpoint:null!==(c=b.introspection_endpoint)&&void 0!==c?c:"",issuer:null!==(i=b.issuer)&&void 0!==i?i:"",jwksUri:null!==(G=b.jwks_uri)&&void 0!==G?G:"",registrationEndpoint:null!==(I=b.registration_endpoint)&&void 0!==I?I:"",revocationEndpoint:null!==(m=b.revocation_endpoint)&&void 0!==m?m:"",tokenEndpoint:null!==(X=b.token_endpoint)&&void 0!==X?X:"",userinfoEndpoint:null!==(a=b.userinfo_endpoint)&&void 0!==a?a:""}}))}getSignOutURL(l){var Z,d,c;return b(this,void 0,void 0,(function*(){const b=null===(Z=yield this._oidcProviderMetaData())||void 0===Z?void 0:Z.end_session_endpoint,i=yield this._config();if(!b||0===b.trim().length)throw new R("JS-AUTH_CORE-GSOU-NF01","Sign-out endpoint not found.","No sign-out endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the sign-out endpoint passed to the SDK is empty.");const G=null===(d=yield this._dataLayer.getSessionData(l))||void 0===d?void 0:d.id_token;if(!G||0===G.trim().length)throw new R("JS-AUTH_CORE-GSOU-NF02","ID token not found.","No ID token could be found. Either the session information is lost or you have not signed in.");const I=null!==(c=null==i?void 0:i.signOutRedirectURL)&&void 0!==c?c:null==i?void 0:i.signInRedirectURL;if(!I||0===I.trim().length)throw new R("JS-AUTH_CORE-GSOU-NF03","No sign-out redirect URL found.","The sign-out redirect URL cannot be found or the URL passed to the SDK is empty. No sign-in redirect URL has been found either. ");return`${b}?id_token_hint=${G}&post_logout_redirect_uri=${I}&state=sign_out_success`}))}signOut(l){return b(this,void 0,void 0,(function*(){return yield this.getSignOutURL(l)}))}clearUserSessionData(l){return b(this,void 0,void 0,(function*(){yield this._authenticationHelper.clearUserSessionData(l)}))}getAccessToken(l){var Z;return b(this,void 0,void 0,(function*(){return null===(Z=yield this._dataLayer.getSessionData(l))||void 0===Z?void 0:Z.access_token}))}isAuthenticated(l){return b(this,void 0,void 0,(function*(){return Boolean(yield this.getAccessToken(l))}))}getPKCECode(l,Z){return b(this,void 0,void 0,(function*(){return yield this._dataLayer.getTemporaryDataParameter(Y.extractPKCEKeyFromStateParam(l),Z)}))}setPKCECode(l,Z,d){return b(this,void 0,void 0,(function*(){return yield this._dataLayer.setTemporaryDataParameter(Y.extractPKCEKeyFromStateParam(Z),l,d)}))}updateConfig(l){return b(this,void 0,void 0,(function*(){yield this._dataLayer.setConfigData(l),yield this.getOIDCProviderMetaData(!0)}))}}class J{constructor(l,Z){this._id=l,this._store=Z}setDataInBulk(l,Z){var d;return b(this,void 0,void 0,(function*(){const c=null!==(d=yield this._store.getData(l))&&void 0!==d?d:null,b=c&&JSON.parse(c),i=Object.assign(Object.assign({},b),Z),G=JSON.stringify(i);yield this._store.setData(l,G)}))}setValue(l,Z,d){var c;return b(this,void 0,void 0,(function*(){const b=null!==(c=yield this._store.getData(l))&&void 0!==c?c:null,i=b&&JSON.parse(b),G=Object.assign(Object.assign({},i),{[Z]:d}),I=JSON.stringify(G);yield this._store.setData(l,I)}))}removeValue(l,Z){var d;return b(this,void 0,void 0,(function*(){const c=null!==(d=yield this._store.getData(l))&&void 0!==d?d:null,b=c&&JSON.parse(c),i=Object.assign({},b);delete i[Z];const G=JSON.stringify(i);yield this._store.setData(l,G)}))}_resolveKey(l,Z){return Z?`${l}-${this._id}-${Z}`:`${l}-${this._id}`}setConfigData(l){return b(this,void 0,void 0,(function*(){yield this.setDataInBulk(this._resolveKey(a.ConfigData),l)}))}setOIDCProviderMetaData(l){return b(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(a.OIDCProviderMetaData),l)}))}setTemporaryData(l,Z){return b(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(a.TemporaryData,Z),l)}))}setSessionData(l,Z){return b(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(a.SessionData,Z),l)}))}setCustomData(l,Z,d){return b(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(l,d),Z)}))}getConfigData(){var l;return b(this,void 0,void 0,(function*(){return JSON.parse(null!==(l=yield this._store.getData(this._resolveKey(a.ConfigData)))&&void 0!==l?l:null)}))}getOIDCProviderMetaData(){var l;return b(this,void 0,void 0,(function*(){return JSON.parse(null!==(l=yield this._store.getData(this._resolveKey(a.OIDCProviderMetaData)))&&void 0!==l?l:null)}))}getTemporaryData(l){var Z;return b(this,void 0,void 0,(function*(){return JSON.parse(null!==(Z=yield this._store.getData(this._resolveKey(a.TemporaryData,l)))&&void 0!==Z?Z:null)}))}getSessionData(l){var Z;return b(this,void 0,void 0,(function*(){return JSON.parse(null!==(Z=yield this._store.getData(this._resolveKey(a.SessionData,l)))&&void 0!==Z?Z:null)}))}getCustomData(l,Z){var d;return b(this,void 0,void 0,(function*(){return JSON.parse(null!==(d=yield this._store.getData(this._resolveKey(l,Z)))&&void 0!==d?d:null)}))}removeConfigData(){return b(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(a.ConfigData))}))}removeOIDCProviderMetaData(){return b(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(a.OIDCProviderMetaData))}))}removeTemporaryData(l){return b(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(a.TemporaryData,l))}))}removeSessionData(l){return b(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(a.SessionData,l))}))}getConfigDataParameter(l){return b(this,void 0,void 0,(function*(){const Z=yield this._store.getData(this._resolveKey(a.ConfigData));return Z&&JSON.parse(Z)[l]}))}getOIDCProviderMetaDataParameter(l){return b(this,void 0,void 0,(function*(){const Z=yield this._store.getData(this._resolveKey(a.OIDCProviderMetaData));return Z&&JSON.parse(Z)[l]}))}getTemporaryDataParameter(l,Z){return b(this,void 0,void 0,(function*(){const d=yield this._store.getData(this._resolveKey(a.TemporaryData,Z));return d&&JSON.parse(d)[l]}))}getSessionDataParameter(l,Z){return b(this,void 0,void 0,(function*(){const d=yield this._store.getData(this._resolveKey(a.SessionData,Z));return d&&JSON.parse(d)[l]}))}setConfigDataParameter(l,Z){return b(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(a.ConfigData),l,Z)}))}setOIDCProviderMetaDataParameter(l,Z){return b(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(a.OIDCProviderMetaData),l,Z)}))}setTemporaryDataParameter(l,Z,d){return b(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(a.TemporaryData,d),l,Z)}))}setSessionDataParameter(l,Z,d){return b(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(a.SessionData,d),l,Z)}))}removeConfigDataParameter(l){return b(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(a.ConfigData),l)}))}removeOIDCProviderMetaDataParameter(l){return b(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(a.OIDCProviderMetaData),l)}))}removeTemporaryDataParameter(l,Z){return b(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(a.TemporaryData,Z),l)}))}removeSessionDataParameter(l,Z){return b(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(a.SessionData,Z),l)}))}}const H={clockTolerance:300,enablePKCE:!0,responseMode:Z.query,scope:["openid"],sendCookiesInRequests:!0,validateIDToken:!0};class U{
/**
     * This is the constructor method that returns an instance of the .
     *
     * @param {Store} store - The store object.
     *
     * @example
     * ```
     * const _store: Store = new DataStore();
     * const auth = new AsgardeoAuthClient<CustomClientConfig>(_store);
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#constructor
     * @preserve
     */
constructor(l,Z){U._instanceID?U._instanceID+=1:U._instanceID=0,this._dataLayer=new J(`instance_${U._instanceID}`,l),this._authenticationCore=new N(this._dataLayer,Z),U._authenticationCore=new N(this._dataLayer,Z);
/**
     *
     * This method initializes the SDK with the config data.
     *
     * @param {AuthClientConfig<T>} config - The config object to initialize with.
     *
     * @example
     * const config = {
     *     signInRedirectURL: "http://localhost:3000/sign-in",
     *     clientID: "client ID",
     *     baseUrl: "https://localhost:9443"
     * }
     *
     * await auth.initialize(config);
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#initialize
     *
     * @preserve
     */}initialize(l){var Z,d,c;return b(this,void 0,void 0,(function*(){yield this._dataLayer.setConfigData(Object.assign(Object.assign(Object.assign({},H),l),{scope:[...null!==(Z=H.scope)&&void 0!==Z?Z:[],...null!==(c=null===(d=l.scope)||void 0===d?void 0:d.filter((l=>{var Z;return!(null===(Z=null==H?void 0:H.scope)||void 0===Z?void 0:Z.includes(l))})))&&void 0!==c?c:[]]}))}))}
/**
     * This method returns the `DataLayer` object that allows you to access authentication data.
     *
     * @return {DataLayer} - The `DataLayer` object.
     *
     * @example
     * ```
     * const data = auth.getDataLayer();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDataLayer
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getDataLayer(){return this._dataLayer}
/**
     * This is an async method that returns a Promise that resolves with the authorization URL.
     *
     * @param {GetAuthURLConfig} config - (Optional) A config object to force initialization and pass
     * custom path parameters such as the fidp parameter.
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<string>} - A promise that resolves with the authorization URL.
     *
     * @example
     * ```
     * auth.getAuthorizationURL().then((url)=>{
     *  // console.log(url);
     * }).catch((error)=>{
     *  // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAuthorizationURL
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getAuthorizationURL(l,Z){return b(this,void 0,void 0,(function*(){const d=Object.assign({},l);return null==d||delete d.forceInit,(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated"))?this._authenticationCore.getAuthorizationURL(d,Z):this._authenticationCore.getOIDCProviderMetaData(null==l?void 0:l.forceInit).then((()=>this._authenticationCore.getAuthorizationURL(d,Z)))}))}
/**
     * This is an async method that sends a request to obtain the access token and returns a Promise
     * that resolves with the token and other relevant data.
     *
     * @param {string} authorizationCode - The authorization code.
     * @param {string} sessionState - The session state.
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<TokenResponse>} - A Promise that resolves with the token response.
     *
     * @example
     * ```
     * auth.requestAccessToken(authCode, sessionState).then((token)=>{
     *  // console.log(token);
     * }).catch((error)=>{
     *  // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestAccessToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */requestAccessToken(l,Z,d,c){return b(this,void 0,void 0,(function*(){return(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated"))?this._authenticationCore.requestAccessToken(l,Z,d,c):this._authenticationCore.getOIDCProviderMetaData(!1).then((()=>this._authenticationCore.requestAccessToken(l,Z,d,c)))}))}
/**
     * This method clears all authentication data and returns the sign-out URL.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<string>} - A Promise that resolves with the sign-out URL.
     *
     * @example
     * ```
     * const signOutUrl = await auth.signOut();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#signOut
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */signOut(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.signOut(l)}))}
/**
     * This method returns the sign-out URL.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * **This doesn't clear the authentication data.**
     *
     * @return {Promise<string>} - A Promise that resolves with the sign-out URL.
     *
     * @example
     * ```
     * const signOutUrl = await auth.getSignOutURL();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getSignOutURL
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getSignOutURL(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getSignOutURL(l)}))}
/**
     * This method returns OIDC service endpoints that are fetched from the `.well-known` endpoint.
     *
     * @return {Promise<OIDCEndpoints>} - A Promise that resolves with an object containing the OIDC service endpoints.
     *
     * @example
     * ```
     * const endpoints = await auth.getOIDCServiceEndpoints();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getOIDCServiceEndpoints
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getOIDCServiceEndpoints(){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getOIDCServiceEndpoints()}))}
/**
     * This method decodes the payload of the ID token and returns it.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<DecodedIDTokenPayload>} - A Promise that resolves with the decoded ID token payload.
     *
     * @example
     * ```
     * const decodedIdToken = await auth.getDecodedIDToken();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDecodedIDToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getDecodedIDToken(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getDecodedIDToken(l)}))}
/**
     * This method returns the ID token.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<string>} - A Promise that resolves with the ID token.
     *
     * @example
     * ```
     * const idToken = await auth.getIDToken();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIDToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getIDToken(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getIDToken(l)}))}
/**
     * This method returns the basic user information obtained from the ID token.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<BasicUserInfo>} - A Promise that resolves with an object containing the basic user information.
     *
     * @example
     * ```
     * const userInfo = await auth.getBasicUserInfo();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getBasicUserInfo
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getBasicUserInfo(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getBasicUserInfo(l)}))}
/**
     * This method returns the crypto helper object.
     *
     * @return {Promise<CryptoHelper>} - A Promise that resolves with a CryptoHelper object.
     *
     * @example
     * ```
     * const cryptoHelper = await auth.CryptoHelper();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getCryptoHelper
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getCryptoHelper(){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getCryptoHelper()}))}
/**
     * This method revokes the access token.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * **This method also clears the authentication data.**
     *
     * @return {Promise<FetchResponse>} - A Promise that returns the response of the revoke-access-token request.
     *
     * @example
     * ```
     * auth.revokeAccessToken().then((response)=>{
     *  // console.log(response);
     * }).catch((error)=>{
     *  // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#revokeAccessToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */revokeAccessToken(l){return this._authenticationCore.revokeAccessToken(l)}
/**
     * This method refreshes the access token and returns a Promise that resolves with the new access
     * token and other relevant data.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<TokenResponse>} - A Promise that resolves with the token response.
     *
     * @example
     * ```
     * auth.refreshAccessToken().then((response)=>{
     *  // console.log(response);
     * }).catch((error)=>{
     *  // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#refreshAccessToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */refreshAccessToken(l){return this._authenticationCore.refreshAccessToken(l)}
/**
     * This method returns the access token.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<string>} - A Promise that resolves with the access token.
     *
     * @example
     * ```
     * const accessToken = await auth.getAccessToken();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAccessToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getAccessToken(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getAccessToken(l)}))}
/**
     * This method sends a custom-grant request and returns a Promise that resolves with the response
     * depending on the config passed.
     *
     * @param {CustomGrantConfig} config - A config object containing the custom grant configurations.
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<TokenResponse | FetchResponse>} - A Promise that resolves with the response depending
     * on your configurations.
     *
     * @example
     * ```
     * const config = {
     *   attachToken: false,
     *   data: {
     *       client_id: "{{clientID}}",
     *       grant_type: "account_switch",
     *       scope: "{{scope}}",
     *       token: "{{token}}",
     *   },
     *   id: "account-switch",
     *   returnResponse: true,
     *   returnsSession: true,
     *   signInRequired: true
     * }
     *
     * auth.requestCustomGrant(config).then((response)=>{
     *  // console.log(response);
     * }).catch((error)=>{
     *  // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestCustomGrant
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */requestCustomGrant(l,Z){return this._authenticationCore.requestCustomGrant(l,Z)}
/**
     * This method returns if the user is authenticated or not.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @return {Promise<boolean>} - A Promise that resolves with `true` if the user is authenticated, `false` otherwise.
     *
     * @example
     * ```
     * await auth.isAuthenticated();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isAuthenticated
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */isAuthenticated(l){return b(this,void 0,void 0,(function*(){return this._authenticationCore.isAuthenticated(l)}))}
/**
     * This method returns the PKCE code generated during the generation of the authentication URL.
     *
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     * @param {string} state - The state parameter that was passed in the authentication URL.
     *
     * @return {Promise<string>} - A Promise that resolves with the PKCE code.
     *
     * @example
     * ```
     * const pkce = await getPKCECode();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getPKCECode
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getPKCECode(l,Z){return b(this,void 0,void 0,(function*(){return this._authenticationCore.getPKCECode(l,Z)}))}
/**
     * This method sets the PKCE code to the data store.
     *
     * @param {string} pkce - The PKCE code.
     * @param {string} state - The state parameter that was passed in the authentication URL.
     * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
     * scenarios where each user should be uniquely identified.
     *
     * @example
     * ```
     * await auth.setPKCECode("pkce_code")
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#setPKCECode
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */setPKCECode(l,Z,d){return b(this,void 0,void 0,(function*(){yield this._authenticationCore.setPKCECode(l,Z,d)}))}
/**
     * This method returns if the sign-out is successful or not.
     *
     * @param {string} signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.
     *
     * **The server appends path parameters to the `signOutRedirectURL` and these path parameters
     *  are required for this method to function.**
     *
     * @return {boolean} - `true` if successful, `false` otherwise.
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isSignOutSuccessful
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */static isSignOutSuccessful(l){const Z=new URL(l),d=Z.searchParams.get("state"),c=Boolean(Z.searchParams.get("error"));return!!d&&"sign_out_success"===d&&!c}
/**
     * This method returns if the sign-out has failed or not.
     *
     * @param {string} signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.
     *
     * **The server appends path parameters to the `signOutRedirectURL` and these path parameters
     *  are required for this method to function.**
     *
     * @return {boolean} - `true` if successful, `false` otherwise.
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#didSignOutFail
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */static didSignOutFail(l){const Z=new URL(l),d=Z.searchParams.get("state"),c=Boolean(Z.searchParams.get("error"));return!!d&&"sign_out_success"===d&&c}
/**
     * This method updates the configuration that was passed into the constructor when instantiating this class.
     *
     * @param {Partial<AuthClientConfig<T>>} config - A config object to update the SDK configurations with.
     *
     * @example
     * ```
     * const config = {
     *     signInRedirectURL: "http://localhost:3000/sign-in",
     *     clientID: "client ID",
     *     baseUrl: "https://localhost:9443"
     * }
     *
     * await auth.updateConfig(config);
     * ```
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#updateConfig
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */updateConfig(l){return b(this,void 0,void 0,(function*(){yield this._authenticationCore.updateConfig(l)}))}static clearUserSessionData(l){return b(this,void 0,void 0,(function*(){yield this._authenticationCore.clearUserSessionData(l)}))}}var L,r,B,F=("",null,!1,function(l){return L=L||function(l,Z,d){var c=void 0===Z?null:Z,b=function(l,Z){var d=atob(l);if(Z){for(var c=new Uint8Array(d.length),b=0,i=d.length;b<i;++b)c[b]=d.charCodeAt(b);return String.fromCharCode.apply(null,new Uint16Array(c.buffer))}return d}(l,void 0!==d&&d),i=b.indexOf("\n",10)+1,G=b.substring(i)+(c?"//# sourceMappingURL="+c:""),I=new Blob([G],{type:"application/javascript"});return URL.createObjectURL(I)}("",null,false),new Worker(L,l)});!function(l){l.LocalStorage="localStorage",l.SessionStorage="sessionStorage",l.WebWorker="webWorker",l.BrowserMemory="browserMemory"}(r||(r={})),function(l){l.SignIn="sign-in",l.SignOut="sign-out",l.Initialize="initialize",l.HttpRequestStart="http-request-start",l.HttpRequestFinish="http-request-finish",l.HttpRequestError="http-request-error",l.HttpRequestSuccess="http-request-success",l.RevokeAccessToken="revoke-access-token",l.CustomGrant="custom-grant",l.SignOutFailed="sign-out-failed"}(B||(B={}));const v="Y2hlY2tTZXNzaW9u";class k{constructor(l,Z){this._authenticationClient=l,this._dataLayer=this._authenticationClient.getDataLayer(),this._spaHelper=Z}enableHttpHandler(l){(null==l?void 0:l.enableHandler)&&l.enableHandler()}disableHttpHandler(l){(null==l?void 0:l.disableHandler)&&l.disableHandler()}initializeSessionManger(l,Z,d,c,b){var i,G,I;b.initialize(l.clientID,null!==(i=Z.checkSessionIframe)&&void 0!==i?i:"",d,null!==(G=l.checkSessionInterval)&&void 0!==G?G:3,null!==(I=l.sessionRefreshInterval)&&void 0!==I?I:300,l.signInRedirectURL,c)}requestCustomGrant(l,Z){var d,b,i;return c(this,void 0,void 0,(function*(){let G=!0,I=!1;if(null==l?void 0:l.tokenEndpoint){G=!1;for(const Z of[...null!==(b=null===(d=yield this._dataLayer.getConfigData())||void 0===d?void 0:d.resourceServerURLs)&&void 0!==b?b:[],l.baseUrl])if(Z&&(null===(i=l.tokenEndpoint)||void 0===i?void 0:i.startsWith(Z))){I=!0;break}}return l.shouldReplayAfterRefresh&&this._dataLayer.setTemporaryDataParameter("custom_grant_config",JSON.stringify(l)),G||I?this._authenticationClient.requestCustomGrant(l).then((d=>c(this,void 0,void 0,(function*(){return Z&&"function"==typeof Z&&Z(l),l.returnsSession?(this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()):d})))).catch((l=>Promise.reject(l))):Promise.reject(new R("SPA-MAIN_THREAD_CLIENT-RCG-IV01","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified token endpoint in this request cannot be found among the `resourceServerURLs`"))}))}getCustomGrantConfigData(){return c(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getTemporaryDataParameter("custom_grant_config");return l?JSON.parse(l):null}))}refreshAccessToken(l){return c(this,void 0,void 0,(function*(){try{yield this._authenticationClient.refreshAccessToken();const Z=yield this.getCustomGrantConfigData();return Z&&(yield this.requestCustomGrant(Z,l)),this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()}catch(l){return Promise.reject(l)}}))}httpRequest(l,Z,d,b,i,G){var I,m;return c(this,void 0,void 0,(function*(){let X=!1;const a=yield this._dataLayer.getConfigData();for(const l of[...null!==(I=yield null==a?void 0:a.resourceServerURLs)&&void 0!==I?I:[],a.baseUrl])if(l&&(null===(m=null==Z?void 0:Z.url)||void 0===m?void 0:m.startsWith(l))){X=!0;break}return X?l.request(Z).then((l=>Promise.resolve(l))).catch((I=>c(this,void 0,void 0,(function*(){var c,m,X;if(401===(null===(c=null==I?void 0:I.response)||void 0===c?void 0:c.status)||!(null==I?void 0:I.response)){let a;try{a=yield this.refreshAccessToken(G)}catch(c){throw d&&("function"==typeof b&&(yield b(Object.assign(Object.assign({},I),{code:"Access token is invalid"}))),"function"==typeof i&&i()),new R("SPA-AUTH_HELPER-HR-SE01",null!==(m=null==c?void 0:c.name)&&void 0!==m?m:"Refresh token request failed.",null!==(X=null==c?void 0:c.message)&&void 0!==X?X:"An error occurred while trying to refresh the access token following a 401 response from the server.")}if(a)try{const d=yield l.request(Z);return Promise.resolve(d)}catch(c){return d&&("function"==typeof b&&(yield b(c)),"function"==typeof i&&i()),Promise.reject(c)}}return d&&("function"==typeof b&&(yield b(I)),"function"==typeof i&&i()),Promise.reject(I)})))):Promise.reject(new R("SPA-AUTH_HELPER-HR-IV02","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified endpoint in this request cannot be found among the `resourceServerURLs`"))}))}httpRequestAll(l,Z,d,b,i){var G,I,m;return c(this,void 0,void 0,(function*(){let X=!0;const a=yield this._dataLayer.getConfigData();for(const Z of l){let l=!1;for(const d of[...null!==(I=null===(G=yield a)||void 0===G?void 0:G.resourceServerURLs)&&void 0!==I?I:[],a.baseUrl])if(d&&(null===(m=Z.url)||void 0===m?void 0:m.startsWith(d))){l=!0;break}if(!l){X=!1;break}}const V=[];if(X)return l.forEach((l=>{V.push(Z.request(l))})),(null==Z?void 0:Z.all)&&Z.all(V).then((l=>Promise.resolve(l))).catch((l=>c(this,void 0,void 0,(function*(){var G,I,m;if(401===(null===(G=null==l?void 0:l.response)||void 0===G?void 0:G.status)||!(null==l?void 0:l.response)){let G;try{G=yield this._authenticationClient.refreshAccessToken()}catch(Z){throw d&&("function"==typeof b&&(yield b(Object.assign(Object.assign({},l),{code:"Access token is invalid"}))),"function"==typeof i&&i()),new R("SPA-AUTH_HELPER-HRA-SE01",null!==(I=null==Z?void 0:Z.name)&&void 0!==I?I:"Refresh token request failed.",null!==(m=null==Z?void 0:Z.message)&&void 0!==m?m:"An error occurred while trying to refresh the access token following a 401 response from the server.")}if(G)return Z.all&&Z.all(V).then((l=>Promise.resolve(l))).catch((l=>c(this,void 0,void 0,(function*(){return d&&("function"==typeof b&&(yield b(l)),"function"==typeof i&&i()),Promise.reject(l)}))))}return d&&("function"==typeof b&&(yield b(l)),"function"==typeof i&&i()),Promise.reject(l)}))));throw new R("SPA-AUTH_HELPER-HRA-IV02","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified endpoint in this request cannot be found among the `resourceServerURLs`")}))}requestAccessToken(l,Z,d,b,i){return c(this,void 0,void 0,(function*(){const G=yield this._dataLayer.getConfigData();if(G.storage===r.BrowserMemory&&G.enablePKCE&&Z){const l=x.getPKCE(Y.extractPKCEKeyFromStateParam(Z));yield this._authenticationClient.setPKCECode(Y.extractPKCEKeyFromStateParam(Z),l)}else G.storage===r.WebWorker&&b&&(yield this._authenticationClient.setPKCECode(b,null!=i?i:""));return l?this._authenticationClient.requestAccessToken(l,null!=Z?Z:"",null!=i?i:"").then((()=>c(this,void 0,void 0,(function*(){return G.storage!==r.WebWorker?(x.setSignOutURL(yield this._authenticationClient.getSignOutURL()),this._spaHelper&&(this._spaHelper.clearRefreshTokenTimeout(),this._spaHelper.refreshAccessTokenAutomatically(this)),d&&"function"==typeof d&&G.enableOIDCSessionManagement&&d()):this._spaHelper&&this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()})))).catch((l=>Promise.reject(l))):Promise.reject(new R("SPA-AUTH_HELPER-RAT1-NF01","No authorization code.","No authorization code was found."))}))}trySignInSilently(l,Z,d){var b;return c(this,void 0,void 0,(function*(){if(x.isInitializedSilentSignIn())return yield d.receivePromptNoneResponse(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""});const i=document.getElementById("rpIFrame"),G=null===(b=null==i?void 0:i.contentDocument)||void 0===b?void 0:b.getElementById("promptNoneIFrame");try{const Z=yield l();G.src=Z}catch(l){return Promise.reject(l)}return new Promise(((l,d)=>{const b=setTimeout((()=>{l(!1)}),1e4),i=G=>c(this,void 0,void 0,(function*(){var c,I,m,X;const a=G.data;"check_session_signed_out"==(null==a?void 0:a.type)&&(window.removeEventListener("message",i),clearTimeout(b),l(!1)),"check_session_signed_in"==(null==a?void 0:a.type)&&(null===(c=null==a?void 0:a.data)||void 0===c?void 0:c.code)&&Z(null===(I=null==a?void 0:a.data)||void 0===I?void 0:I.code,null===(m=null==a?void 0:a.data)||void 0===m?void 0:m.sessionState,null===(X=null==a?void 0:a.data)||void 0===X?void 0:X.state).then((Z=>{window.removeEventListener("message",i),l(Z)})).catch((l=>{window.removeEventListener("message",i),d(l)})).finally((()=>{clearTimeout(b)}))}));window.addEventListener("message",i)}))}))}handleSignIn(l,Z,d){return c(this,void 0,void 0,(function*(){const c=yield this._dataLayer.getConfigData();if(yield l())return Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""});if(c.storage!==r.WebWorker&&(yield this._authenticationClient.isAuthenticated()))return this._spaHelper.clearRefreshTokenTimeout(),this._spaHelper.refreshAccessTokenAutomatically(this),c.enableOIDCSessionManagement&&Z(),Promise.resolve(yield this._authenticationClient.getBasicUserInfo());const b=new URL(window.location.href).searchParams.get("error"),i=new URL(window.location.href).searchParams.get("error_description");if(b){const l=new URL(window.location.href);throw l.searchParams.delete("error"),l.searchParams.delete("error_description"),history.pushState(null,document.title,l.toString()),new R("SPA-AUTH_HELPER-SI-SE01",b,null!=i?i:"")}if(c.storage===r.WebWorker&&d){const l=yield d();if(l)return l}}))}getBasicUserInfo(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getBasicUserInfo()}))}getDecodedIDToken(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getDecodedIDToken()}))}getDecodedIDPIDToken(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getDecodedIDToken()}))}getCryptoHelper(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getCryptoHelper()}))}getIDToken(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getIDToken()}))}getOIDCServiceEndpoints(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getOIDCServiceEndpoints()}))}getAccessToken(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.getAccessToken()}))}getIDPAccessToken(){var l;return c(this,void 0,void 0,(function*(){return null===(l=yield this._dataLayer.getSessionData())||void 0===l?void 0:l.access_token}))}getDataLayer(){return this._dataLayer}isAuthenticated(){return c(this,void 0,void 0,(function*(){return this._authenticationClient.isAuthenticated()}))}}class z{constructor(l){this._authenticationClient=l,this._dataLayer=this._authenticationClient.getDataLayer()}refreshAccessTokenAutomatically(l){return c(this,void 0,void 0,(function*(){const Z=yield this._dataLayer.getSessionData();if(Z.refresh_token){const d=parseInt(Z.expires_in),b=setTimeout((()=>c(this,void 0,void 0,(function*(){yield l.refreshAccessToken()}))),1e3*(d<=10?d:d-10));yield this._dataLayer.setTemporaryDataParameter(V,JSON.stringify(b))}}))}clearRefreshTokenTimeout(){return c(this,void 0,void 0,(function*(){if(yield this._dataLayer.getTemporaryDataParameter(V)){const l=JSON.parse(yield this._dataLayer.getTemporaryDataParameter(V));clearTimeout(l)}}))}}class T{constructor(){}static generateSuccessMessage(l){return{blob:(null==l?void 0:l.data)instanceof Blob?null==l?void 0:l.data:null,data:JSON.stringify(null!=l?l:""),success:!0}}static generateFailureMessage(l){return(null==l?void 0:l.toJSON)&&delete l.toJSON,{error:JSON.stringify(null!=l?l:""),success:!1}}}class x{constructor(){}static removeAuthorizationCode(){const l=location.href;history.pushState({},document.title,l.replace(/\?code=.*$/,""))}static getPKCE(l){var Z;return null!==(Z=sessionStorage.getItem(l))&&void 0!==Z?Z:""}static setPKCE(l,Z){sessionStorage.setItem(l,Z)}static setSignOutURL(l){sessionStorage.setItem(g,l)}static getSignOutURL(){var l;return null!==(l=sessionStorage.getItem(g))&&void 0!==l?l:""}static removePKCE(l){sessionStorage.removeItem(l)}static canContinueSignIn(l,Z){return!(l&&!x.hasErrorInURL()&&!x.hasAuthSearchParamsInURL()&&!Z)}static isInitializedSilentSignIn(){return x.isSilentStatePresentInURL()}static wasSignInCalled(){return!(!x.hasErrorInURL()&&!x.hasAuthSearchParamsInURL()||this.isSilentStatePresentInURL())}static wasSilentSignInCalled(){const l=sessionStorage.getItem("initialized-silent-sign-in"),Z=l?JSON.parse(l):null;return Boolean(Z)}static isSignOutSuccessful(){return c(this,void 0,void 0,(function*(){if(U.isSignOutSuccessful(window.location.href)){const l=window.location.href.split("?")[0];return history.pushState({},document.title,l),yield U.clearUserSessionData(),!0}return!1}))}static didSignOutFail(){if(U.didSignOutFail(window.location.href)){const l=new URL(window.location.href),Z=l.searchParams.get("error"),d=l.searchParams.get("error_description"),c=window.location.href.split("?")[0];return history.pushState({},document.title,c),{description:null!=d?d:"",error:null!=Z?Z:""}}return!1}static isSilentStatePresentInURL(){var l;const Z=new URL(window.location.href).searchParams.get("state");return null!==(l=null==Z?void 0:Z.includes("sign-in-silently"))&&void 0!==l&&l}static hasAuthSearchParamsInURL(l=window.location.search){return/[?&]code=[^&]+/.test(l)}static hasErrorInURL(l=window.location.href){const Z=new URL(l);return!!Z.searchParams.get("error")&&Z.searchParams.get("state")!==p}static canSendPromptNoneRequest(){const l=sessionStorage.getItem("promptNoneRequestSent");return!(l&&JSON.parse(l))}static setPromptNoneRequestSent(l){sessionStorage.setItem("promptNoneRequestSent",JSON.stringify(l))}static waitTillPageRedirect(l){return c(this,void 0,void 0,(function*(){const Z=null!=l?l:3e3;yield new Promise((l=>setTimeout(l,1e3*Z)))}))}}const A=(()=>{let l,Z,d,b,i,G,I,m,X,a,V;const t=(c,I,m,X,a,t,o)=>{l=c,Z=I,d=m,b=X,i=t,G=a,V=o,b>-1&&W(),G>-1&&(a=setInterval((()=>{n()}),1e3*G))},W=()=>c(void 0,void 0,void 0,(function*(){var G;if(!Z||!l||!i)return;const I="opIFrame",X=document.getElementById("rpIFrame");(null===(G=null==X?void 0:X.contentDocument)||void 0===G?void 0:G.getElementById(I)).src=Z+"?client_id="+l+"&redirect_uri="+i,m=setInterval((function(){var b;return c(this,void 0,void 0,(function*(){const c=yield d();if(Boolean(l)&&Boolean(c)){const d=`${l} ${c}`,i=document.getElementById("rpIFrame"),G=(null===(b=null==i?void 0:i.contentDocument)||void 0===b?void 0:b.getElementById(I)).contentWindow;null==G||G.postMessage(d,Z)}}))}),1e3*b),u()})),o=()=>{clearInterval(m),clearInterval(void 0)},u=()=>{null===window||void 0===window||window.addEventListener("message",(function(l){var d;return c(this,void 0,void 0,(function*(){!Z||(null==Z?void 0:Z.indexOf(l.origin))<0||"set_session_state_from_iframe"===(null===(d=null==l?void 0:l.data)||void 0===d?void 0:d.type)||"unchanged"===l.data||("error"===l.data?window.location.href=yield I():"changed"===l.data&&n())}))}),!1)},n=()=>c(void 0,void 0,void 0,(function*(){var l;const Z=document.getElementById("rpIFrame"),d=null===(l=null==Z?void 0:Z.contentDocument)||void 0===l?void 0:l.getElementById("promptNoneIFrame");if(x.canSendPromptNoneRequest()){x.setPromptNoneRequestSent(!0);const l=Z=>{var d,c,b;"set_session_state_from_iframe"===(null===(d=null==Z?void 0:Z.data)||void 0===d?void 0:d.type)&&(a(null!==(b=null===(c=null==Z?void 0:Z.data)||void 0===c?void 0:c.data)&&void 0!==b?b:""),null===window||void 0===window||window.removeEventListener("message",l))};X!==r.BrowserMemory&&X!==r.WebWorker||null===window||void 0===window||window.addEventListener("message",l);const Z=yield V({prompt:"none",responseMode:"query",state:v});d.src=Z}})),h=l=>c(void 0,void 0,void 0,(function*(){var Z,d;const c=new URL(window.location.href).searchParams.get("state"),b=new URL(window.location.href).searchParams.get(e),i=window.parent.parent;if(null!==c&&(c.includes(v)||c.includes("sign-in-silently"))){const G=new URL(window.location.href).searchParams.get("code");if(null!==G&&0!==G.length){if(c.includes("sign-in-silently")){const l={data:{code:G,sessionState:null!=b?b:"",state:c},type:"check_session_signed_in"};return sessionStorage.setItem("initialized-silent-sign-in","false"),i.postMessage(l,i.origin),x.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield x.waitTillPageRedirect(),!0}const I=new URL(window.location.href).searchParams.get("session_state");if(X===r.LocalStorage||X===r.SessionStorage)l&&(yield l(I));else{const l={data:null!=I?I:"",type:"set_session_state_from_iframe"};null===(d=null===(Z=null===window||void 0===window?void 0:window.parent)||void 0===Z?void 0:Z.parent)||void 0===d||d.postMessage(l)}return x.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield x.waitTillPageRedirect(),!0}if(c.includes("sign-in-silently")){const l={type:"check_session_signed_out"};return window.parent.parent.postMessage(l,i.origin),x.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield x.waitTillPageRedirect(),!0}return x.setPromptNoneRequestSent(!1),i.location.href=yield I(),window.location.href="about:blank",yield x.waitTillPageRedirect(),!0}return!1}));return(l,Z,d)=>c(void 0,void 0,void 0,(function*(){var c;let b=document.createElement("iframe");b.setAttribute("id","rpIFrame"),b.style.display="none";let i=!1;for(b.onload=()=>{var l,Z,d,c;b=document.getElementById("rpIFrame");const G=null==b?void 0:b.contentDocument,I=null==G?void 0:G.createElement("iframe");I&&(I.setAttribute("id","opIFrame"),I.style.display="none");const m=null==G?void 0:G.createElement("iframe");m&&(m.setAttribute("id","promptNoneIFrame"),m.style.display="none"),I&&(null===(Z=null===(l=null==b?void 0:b.contentDocument)||void 0===l?void 0:l.body)||void 0===Z||Z.appendChild(I)),m&&(null===(c=null===(d=null==b?void 0:b.contentDocument)||void 0===d?void 0:d.body)||void 0===c||c.appendChild(m)),i=!0},null===(c=null===document||void 0===document?void 0:document.body)||void 0===c||c.appendChild(b),I=l,X=Z,a=d;!1===i;)yield new Promise((l=>setTimeout(l,1)));return{initialize:t,receivePromptNoneResponse:h,reset:o}}))})();var Q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==d?d:"undefined"!=typeof self?self:{};var j={exports:{}},M=function(l,Z){return function(){for(var d=new Array(arguments.length),c=0;c<d.length;c++)d[c]=arguments[c];return l.apply(Z,d)}},P=M,w=Object.prototype.toString;function f(l){return Array.isArray(l)}function E(l){return void 0===l}function D(l){return"[object ArrayBuffer]"===w.call(l)}function O(l){return null!==l&&"object"==typeof l}function q(l){if("[object Object]"!==w.call(l))return!1;var Z=Object.getPrototypeOf(l);return null===Z||Z===Object.prototype}function _(l){return"[object Function]"===w.call(l)}function $(l,Z){if(null!=l)if("object"!=typeof l&&(l=[l]),f(l))for(var d=0,c=l.length;d<c;d++)Z.call(null,l[d],d,l);else for(var b in l)Object.prototype.hasOwnProperty.call(l,b)&&Z.call(null,l[b],b,l)}var ll={isArray:f,isArrayBuffer:D,isBuffer:function(l){return null!==l&&!E(l)&&null!==l.constructor&&!E(l.constructor)&&"function"==typeof l.constructor.isBuffer&&l.constructor.isBuffer(l)},isFormData:function(l){return"[object FormData]"===w.call(l)},isArrayBufferView:function(l){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(l):l&&l.buffer&&D(l.buffer)},isString:function(l){return"string"==typeof l},isNumber:function(l){return"number"==typeof l},isObject:O,isPlainObject:q,isUndefined:E,isDate:function(l){return"[object Date]"===w.call(l)},isFile:function(l){return"[object File]"===w.call(l)},isBlob:function(l){return"[object Blob]"===w.call(l)},isFunction:_,isStream:function(l){return O(l)&&_(l.pipe)},isURLSearchParams:function(l){return"[object URLSearchParams]"===w.call(l)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:$,merge:function l(){var Z={};function d(d,c){q(Z[c])&&q(d)?Z[c]=l(Z[c],d):q(d)?Z[c]=l({},d):f(d)?Z[c]=d.slice():Z[c]=d}for(var c=0,b=arguments.length;c<b;c++)$(arguments[c],d);return Z},extend:function(l,Z,d){return $(Z,(function(Z,c){l[c]=d&&"function"==typeof Z?P(Z,d):Z})),l},trim:function(l){return l.trim?l.trim():l.replace(/^\s+|\s+$/g,"")},stripBOM:function(l){return 65279===l.charCodeAt(0)&&(l=l.slice(1)),l}},Zl=ll;function dl(l){return encodeURIComponent(l).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var cl=function(l,Z,d){if(!Z)return l;var c;if(d)c=d(Z);else if(Zl.isURLSearchParams(Z))c=Z.toString();else{var b=[];Zl.forEach(Z,(function(l,Z){null!=l&&(Zl.isArray(l)?Z+="[]":l=[l],Zl.forEach(l,(function(l){Zl.isDate(l)?l=l.toISOString():Zl.isObject(l)&&(l=JSON.stringify(l)),b.push(dl(Z)+"="+dl(l))})))})),c=b.join("&")}if(c){var i=l.indexOf("#");-1!==i&&(l=l.slice(0,i)),l+=(-1===l.indexOf("?")?"?":"&")+c}return l},bl=ll;function il(){this.handlers=[]}il.prototype.use=function(l,Z,d){return this.handlers.push({fulfilled:l,rejected:Z,synchronous:!!d&&d.synchronous,runWhen:d?d.runWhen:null}),this.handlers.length-1},il.prototype.eject=function(l){this.handlers[l]&&(this.handlers[l]=null)},il.prototype.forEach=function(l){bl.forEach(this.handlers,(function(Z){null!==Z&&l(Z)}))};var Gl=il,Il=void 0!==d?d:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function ml(){throw new Error("setTimeout has not been defined")}function Xl(){throw new Error("clearTimeout has not been defined")}var al=ml,Vl=Xl;function tl(l){if(al===setTimeout)return setTimeout(l,0);if((al===ml||!al)&&setTimeout)return al=setTimeout,setTimeout(l,0);try{return al(l,0)}catch(Z){try{return al.call(null,l,0)}catch(Z){return al.call(this,l,0)}}}"function"==typeof Il.setTimeout&&(al=setTimeout),"function"==typeof Il.clearTimeout&&(Vl=clearTimeout);var Wl,ol=[],ul=!1,nl=-1;function hl(){ul&&Wl&&(ul=!1,Wl.length?ol=Wl.concat(ol):nl=-1,ol.length&&el())}function el(){if(!ul){var l=tl(hl);ul=!0;for(var Z=ol.length;Z;){for(Wl=ol,ol=[];++nl<Z;)Wl&&Wl[nl].run();nl=-1,Z=ol.length}Wl=null,ul=!1,function(l){if(Vl===clearTimeout)return clearTimeout(l);if((Vl===Xl||!Vl)&&clearTimeout)return Vl=clearTimeout,clearTimeout(l);try{Vl(l)}catch(Z){try{return Vl.call(null,l)}catch(Z){return Vl.call(this,l)}}}(l)}}function gl(l,Z){this.fun=l,this.array=Z}function pl(){}gl.prototype.run=function(){this.fun.apply(null,this.array)};var sl=pl,yl=pl,Cl=pl,Rl=pl,Yl=pl,Sl=pl,Kl=pl,Nl=Il.performance||{},Jl=Nl.now||Nl.mozNow||Nl.msNow||Nl.oNow||Nl.webkitNow||function(){return(new Date).getTime()},Hl=new Date,Ul={nextTick:function(l){var Z=new Array(arguments.length-1);if(arguments.length>1)for(var d=1;d<arguments.length;d++)Z[d-1]=arguments[d];ol.push(new gl(l,Z)),1!==ol.length||ul||tl(el)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:sl,addListener:yl,once:Cl,off:Rl,removeListener:Yl,removeAllListeners:Sl,emit:Kl,binding:function(l){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(l){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(l){var Z=.001*Jl.call(Nl),d=Math.floor(Z),c=Math.floor(Z%1*1e9);return l&&(d-=l[0],(c-=l[1])<0&&(d--,c+=1e9)),[d,c]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-Hl)/1e3}},Ll=Ul,rl=ll,Bl=function(l,Z,d,c,b){return l.config=Z,d&&(l.code=d),l.request=c,l.response=b,l.isAxiosError=!0,l.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},l},Fl={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},vl=Bl,kl=function(l,Z,d,c,b){var i=new Error(l);return vl(i,Z,d,c,b)},zl=kl,Tl=ll,xl=Tl.isStandardBrowserEnv()?{write:function(l,Z,d,c,b,i){var G=[];G.push(l+"="+encodeURIComponent(Z)),Tl.isNumber(d)&&G.push("expires="+new Date(d).toGMTString()),Tl.isString(c)&&G.push("path="+c),Tl.isString(b)&&G.push("domain="+b),!0===i&&G.push("secure"),document.cookie=G.join("; ")},read:function(l){var Z=document.cookie.match(new RegExp("(^|;\\s*)("+l+")=([^;]*)"));return Z?decodeURIComponent(Z[3]):null},remove:function(l){this.write(l,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},Al=ll,Ql=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],jl=ll,Ml=jl.isStandardBrowserEnv()?function(){var l,Z=/(msie|trident)/i.test(navigator.userAgent),d=document.createElement("a");function c(l){var c=l;return Z&&(d.setAttribute("href",c),c=d.href),d.setAttribute("href",c),{href:d.href,protocol:d.protocol?d.protocol.replace(/:$/,""):"",host:d.host,search:d.search?d.search.replace(/^\?/,""):"",hash:d.hash?d.hash.replace(/^#/,""):"",hostname:d.hostname,port:d.port,pathname:"/"===d.pathname.charAt(0)?d.pathname:"/"+d.pathname}}return l=c(window.location.href),function(Z){var d=jl.isString(Z)?c(Z):Z;return d.protocol===l.protocol&&d.host===l.host}}():function(){return!0};function Pl(l){this.message=l}Pl.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},Pl.prototype.__CANCEL__=!0;var wl=Pl,fl=ll,El=xl,Dl=cl,Ol=Ml,ql=kl,_l=Fl,$l=wl,lZ=ll,ZZ=function(l,Z){rl.forEach(l,(function(d,c){c!==Z&&c.toUpperCase()===Z.toUpperCase()&&(l[Z]=d,delete l[c])}))},dZ=Bl,cZ={"Content-Type":"application/x-www-form-urlencoded"};function bZ(l,Z){!lZ.isUndefined(l)&&lZ.isUndefined(l["Content-Type"])&&(l["Content-Type"]=Z)}var iZ,GZ={transitional:Fl,adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==Ll&&"[object process]"===Object.prototype.toString.call(Ll))&&(iZ=function(l){return new Promise((function(Z,d){var c,b=l.data,i=l.headers,G=l.responseType;function I(){l.cancelToken&&l.cancelToken.unsubscribe(c),l.signal&&l.signal.removeEventListener("abort",c)}fl.isFormData(b)&&delete i["Content-Type"];var m=new XMLHttpRequest;if(l.auth){var X=l.auth.username||"",a=l.auth.password?unescape(encodeURIComponent(l.auth.password)):"";i.Authorization="Basic "+btoa(X+":"+a)}var V=function(l,Z){return l&&!function(l){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(l)}(Z)?function(l,Z){return Z?l.replace(/\/+$/,"")+"/"+Z.replace(/^\/+/,""):l}(l,Z):Z}(l.baseURL,l.url);function t(){if(m){var c="getAllResponseHeaders"in m?function(l){var Z,d,c,b={};return l?(Al.forEach(l.split("\n"),(function(l){if(c=l.indexOf(":"),Z=Al.trim(l.substr(0,c)).toLowerCase(),d=Al.trim(l.substr(c+1)),Z){if(b[Z]&&Ql.indexOf(Z)>=0)return;b[Z]="set-cookie"===Z?(b[Z]?b[Z]:[]).concat([d]):b[Z]?b[Z]+", "+d:d}})),b):b}(m.getAllResponseHeaders()):null;(function(l,Z,d){var c=d.config.validateStatus;d.status&&c&&!c(d.status)?Z(zl("Request failed with status code "+d.status,d.config,null,d.request,d)):l(d)})((function(l){Z(l),I()}),(function(l){d(l),I()}),{data:G&&"text"!==G&&"json"!==G?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:c,config:l,request:m}),m=null}}if(m.open(l.method.toUpperCase(),Dl(V,l.params,l.paramsSerializer),!0),m.timeout=l.timeout,"onloadend"in m?m.onloadend=t:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(t)},m.onabort=function(){m&&(d(ql("Request aborted",l,"ECONNABORTED",m)),m=null)},m.onerror=function(){d(ql("Network Error",l,null,m)),m=null},m.ontimeout=function(){var Z=l.timeout?"timeout of "+l.timeout+"ms exceeded":"timeout exceeded",c=l.transitional||_l;l.timeoutErrorMessage&&(Z=l.timeoutErrorMessage),d(ql(Z,l,c.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",m)),m=null},fl.isStandardBrowserEnv()){var W=(l.withCredentials||Ol(V))&&l.xsrfCookieName?El.read(l.xsrfCookieName):void 0;W&&(i[l.xsrfHeaderName]=W)}"setRequestHeader"in m&&fl.forEach(i,(function(l,Z){void 0===b&&"content-type"===Z.toLowerCase()?delete i[Z]:m.setRequestHeader(Z,l)})),fl.isUndefined(l.withCredentials)||(m.withCredentials=!!l.withCredentials),G&&"json"!==G&&(m.responseType=l.responseType),"function"==typeof l.onDownloadProgress&&m.addEventListener("progress",l.onDownloadProgress),"function"==typeof l.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",l.onUploadProgress),(l.cancelToken||l.signal)&&(c=function(l){m&&(d(!l||l&&l.type?new $l("canceled"):l),m.abort(),m=null)},l.cancelToken&&l.cancelToken.subscribe(c),l.signal&&(l.signal.aborted?c():l.signal.addEventListener("abort",c))),b||(b=null),m.send(b)}))}),iZ),transformRequest:[function(l,Z){return ZZ(Z,"Accept"),ZZ(Z,"Content-Type"),lZ.isFormData(l)||lZ.isArrayBuffer(l)||lZ.isBuffer(l)||lZ.isStream(l)||lZ.isFile(l)||lZ.isBlob(l)?l:lZ.isArrayBufferView(l)?l.buffer:lZ.isURLSearchParams(l)?(bZ(Z,"application/x-www-form-urlencoded;charset=utf-8"),l.toString()):lZ.isObject(l)||Z&&"application/json"===Z["Content-Type"]?(bZ(Z,"application/json"),function(l,Z,d){if(lZ.isString(l))try{return(0,JSON.parse)(l),lZ.trim(l)}catch(l){if("SyntaxError"!==l.name)throw l}return(0,JSON.stringify)(l)}(l)):l}],transformResponse:[function(l){var Z=this.transitional||GZ.transitional,d=Z&&Z.silentJSONParsing,c=Z&&Z.forcedJSONParsing,b=!d&&"json"===this.responseType;if(b||c&&lZ.isString(l)&&l.length)try{return JSON.parse(l)}catch(l){if(b){if("SyntaxError"===l.name)throw dZ(l,this,"E_JSON_PARSE");throw l}}return l}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(l){return l>=200&&l<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};lZ.forEach(["delete","get","head"],(function(l){GZ.headers[l]={}})),lZ.forEach(["post","put","patch"],(function(l){GZ.headers[l]=lZ.merge(cZ)}));var IZ=GZ,mZ=ll,XZ=IZ,aZ=function(l){return!(!l||!l.__CANCEL__)},VZ=ll,tZ=function(l,Z,d){var c=this||XZ;return mZ.forEach(d,(function(d){l=d.call(c,l,Z)})),l},WZ=aZ,oZ=IZ,uZ=wl;function nZ(l){if(l.cancelToken&&l.cancelToken.throwIfRequested(),l.signal&&l.signal.aborted)throw new uZ("canceled")}var hZ=ll,eZ=function(l,Z){Z=Z||{};var d={};function c(l,Z){return hZ.isPlainObject(l)&&hZ.isPlainObject(Z)?hZ.merge(l,Z):hZ.isPlainObject(Z)?hZ.merge({},Z):hZ.isArray(Z)?Z.slice():Z}function b(d){return hZ.isUndefined(Z[d])?hZ.isUndefined(l[d])?void 0:c(void 0,l[d]):c(l[d],Z[d])}function i(l){if(!hZ.isUndefined(Z[l]))return c(void 0,Z[l])}function G(d){return hZ.isUndefined(Z[d])?hZ.isUndefined(l[d])?void 0:c(void 0,l[d]):c(void 0,Z[d])}function I(d){return d in Z?c(l[d],Z[d]):d in l?c(void 0,l[d]):void 0}var m={url:i,method:i,data:i,baseURL:G,transformRequest:G,transformResponse:G,paramsSerializer:G,timeout:G,timeoutMessage:G,withCredentials:G,adapter:G,responseType:G,xsrfCookieName:G,xsrfHeaderName:G,onUploadProgress:G,onDownloadProgress:G,decompress:G,maxContentLength:G,maxBodyLength:G,transport:G,httpAgent:G,httpsAgent:G,cancelToken:G,socketPath:G,responseEncoding:G,validateStatus:I};return hZ.forEach(Object.keys(l).concat(Object.keys(Z)),(function(l){var Z=m[l]||b,c=Z(l);hZ.isUndefined(c)&&Z!==I||(d[l]=c)})),d},gZ={};["object","boolean","number","function","string","symbol"].forEach((function(l,Z){gZ[l]=function(d){return typeof d===l||"a"+(Z<1?"n ":" ")+l}}));var pZ={};gZ.transitional=function(l,Z,d){function c(l,Z){return"[Axios v0.26.1] Transitional option '"+l+"'"+Z+(d?". "+d:"")}return function(d,b,i){if(!1===l)throw new Error(c(b," has been removed"+(Z?" in "+Z:"")));return Z&&!pZ[b]&&(pZ[b]=!0,console.warn(c(b," has been deprecated since v"+Z+" and will be removed in the near future"))),!l||l(d,b,i)}};var sZ={assertOptions:function(l,Z,d){if("object"!=typeof l)throw new TypeError("options must be an object");for(var c=Object.keys(l),b=c.length;b-- >0;){var i=c[b],G=Z[i];if(G){var I=l[i],m=void 0===I||G(I,i,l);if(!0!==m)throw new TypeError("option "+i+" must be "+m)}else if(!0!==d)throw Error("Unknown option "+i)}},validators:gZ},yZ=ll,CZ=cl,RZ=Gl,YZ=function(l){return nZ(l),l.headers=l.headers||{},l.data=tZ.call(l,l.data,l.headers,l.transformRequest),l.headers=VZ.merge(l.headers.common||{},l.headers[l.method]||{},l.headers),VZ.forEach(["delete","get","head","post","put","patch","common"],(function(Z){delete l.headers[Z]})),(l.adapter||oZ.adapter)(l).then((function(Z){return nZ(l),Z.data=tZ.call(l,Z.data,Z.headers,l.transformResponse),Z}),(function(Z){return WZ(Z)||(nZ(l),Z&&Z.response&&(Z.response.data=tZ.call(l,Z.response.data,Z.response.headers,l.transformResponse))),Promise.reject(Z)}))},SZ=eZ,KZ=sZ,NZ=KZ.validators;function JZ(l){this.defaults=l,this.interceptors={request:new RZ,response:new RZ}}JZ.prototype.request=function(l,Z){"string"==typeof l?(Z=Z||{}).url=l:Z=l||{},(Z=SZ(this.defaults,Z)).method?Z.method=Z.method.toLowerCase():this.defaults.method?Z.method=this.defaults.method.toLowerCase():Z.method="get";var d=Z.transitional;void 0!==d&&KZ.assertOptions(d,{silentJSONParsing:NZ.transitional(NZ.boolean),forcedJSONParsing:NZ.transitional(NZ.boolean),clarifyTimeoutError:NZ.transitional(NZ.boolean)},!1);var c=[],b=!0;this.interceptors.request.forEach((function(l){"function"==typeof l.runWhen&&!1===l.runWhen(Z)||(b=b&&l.synchronous,c.unshift(l.fulfilled,l.rejected))}));var i,G=[];if(this.interceptors.response.forEach((function(l){G.push(l.fulfilled,l.rejected)})),!b){var I=[YZ,void 0];for(Array.prototype.unshift.apply(I,c),I=I.concat(G),i=Promise.resolve(Z);I.length;)i=i.then(I.shift(),I.shift());return i}for(var m=Z;c.length;){var X=c.shift(),a=c.shift();try{m=X(m)}catch(l){a(l);break}}try{i=YZ(m)}catch(l){return Promise.reject(l)}for(;G.length;)i=i.then(G.shift(),G.shift());return i},JZ.prototype.getUri=function(l){return l=SZ(this.defaults,l),CZ(l.url,l.params,l.paramsSerializer).replace(/^\?/,"")},yZ.forEach(["delete","get","head","options"],(function(l){JZ.prototype[l]=function(Z,d){return this.request(SZ(d||{},{method:l,url:Z,data:(d||{}).data}))}})),yZ.forEach(["post","put","patch"],(function(l){JZ.prototype[l]=function(Z,d,c){return this.request(SZ(c||{},{method:l,url:Z,data:d}))}}));var HZ=JZ,UZ=wl;function LZ(l){if("function"!=typeof l)throw new TypeError("executor must be a function.");var Z;this.promise=new Promise((function(l){Z=l}));var d=this;this.promise.then((function(l){if(d._listeners){var Z,c=d._listeners.length;for(Z=0;Z<c;Z++)d._listeners[Z](l);d._listeners=null}})),this.promise.then=function(l){var Z,c=new Promise((function(l){d.subscribe(l),Z=l})).then(l);return c.cancel=function(){d.unsubscribe(Z)},c},l((function(l){d.reason||(d.reason=new UZ(l),Z(d.reason))}))}LZ.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},LZ.prototype.subscribe=function(l){this.reason?l(this.reason):this._listeners?this._listeners.push(l):this._listeners=[l]},LZ.prototype.unsubscribe=function(l){if(this._listeners){var Z=this._listeners.indexOf(l);-1!==Z&&this._listeners.splice(Z,1)}},LZ.source=function(){var l;return{token:new LZ((function(Z){l=Z})),cancel:l}};var rZ=LZ,BZ=ll,FZ=ll,vZ=M,kZ=HZ,zZ=eZ,TZ=function l(Z){var d=new kZ(Z),c=vZ(kZ.prototype.request,d);return FZ.extend(c,kZ.prototype,d),FZ.extend(c,d),c.create=function(d){return l(zZ(Z,d))},c}(IZ);TZ.Axios=kZ,TZ.Cancel=wl,TZ.CancelToken=rZ,TZ.isCancel=aZ,TZ.VERSION="0.26.1",TZ.all=function(l){return Promise.all(l)},TZ.spread=function(l){return function(Z){return l.apply(null,Z)}},TZ.isAxiosError=function(l){return BZ.isObject(l)&&!0===l.isAxiosError},j.exports=TZ,j.exports.default=TZ;var xZ,AZ=j.exports;let QZ=xZ=class{constructor(){this.attachToken=()=>Promise.resolve(),this.requestStartCallback=()=>null,this.requestSuccessCallback=()=>null,this.requestErrorCallback=()=>null,this.requestFinishCallback=()=>null,this.init=this.init.bind(this),this.setHttpRequestErrorCallback=this.setHttpRequestErrorCallback.bind(this),this.setHttpRequestFinishCallback=this.setHttpRequestFinishCallback.bind(this),this.setHttpRequestStartCallback=this.setHttpRequestStartCallback.bind(this),this.setHttpRequestSuccessCallback=this.setHttpRequestSuccessCallback.bind(this)}static getInstance(){return this.axiosInstance||(this.axiosInstance=AZ.create({withCredentials:!0}),this.clientInstance||(this.clientInstance=new xZ),this.axiosInstance.interceptors.request.use((l=>c(this,void 0,void 0,(function*(){return yield this.clientInstance.requestHandler(l)})))),this.axiosInstance.interceptors.response.use((l=>this.clientInstance.successHandler(l)),(l=>this.clientInstance.errorHandler(l))),this.axiosInstance.all=AZ.all,this.axiosInstance.spread=AZ.spread,this.axiosInstance.init=this.clientInstance.init,this.axiosInstance.enableHandler=this.clientInstance.enableHandler,this.axiosInstance.disableHandler=this.clientInstance.disableHandler,this.axiosInstance.disableHandlerWithTimeout=this.clientInstance.disableHandlerWithTimeout,this.axiosInstance.setHttpRequestStartCallback=this.clientInstance.setHttpRequestStartCallback,this.axiosInstance.setHttpRequestSuccessCallback=this.clientInstance.setHttpRequestSuccessCallback,this.axiosInstance.setHttpRequestErrorCallback=this.clientInstance.setHttpRequestErrorCallback,this.axiosInstance.setHttpRequestFinishCallback=this.clientInstance.setHttpRequestFinishCallback),this.axiosInstance}requestHandler(l){return c(this,void 0,void 0,(function*(){if(yield this.attachToken(l),null==l?void 0:l.shouldEncodeToFormData){const Z=null==l?void 0:l.data,d=new FormData;Object.keys(Z).forEach((l=>{d.append(l,Z[l])})),l.data=d}return l.startTimeInMs=(new Date).getTime(),xZ.isHandlerEnabled&&this.requestStartCallback&&"function"==typeof this.requestStartCallback&&this.requestStartCallback(l),l}))}errorHandler(l){throw xZ.isHandlerEnabled&&(this.requestErrorCallback&&"function"==typeof this.requestErrorCallback&&this.requestErrorCallback(l),this.requestFinishCallback&&"function"==typeof this.requestFinishCallback&&this.requestFinishCallback()),l}successHandler(l){return xZ.isHandlerEnabled&&(this.requestSuccessCallback&&"function"==typeof this.requestSuccessCallback&&this.requestSuccessCallback(l),this.requestFinishCallback&&"function"==typeof this.requestFinishCallback&&this.requestFinishCallback()),l}init(l=!0,Z){return c(this,void 0,void 0,(function*(){xZ.isHandlerEnabled=l,this.attachToken=Z}))}enableHandler(){xZ.isHandlerEnabled=!0}disableHandler(){xZ.isHandlerEnabled=!1}disableHandlerWithTimeout(l=xZ.DEFAULT_HANDLER_DISABLE_TIMEOUT){xZ.isHandlerEnabled=!1,setTimeout((()=>{xZ.isHandlerEnabled=!0}),l)}setHttpRequestStartCallback(l){this.requestStartCallback=l}setHttpRequestSuccessCallback(l){this.requestSuccessCallback=l}setHttpRequestErrorCallback(l){this.requestErrorCallback=l}setHttpRequestFinishCallback(l){this.requestFinishCallback=l}};QZ.DEFAULT_HANDLER_DISABLE_TIMEOUT=1e3,QZ=xZ=function(l,Z,d,c){var b,i=arguments.length,G=i<3?Z:null===c?c=Object.getOwnPropertyDescriptor(Z,d):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)G=Reflect.decorate(l,Z,d,c);else for(var I=l.length-1;I>=0;I--)(b=l[I])&&(G=(i<3?b(G):i>3?b(Z,d,G):b(Z,d))||G);return i>3&&G&&Object.defineProperty(Z,d,G),G}([l=>{}],QZ);class jZ{setData(l,Z){return c(this,void 0,void 0,(function*(){localStorage.setItem(l,Z)}))}getData(l){var Z;return c(this,void 0,void 0,(function*(){return null!==(Z=localStorage.getItem(l))&&void 0!==Z?Z:"{}"}))}removeData(l){return c(this,void 0,void 0,(function*(){localStorage.removeItem(l)}))}}class MZ{constructor(){this._data=new Map}setData(l,Z){return c(this,void 0,void 0,(function*(){this._data.set(l,Z)}))}getData(l){var Z,d;return c(this,void 0,void 0,(function*(){return null!==(d=null===(Z=this._data)||void 0===Z?void 0:Z.get(l))&&void 0!==d?d:"{}"}))}removeData(l){return c(this,void 0,void 0,(function*(){this._data.delete(l)}))}}class PZ{setData(l,Z){return c(this,void 0,void 0,(function*(){sessionStorage.setItem(l,Z)}))}getData(l){var Z;return c(this,void 0,void 0,(function*(){return null!==(Z=sessionStorage.getItem(l))&&void 0!==Z?Z:"{}"}))}removeData(l){return c(this,void 0,void 0,(function*(){sessionStorage.removeItem(l)}))}}var wZ=[],fZ=[],EZ="undefined"!=typeof Uint8Array?Uint8Array:Array,DZ=!1;function OZ(){DZ=!0;for(var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Z=0,d=l.length;Z<d;++Z)wZ[Z]=l[Z],fZ[l.charCodeAt(Z)]=Z;fZ["-".charCodeAt(0)]=62,fZ["_".charCodeAt(0)]=63}function qZ(l,Z,d){for(var c,b,i=[],G=Z;G<d;G+=3)c=(l[G]<<16)+(l[G+1]<<8)+l[G+2],i.push(wZ[(b=c)>>18&63]+wZ[b>>12&63]+wZ[b>>6&63]+wZ[63&b]);return i.join("")}function _Z(l){var Z;DZ||OZ();for(var d=l.length,c=d%3,b="",i=[],G=16383,I=0,m=d-c;I<m;I+=G)i.push(qZ(l,I,I+G>m?m:I+G));return 1===c?(Z=l[d-1],b+=wZ[Z>>2],b+=wZ[Z<<4&63],b+="=="):2===c&&(Z=(l[d-2]<<8)+l[d-1],b+=wZ[Z>>10],b+=wZ[Z>>4&63],b+=wZ[Z<<2&63],b+="="),i.push(b),i.join("")}function $Z(l,Z,d,c,b){var i,G,I=8*b-c-1,m=(1<<I)-1,X=m>>1,a=-7,V=d?b-1:0,t=d?-1:1,W=l[Z+V];for(V+=t,i=W&(1<<-a)-1,W>>=-a,a+=I;a>0;i=256*i+l[Z+V],V+=t,a-=8);for(G=i&(1<<-a)-1,i>>=-a,a+=c;a>0;G=256*G+l[Z+V],V+=t,a-=8);if(0===i)i=1-X;else{if(i===m)return G?NaN:1/0*(W?-1:1);G+=Math.pow(2,c),i-=X}return(W?-1:1)*G*Math.pow(2,i-c)}function ld(l,Z,d,c,b,i){var G,I,m,X=8*i-b-1,a=(1<<X)-1,V=a>>1,t=23===b?Math.pow(2,-24)-Math.pow(2,-77):0,W=c?0:i-1,o=c?1:-1,u=Z<0||0===Z&&1/Z<0?1:0;for(Z=Math.abs(Z),isNaN(Z)||Z===1/0?(I=isNaN(Z)?1:0,G=a):(G=Math.floor(Math.log(Z)/Math.LN2),Z*(m=Math.pow(2,-G))<1&&(G--,m*=2),(Z+=G+V>=1?t/m:t*Math.pow(2,1-V))*m>=2&&(G++,m/=2),G+V>=a?(I=0,G=a):G+V>=1?(I=(Z*m-1)*Math.pow(2,b),G+=V):(I=Z*Math.pow(2,V-1)*Math.pow(2,b),G=0));b>=8;l[d+W]=255&I,W+=o,I/=256,b-=8);for(G=G<<b|I,X+=b;X>0;l[d+W]=255&G,W+=o,G/=256,X-=8);l[d+W-o]|=128*u}var Zd={}.toString,dd=Array.isArray||function(l){return"[object Array]"==Zd.call(l)};Gd.TYPED_ARRAY_SUPPORT=void 0===Il.TYPED_ARRAY_SUPPORT||Il.TYPED_ARRAY_SUPPORT;var cd=bd();function bd(){return Gd.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function id(l,Z){if(bd()<Z)throw new RangeError("Invalid typed array length");return Gd.TYPED_ARRAY_SUPPORT?(l=new Uint8Array(Z)).__proto__=Gd.prototype:(null===l&&(l=new Gd(Z)),l.length=Z),l}function Gd(l,Z,d){if(!(Gd.TYPED_ARRAY_SUPPORT||this instanceof Gd))return new Gd(l,Z,d);if("number"==typeof l){if("string"==typeof Z)throw new Error("If encoding is specified then the first argument must be a string");return Xd(this,l)}return Id(this,l,Z,d)}function Id(l,Z,d,c){if("number"==typeof Z)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&Z instanceof ArrayBuffer?function(l,Z,d,c){if(Z.byteLength,d<0||Z.byteLength<d)throw new RangeError("'offset' is out of bounds");if(Z.byteLength<d+(c||0))throw new RangeError("'length' is out of bounds");return Z=void 0===d&&void 0===c?new Uint8Array(Z):void 0===c?new Uint8Array(Z,d):new Uint8Array(Z,d,c),Gd.TYPED_ARRAY_SUPPORT?(l=Z).__proto__=Gd.prototype:l=ad(l,Z),l}(l,Z,d,c):"string"==typeof Z?function(l,Z,d){if("string"==typeof d&&""!==d||(d="utf8"),!Gd.isEncoding(d))throw new TypeError('"encoding" must be a valid string encoding');var c=0|Wd(Z,d),b=(l=id(l,c)).write(Z,d);return b!==c&&(l=l.slice(0,b)),l}(l,Z,d):function(l,Z){if(td(Z)){var d=0|Vd(Z.length);return 0===(l=id(l,d)).length||Z.copy(l,0,0,d),l}if(Z){if("undefined"!=typeof ArrayBuffer&&Z.buffer instanceof ArrayBuffer||"length"in Z)return"number"!=typeof Z.length||(c=Z.length)!=c?id(l,0):ad(l,Z);if("Buffer"===Z.type&&dd(Z.data))return ad(l,Z.data)}var c;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(l,Z)}function md(l){if("number"!=typeof l)throw new TypeError('"size" argument must be a number');if(l<0)throw new RangeError('"size" argument must not be negative')}function Xd(l,Z){if(md(Z),l=id(l,Z<0?0:0|Vd(Z)),!Gd.TYPED_ARRAY_SUPPORT)for(var d=0;d<Z;++d)l[d]=0;return l}function ad(l,Z){var d=Z.length<0?0:0|Vd(Z.length);l=id(l,d);for(var c=0;c<d;c+=1)l[c]=255&Z[c];return l}function Vd(l){if(l>=bd())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+bd().toString(16)+" bytes");return 0|l}function td(l){return!(null==l||!l._isBuffer)}function Wd(l,Z){if(td(l))return l.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(l)||l instanceof ArrayBuffer))return l.byteLength;"string"!=typeof l&&(l=""+l);var d=l.length;if(0===d)return 0;for(var c=!1;;)switch(Z){case"ascii":case"latin1":case"binary":return d;case"utf8":case"utf-8":case void 0:return Td(l).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*d;case"hex":return d>>>1;case"base64":return xd(l).length;default:if(c)return Td(l).length;Z=(""+Z).toLowerCase(),c=!0}}function od(l,Z,d){var c=!1;if((void 0===Z||Z<0)&&(Z=0),Z>this.length)return"";if((void 0===d||d>this.length)&&(d=this.length),d<=0)return"";if((d>>>=0)<=(Z>>>=0))return"";for(l||(l="utf8");;)switch(l){case"hex":return Nd(this,Z,d);case"utf8":case"utf-8":return Yd(this,Z,d);case"ascii":return Sd(this,Z,d);case"latin1":case"binary":return Kd(this,Z,d);case"base64":return Rd(this,Z,d);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Jd(this,Z,d);default:if(c)throw new TypeError("Unknown encoding: "+l);l=(l+"").toLowerCase(),c=!0}}function ud(l,Z,d){var c=l[Z];l[Z]=l[d],l[d]=c}function nd(l,Z,d,c,b){if(0===l.length)return-1;if("string"==typeof d?(c=d,d=0):d>2147483647?d=2147483647:d<-2147483648&&(d=-2147483648),d=+d,isNaN(d)&&(d=b?0:l.length-1),d<0&&(d=l.length+d),d>=l.length){if(b)return-1;d=l.length-1}else if(d<0){if(!b)return-1;d=0}if("string"==typeof Z&&(Z=Gd.from(Z,c)),td(Z))return 0===Z.length?-1:hd(l,Z,d,c,b);if("number"==typeof Z)return Z&=255,Gd.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?b?Uint8Array.prototype.indexOf.call(l,Z,d):Uint8Array.prototype.lastIndexOf.call(l,Z,d):hd(l,[Z],d,c,b);throw new TypeError("val must be string, number or Buffer")}function hd(l,Z,d,c,b){var i,G=1,I=l.length,m=Z.length;if(void 0!==c&&("ucs2"===(c=String(c).toLowerCase())||"ucs-2"===c||"utf16le"===c||"utf-16le"===c)){if(l.length<2||Z.length<2)return-1;G=2,I/=2,m/=2,d/=2}function X(l,Z){return 1===G?l[Z]:l.readUInt16BE(Z*G)}if(b){var a=-1;for(i=d;i<I;i++)if(X(l,i)===X(Z,-1===a?0:i-a)){if(-1===a&&(a=i),i-a+1===m)return a*G}else-1!==a&&(i-=i-a),a=-1}else for(d+m>I&&(d=I-m),i=d;i>=0;i--){for(var V=!0,t=0;t<m;t++)if(X(l,i+t)!==X(Z,t)){V=!1;break}if(V)return i}return-1}function ed(l,Z,d,c){d=Number(d)||0;var b=l.length-d;c?(c=Number(c))>b&&(c=b):c=b;var i=Z.length;if(i%2!=0)throw new TypeError("Invalid hex string");c>i/2&&(c=i/2);for(var G=0;G<c;++G){var I=parseInt(Z.substr(2*G,2),16);if(isNaN(I))return G;l[d+G]=I}return G}function gd(l,Z,d,c){return Ad(Td(Z,l.length-d),l,d,c)}function pd(l,Z,d,c){return Ad(function(l){for(var Z=[],d=0;d<l.length;++d)Z.push(255&l.charCodeAt(d));return Z}(Z),l,d,c)}function sd(l,Z,d,c){return pd(l,Z,d,c)}function yd(l,Z,d,c){return Ad(xd(Z),l,d,c)}function Cd(l,Z,d,c){return Ad(function(l,Z){for(var d,c,b,i=[],G=0;G<l.length&&!((Z-=2)<0);++G)c=(d=l.charCodeAt(G))>>8,b=d%256,i.push(b),i.push(c);return i}(Z,l.length-d),l,d,c)}function Rd(l,Z,d){return 0===Z&&d===l.length?_Z(l):_Z(l.slice(Z,d))}function Yd(l,Z,d){d=Math.min(l.length,d);for(var c=[],b=Z;b<d;){var i,G,I,m,X=l[b],a=null,V=X>239?4:X>223?3:X>191?2:1;if(b+V<=d)switch(V){case 1:X<128&&(a=X);break;case 2:128==(192&(i=l[b+1]))&&(m=(31&X)<<6|63&i)>127&&(a=m);break;case 3:i=l[b+1],G=l[b+2],128==(192&i)&&128==(192&G)&&(m=(15&X)<<12|(63&i)<<6|63&G)>2047&&(m<55296||m>57343)&&(a=m);break;case 4:i=l[b+1],G=l[b+2],I=l[b+3],128==(192&i)&&128==(192&G)&&128==(192&I)&&(m=(15&X)<<18|(63&i)<<12|(63&G)<<6|63&I)>65535&&m<1114112&&(a=m)}null===a?(a=65533,V=1):a>65535&&(a-=65536,c.push(a>>>10&1023|55296),a=56320|1023&a),c.push(a),b+=V}return function(l){var Z=l.length;if(Z<=4096)return String.fromCharCode.apply(String,l);for(var d="",c=0;c<Z;)d+=String.fromCharCode.apply(String,l.slice(c,c+=4096));return d}(c)}function Sd(l,Z,d){var c="";d=Math.min(l.length,d);for(var b=Z;b<d;++b)c+=String.fromCharCode(127&l[b]);return c}function Kd(l,Z,d){var c="";d=Math.min(l.length,d);for(var b=Z;b<d;++b)c+=String.fromCharCode(l[b]);return c}function Nd(l,Z,d){var c=l.length;(!Z||Z<0)&&(Z=0),(!d||d<0||d>c)&&(d=c);for(var b="",i=Z;i<d;++i)b+=zd(l[i]);return b}function Jd(l,Z,d){for(var c=l.slice(Z,d),b="",i=0;i<c.length;i+=2)b+=String.fromCharCode(c[i]+256*c[i+1]);return b}function Hd(l,Z,d){if(l%1!=0||l<0)throw new RangeError("offset is not uint");if(l+Z>d)throw new RangeError("Trying to access beyond buffer length")}function Ud(l,Z,d,c,b,i){if(!td(l))throw new TypeError('"buffer" argument must be a Buffer instance');if(Z>b||Z<i)throw new RangeError('"value" argument is out of bounds');if(d+c>l.length)throw new RangeError("Index out of range")}function Ld(l,Z,d,c){Z<0&&(Z=65535+Z+1);for(var b=0,i=Math.min(l.length-d,2);b<i;++b)l[d+b]=(Z&255<<8*(c?b:1-b))>>>8*(c?b:1-b)}function rd(l,Z,d,c){Z<0&&(Z=4294967295+Z+1);for(var b=0,i=Math.min(l.length-d,4);b<i;++b)l[d+b]=Z>>>8*(c?b:3-b)&255}function Bd(l,Z,d,c,b,i){if(d+c>l.length)throw new RangeError("Index out of range");if(d<0)throw new RangeError("Index out of range")}function Fd(l,Z,d,c,b){return b||Bd(l,0,d,4),ld(l,Z,d,c,23,4),d+4}function vd(l,Z,d,c,b){return b||Bd(l,0,d,8),ld(l,Z,d,c,52,8),d+8}Gd.poolSize=8192,Gd._augment=function(l){return l.__proto__=Gd.prototype,l},Gd.from=function(l,Z,d){return Id(null,l,Z,d)},Gd.TYPED_ARRAY_SUPPORT&&(Gd.prototype.__proto__=Uint8Array.prototype,Gd.__proto__=Uint8Array),Gd.alloc=function(l,Z,d){return function(l,Z,d,c){return md(Z),Z<=0?id(l,Z):void 0!==d?"string"==typeof c?id(l,Z).fill(d,c):id(l,Z).fill(d):id(l,Z)}(null,l,Z,d)},Gd.allocUnsafe=function(l){return Xd(null,l)},Gd.allocUnsafeSlow=function(l){return Xd(null,l)},Gd.isBuffer=Qd,Gd.compare=function(l,Z){if(!td(l)||!td(Z))throw new TypeError("Arguments must be Buffers");if(l===Z)return 0;for(var d=l.length,c=Z.length,b=0,i=Math.min(d,c);b<i;++b)if(l[b]!==Z[b]){d=l[b],c=Z[b];break}return d<c?-1:c<d?1:0},Gd.isEncoding=function(l){switch(String(l).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Gd.concat=function(l,Z){if(!dd(l))throw new TypeError('"list" argument must be an Array of Buffers');if(0===l.length)return Gd.alloc(0);var d;if(void 0===Z)for(Z=0,d=0;d<l.length;++d)Z+=l[d].length;var c=Gd.allocUnsafe(Z),b=0;for(d=0;d<l.length;++d){var i=l[d];if(!td(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(c,b),b+=i.length}return c},Gd.byteLength=Wd,Gd.prototype._isBuffer=!0,Gd.prototype.swap16=function(){var l=this.length;if(l%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var Z=0;Z<l;Z+=2)ud(this,Z,Z+1);return this},Gd.prototype.swap32=function(){var l=this.length;if(l%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var Z=0;Z<l;Z+=4)ud(this,Z,Z+3),ud(this,Z+1,Z+2);return this},Gd.prototype.swap64=function(){var l=this.length;if(l%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var Z=0;Z<l;Z+=8)ud(this,Z,Z+7),ud(this,Z+1,Z+6),ud(this,Z+2,Z+5),ud(this,Z+3,Z+4);return this},Gd.prototype.toString=function(){var l=0|this.length;return 0===l?"":0===arguments.length?Yd(this,0,l):od.apply(this,arguments)},Gd.prototype.equals=function(l){if(!td(l))throw new TypeError("Argument must be a Buffer");return this===l||0===Gd.compare(this,l)},Gd.prototype.inspect=function(){var l="";return this.length>0&&(l=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(l+=" ... ")),"<Buffer "+l+">"},Gd.prototype.compare=function(l,Z,d,c,b){if(!td(l))throw new TypeError("Argument must be a Buffer");if(void 0===Z&&(Z=0),void 0===d&&(d=l?l.length:0),void 0===c&&(c=0),void 0===b&&(b=this.length),Z<0||d>l.length||c<0||b>this.length)throw new RangeError("out of range index");if(c>=b&&Z>=d)return 0;if(c>=b)return-1;if(Z>=d)return 1;if(this===l)return 0;for(var i=(b>>>=0)-(c>>>=0),G=(d>>>=0)-(Z>>>=0),I=Math.min(i,G),m=this.slice(c,b),X=l.slice(Z,d),a=0;a<I;++a)if(m[a]!==X[a]){i=m[a],G=X[a];break}return i<G?-1:G<i?1:0},Gd.prototype.includes=function(l,Z,d){return-1!==this.indexOf(l,Z,d)},Gd.prototype.indexOf=function(l,Z,d){return nd(this,l,Z,d,!0)},Gd.prototype.lastIndexOf=function(l,Z,d){return nd(this,l,Z,d,!1)},Gd.prototype.write=function(l,Z,d,c){if(void 0===Z)c="utf8",d=this.length,Z=0;else if(void 0===d&&"string"==typeof Z)c=Z,d=this.length,Z=0;else{if(!isFinite(Z))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");Z|=0,isFinite(d)?(d|=0,void 0===c&&(c="utf8")):(c=d,d=void 0)}var b=this.length-Z;if((void 0===d||d>b)&&(d=b),l.length>0&&(d<0||Z<0)||Z>this.length)throw new RangeError("Attempt to write outside buffer bounds");c||(c="utf8");for(var i=!1;;)switch(c){case"hex":return ed(this,l,Z,d);case"utf8":case"utf-8":return gd(this,l,Z,d);case"ascii":return pd(this,l,Z,d);case"latin1":case"binary":return sd(this,l,Z,d);case"base64":return yd(this,l,Z,d);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Cd(this,l,Z,d);default:if(i)throw new TypeError("Unknown encoding: "+c);c=(""+c).toLowerCase(),i=!0}},Gd.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},Gd.prototype.slice=function(l,Z){var d,c=this.length;if((l=~~l)<0?(l+=c)<0&&(l=0):l>c&&(l=c),(Z=void 0===Z?c:~~Z)<0?(Z+=c)<0&&(Z=0):Z>c&&(Z=c),Z<l&&(Z=l),Gd.TYPED_ARRAY_SUPPORT)(d=this.subarray(l,Z)).__proto__=Gd.prototype;else{var b=Z-l;d=new Gd(b,void 0);for(var i=0;i<b;++i)d[i]=this[i+l]}return d},Gd.prototype.readUIntLE=function(l,Z,d){l|=0,Z|=0,d||Hd(l,Z,this.length);for(var c=this[l],b=1,i=0;++i<Z&&(b*=256);)c+=this[l+i]*b;return c},Gd.prototype.readUIntBE=function(l,Z,d){l|=0,Z|=0,d||Hd(l,Z,this.length);for(var c=this[l+--Z],b=1;Z>0&&(b*=256);)c+=this[l+--Z]*b;return c},Gd.prototype.readUInt8=function(l,Z){return Z||Hd(l,1,this.length),this[l]},Gd.prototype.readUInt16LE=function(l,Z){return Z||Hd(l,2,this.length),this[l]|this[l+1]<<8},Gd.prototype.readUInt16BE=function(l,Z){return Z||Hd(l,2,this.length),this[l]<<8|this[l+1]},Gd.prototype.readUInt32LE=function(l,Z){return Z||Hd(l,4,this.length),(this[l]|this[l+1]<<8|this[l+2]<<16)+16777216*this[l+3]},Gd.prototype.readUInt32BE=function(l,Z){return Z||Hd(l,4,this.length),16777216*this[l]+(this[l+1]<<16|this[l+2]<<8|this[l+3])},Gd.prototype.readIntLE=function(l,Z,d){l|=0,Z|=0,d||Hd(l,Z,this.length);for(var c=this[l],b=1,i=0;++i<Z&&(b*=256);)c+=this[l+i]*b;return c>=(b*=128)&&(c-=Math.pow(2,8*Z)),c},Gd.prototype.readIntBE=function(l,Z,d){l|=0,Z|=0,d||Hd(l,Z,this.length);for(var c=Z,b=1,i=this[l+--c];c>0&&(b*=256);)i+=this[l+--c]*b;return i>=(b*=128)&&(i-=Math.pow(2,8*Z)),i},Gd.prototype.readInt8=function(l,Z){return Z||Hd(l,1,this.length),128&this[l]?-1*(255-this[l]+1):this[l]},Gd.prototype.readInt16LE=function(l,Z){Z||Hd(l,2,this.length);var d=this[l]|this[l+1]<<8;return 32768&d?4294901760|d:d},Gd.prototype.readInt16BE=function(l,Z){Z||Hd(l,2,this.length);var d=this[l+1]|this[l]<<8;return 32768&d?4294901760|d:d},Gd.prototype.readInt32LE=function(l,Z){return Z||Hd(l,4,this.length),this[l]|this[l+1]<<8|this[l+2]<<16|this[l+3]<<24},Gd.prototype.readInt32BE=function(l,Z){return Z||Hd(l,4,this.length),this[l]<<24|this[l+1]<<16|this[l+2]<<8|this[l+3]},Gd.prototype.readFloatLE=function(l,Z){return Z||Hd(l,4,this.length),$Z(this,l,!0,23,4)},Gd.prototype.readFloatBE=function(l,Z){return Z||Hd(l,4,this.length),$Z(this,l,!1,23,4)},Gd.prototype.readDoubleLE=function(l,Z){return Z||Hd(l,8,this.length),$Z(this,l,!0,52,8)},Gd.prototype.readDoubleBE=function(l,Z){return Z||Hd(l,8,this.length),$Z(this,l,!1,52,8)},Gd.prototype.writeUIntLE=function(l,Z,d,c){l=+l,Z|=0,d|=0,c||Ud(this,l,Z,d,Math.pow(2,8*d)-1,0);var b=1,i=0;for(this[Z]=255&l;++i<d&&(b*=256);)this[Z+i]=l/b&255;return Z+d},Gd.prototype.writeUIntBE=function(l,Z,d,c){l=+l,Z|=0,d|=0,c||Ud(this,l,Z,d,Math.pow(2,8*d)-1,0);var b=d-1,i=1;for(this[Z+b]=255&l;--b>=0&&(i*=256);)this[Z+b]=l/i&255;return Z+d},Gd.prototype.writeUInt8=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,1,255,0),Gd.TYPED_ARRAY_SUPPORT||(l=Math.floor(l)),this[Z]=255&l,Z+1},Gd.prototype.writeUInt16LE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,2,65535,0),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=255&l,this[Z+1]=l>>>8):Ld(this,l,Z,!0),Z+2},Gd.prototype.writeUInt16BE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,2,65535,0),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=l>>>8,this[Z+1]=255&l):Ld(this,l,Z,!1),Z+2},Gd.prototype.writeUInt32LE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,4,4294967295,0),Gd.TYPED_ARRAY_SUPPORT?(this[Z+3]=l>>>24,this[Z+2]=l>>>16,this[Z+1]=l>>>8,this[Z]=255&l):rd(this,l,Z,!0),Z+4},Gd.prototype.writeUInt32BE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,4,4294967295,0),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=l>>>24,this[Z+1]=l>>>16,this[Z+2]=l>>>8,this[Z+3]=255&l):rd(this,l,Z,!1),Z+4},Gd.prototype.writeIntLE=function(l,Z,d,c){if(l=+l,Z|=0,!c){var b=Math.pow(2,8*d-1);Ud(this,l,Z,d,b-1,-b)}var i=0,G=1,I=0;for(this[Z]=255&l;++i<d&&(G*=256);)l<0&&0===I&&0!==this[Z+i-1]&&(I=1),this[Z+i]=(l/G>>0)-I&255;return Z+d},Gd.prototype.writeIntBE=function(l,Z,d,c){if(l=+l,Z|=0,!c){var b=Math.pow(2,8*d-1);Ud(this,l,Z,d,b-1,-b)}var i=d-1,G=1,I=0;for(this[Z+i]=255&l;--i>=0&&(G*=256);)l<0&&0===I&&0!==this[Z+i+1]&&(I=1),this[Z+i]=(l/G>>0)-I&255;return Z+d},Gd.prototype.writeInt8=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,1,127,-128),Gd.TYPED_ARRAY_SUPPORT||(l=Math.floor(l)),l<0&&(l=255+l+1),this[Z]=255&l,Z+1},Gd.prototype.writeInt16LE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,2,32767,-32768),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=255&l,this[Z+1]=l>>>8):Ld(this,l,Z,!0),Z+2},Gd.prototype.writeInt16BE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,2,32767,-32768),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=l>>>8,this[Z+1]=255&l):Ld(this,l,Z,!1),Z+2},Gd.prototype.writeInt32LE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,4,2147483647,-2147483648),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=255&l,this[Z+1]=l>>>8,this[Z+2]=l>>>16,this[Z+3]=l>>>24):rd(this,l,Z,!0),Z+4},Gd.prototype.writeInt32BE=function(l,Z,d){return l=+l,Z|=0,d||Ud(this,l,Z,4,2147483647,-2147483648),l<0&&(l=4294967295+l+1),Gd.TYPED_ARRAY_SUPPORT?(this[Z]=l>>>24,this[Z+1]=l>>>16,this[Z+2]=l>>>8,this[Z+3]=255&l):rd(this,l,Z,!1),Z+4},Gd.prototype.writeFloatLE=function(l,Z,d){return Fd(this,l,Z,!0,d)},Gd.prototype.writeFloatBE=function(l,Z,d){return Fd(this,l,Z,!1,d)},Gd.prototype.writeDoubleLE=function(l,Z,d){return vd(this,l,Z,!0,d)},Gd.prototype.writeDoubleBE=function(l,Z,d){return vd(this,l,Z,!1,d)},Gd.prototype.copy=function(l,Z,d,c){if(d||(d=0),c||0===c||(c=this.length),Z>=l.length&&(Z=l.length),Z||(Z=0),c>0&&c<d&&(c=d),c===d)return 0;if(0===l.length||0===this.length)return 0;if(Z<0)throw new RangeError("targetStart out of bounds");if(d<0||d>=this.length)throw new RangeError("sourceStart out of bounds");if(c<0)throw new RangeError("sourceEnd out of bounds");c>this.length&&(c=this.length),l.length-Z<c-d&&(c=l.length-Z+d);var b,i=c-d;if(this===l&&d<Z&&Z<c)for(b=i-1;b>=0;--b)l[b+Z]=this[b+d];else if(i<1e3||!Gd.TYPED_ARRAY_SUPPORT)for(b=0;b<i;++b)l[b+Z]=this[b+d];else Uint8Array.prototype.set.call(l,this.subarray(d,d+i),Z);return i},Gd.prototype.fill=function(l,Z,d,c){if("string"==typeof l){if("string"==typeof Z?(c=Z,Z=0,d=this.length):"string"==typeof d&&(c=d,d=this.length),1===l.length){var b=l.charCodeAt(0);b<256&&(l=b)}if(void 0!==c&&"string"!=typeof c)throw new TypeError("encoding must be a string");if("string"==typeof c&&!Gd.isEncoding(c))throw new TypeError("Unknown encoding: "+c)}else"number"==typeof l&&(l&=255);if(Z<0||this.length<Z||this.length<d)throw new RangeError("Out of range index");if(d<=Z)return this;var i;if(Z>>>=0,d=void 0===d?this.length:d>>>0,l||(l=0),"number"==typeof l)for(i=Z;i<d;++i)this[i]=l;else{var G=td(l)?l:Td(new Gd(l,c).toString()),I=G.length;for(i=0;i<d-Z;++i)this[i+Z]=G[i%I]}return this};var kd=/[^+\/0-9A-Za-z-_]/g;function zd(l){return l<16?"0"+l.toString(16):l.toString(16)}function Td(l,Z){var d;Z=Z||1/0;for(var c=l.length,b=null,i=[],G=0;G<c;++G){if((d=l.charCodeAt(G))>55295&&d<57344){if(!b){if(d>56319){(Z-=3)>-1&&i.push(239,191,189);continue}if(G+1===c){(Z-=3)>-1&&i.push(239,191,189);continue}b=d;continue}if(d<56320){(Z-=3)>-1&&i.push(239,191,189),b=d;continue}d=65536+(b-55296<<10|d-56320)}else b&&(Z-=3)>-1&&i.push(239,191,189);if(b=null,d<128){if((Z-=1)<0)break;i.push(d)}else if(d<2048){if((Z-=2)<0)break;i.push(d>>6|192,63&d|128)}else if(d<65536){if((Z-=3)<0)break;i.push(d>>12|224,d>>6&63|128,63&d|128)}else{if(!(d<1114112))throw new Error("Invalid code point");if((Z-=4)<0)break;i.push(d>>18|240,d>>12&63|128,d>>6&63|128,63&d|128)}}return i}function xd(l){return function(l){var Z,d,c,b,i,G;DZ||OZ();var I=l.length;if(I%4>0)throw new Error("Invalid string. Length must be a multiple of 4");i="="===l[I-2]?2:"="===l[I-1]?1:0,G=new EZ(3*I/4-i),c=i>0?I-4:I;var m=0;for(Z=0,d=0;Z<c;Z+=4,d+=3)b=fZ[l.charCodeAt(Z)]<<18|fZ[l.charCodeAt(Z+1)]<<12|fZ[l.charCodeAt(Z+2)]<<6|fZ[l.charCodeAt(Z+3)],G[m++]=b>>16&255,G[m++]=b>>8&255,G[m++]=255&b;return 2===i?(b=fZ[l.charCodeAt(Z)]<<2|fZ[l.charCodeAt(Z+1)]>>4,G[m++]=255&b):1===i&&(b=fZ[l.charCodeAt(Z)]<<10|fZ[l.charCodeAt(Z+1)]<<4|fZ[l.charCodeAt(Z+2)]>>2,G[m++]=b>>8&255,G[m++]=255&b),G}(function(l){if((l=function(l){return l.trim?l.trim():l.replace(/^\s+|\s+$/g,"")}(l).replace(kd,"")).length<2)return"";for(;l.length%4!=0;)l+="=";return l}(l))}function Ad(l,Z,d,c){for(var b=0;b<c&&!(b+d>=Z.length||b>=l.length);++b)Z[b+d]=l[b];return b}function Qd(l){return null!=l&&(!!l._isBuffer||jd(l)||function(l){return"function"==typeof l.readFloatLE&&"function"==typeof l.slice&&jd(l.slice(0,0))}(l))}function jd(l){return!!l.constructor&&"function"==typeof l.constructor.isBuffer&&l.constructor.isBuffer(l)}var Md=Object.freeze({__proto__:null,Buffer:Gd,INSPECT_MAX_BYTES:50,SlowBuffer:function(l){return+l!=l&&(l=0),Gd.alloc(+l)},isBuffer:Qd,kMaxLength:cd}),Pd={exports:{}},wd={},fd={};Object.defineProperty(fd,"__esModule",{value:!0}),fd.default=function(l){var Z=l.length,d=Z%4;if(!d)return l;var c=Z,b=4-d,i=Z+b,G=Gd.alloc(i);for(G.write(l);b--;)G.write("=",c++);return G.toString()},Object.defineProperty(wd,"__esModule",{value:!0});var Ed=fd;function Dd(l,Z){return void 0===Z&&(Z="utf8"),Gd.isBuffer(l)?qd(l.toString("base64")):qd(Gd.from(l,Z).toString("base64"))}function Od(l){return l=l.toString(),Ed.default(l).replace(/\-/g,"+").replace(/_/g,"/")}function qd(l){return l.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}var _d,$d=Dd;$d.encode=Dd,$d.decode=function(l,Z){return void 0===Z&&(Z="utf8"),Gd.from(Od(l),"base64").toString(Z)},$d.toBase64=Od,$d.fromBase64=qd,$d.toBuffer=function(l){return Gd.from(Od(l),"base64")},wd.default=$d,(_d=Pd).exports=wd.default,_d.exports.default=_d.exports;var lc=Pd.exports,Zc={exports:{}};!function(l){!function(Z,d){var c={};!function(l){l.__esModule=!0,l.digestLength=32,l.blockSize=64;var Z=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function d(l,d,c,b,i){for(var G,I,m,X,a,V,t,W,o,u,n,h,e;i>=64;){for(G=d[0],I=d[1],m=d[2],X=d[3],a=d[4],V=d[5],t=d[6],W=d[7],u=0;u<16;u++)n=b+4*u,l[u]=(255&c[n])<<24|(255&c[n+1])<<16|(255&c[n+2])<<8|255&c[n+3];for(u=16;u<64;u++)h=((o=l[u-2])>>>17|o<<15)^(o>>>19|o<<13)^o>>>10,e=((o=l[u-15])>>>7|o<<25)^(o>>>18|o<<14)^o>>>3,l[u]=(h+l[u-7]|0)+(e+l[u-16]|0);for(u=0;u<64;u++)h=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&V^~a&t)|0)+(W+(Z[u]+l[u]|0)|0)|0,e=((G>>>2|G<<30)^(G>>>13|G<<19)^(G>>>22|G<<10))+(G&I^G&m^I&m)|0,W=t,t=V,V=a,a=X+h|0,X=m,m=I,I=G,G=h+e|0;d[0]+=G,d[1]+=I,d[2]+=m,d[3]+=X,d[4]+=a,d[5]+=V,d[6]+=t,d[7]+=W,b+=64,i-=64}return b}var c=function(){function Z(){this.digestLength=l.digestLength,this.blockSize=l.blockSize,this.state=new Int32Array(8),this.temp=new Int32Array(64),this.buffer=new Uint8Array(128),this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this.reset()}return Z.prototype.reset=function(){return this.state[0]=1779033703,this.state[1]=3144134277,this.state[2]=1013904242,this.state[3]=2773480762,this.state[4]=1359893119,this.state[5]=2600822924,this.state[6]=528734635,this.state[7]=1541459225,this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this},Z.prototype.clean=function(){for(var l=0;l<this.buffer.length;l++)this.buffer[l]=0;for(l=0;l<this.temp.length;l++)this.temp[l]=0;this.reset()},Z.prototype.update=function(l,Z){if(void 0===Z&&(Z=l.length),this.finished)throw new Error("SHA256: can't update because hash was finished.");var c=0;if(this.bytesHashed+=Z,this.bufferLength>0){for(;this.bufferLength<64&&Z>0;)this.buffer[this.bufferLength++]=l[c++],Z--;64===this.bufferLength&&(d(this.temp,this.state,this.buffer,0,64),this.bufferLength=0)}for(Z>=64&&(c=d(this.temp,this.state,l,c,Z),Z%=64);Z>0;)this.buffer[this.bufferLength++]=l[c++],Z--;return this},Z.prototype.finish=function(l){if(!this.finished){var Z=this.bytesHashed,c=this.bufferLength,b=Z/536870912|0,i=Z<<3,G=Z%64<56?64:128;this.buffer[c]=128;for(var I=c+1;I<G-8;I++)this.buffer[I]=0;this.buffer[G-8]=b>>>24&255,this.buffer[G-7]=b>>>16&255,this.buffer[G-6]=b>>>8&255,this.buffer[G-5]=b>>>0&255,this.buffer[G-4]=i>>>24&255,this.buffer[G-3]=i>>>16&255,this.buffer[G-2]=i>>>8&255,this.buffer[G-1]=i>>>0&255,d(this.temp,this.state,this.buffer,0,G),this.finished=!0}for(I=0;I<8;I++)l[4*I+0]=this.state[I]>>>24&255,l[4*I+1]=this.state[I]>>>16&255,l[4*I+2]=this.state[I]>>>8&255,l[4*I+3]=this.state[I]>>>0&255;return this},Z.prototype.digest=function(){var l=new Uint8Array(this.digestLength);return this.finish(l),l},Z.prototype._saveState=function(l){for(var Z=0;Z<this.state.length;Z++)l[Z]=this.state[Z]},Z.prototype._restoreState=function(l,Z){for(var d=0;d<this.state.length;d++)this.state[d]=l[d];this.bytesHashed=Z,this.finished=!1,this.bufferLength=0},Z}();l.Hash=c;var b=function(){function l(l){this.inner=new c,this.outer=new c,this.blockSize=this.inner.blockSize,this.digestLength=this.inner.digestLength;var Z=new Uint8Array(this.blockSize);if(l.length>this.blockSize)(new c).update(l).finish(Z).clean();else for(var d=0;d<l.length;d++)Z[d]=l[d];for(d=0;d<Z.length;d++)Z[d]^=54;for(this.inner.update(Z),d=0;d<Z.length;d++)Z[d]^=106;for(this.outer.update(Z),this.istate=new Uint32Array(8),this.ostate=new Uint32Array(8),this.inner._saveState(this.istate),this.outer._saveState(this.ostate),d=0;d<Z.length;d++)Z[d]=0}return l.prototype.reset=function(){return this.inner._restoreState(this.istate,this.inner.blockSize),this.outer._restoreState(this.ostate,this.outer.blockSize),this},l.prototype.clean=function(){for(var l=0;l<this.istate.length;l++)this.ostate[l]=this.istate[l]=0;this.inner.clean(),this.outer.clean()},l.prototype.update=function(l){return this.inner.update(l),this},l.prototype.finish=function(l){return this.outer.finished?this.outer.finish(l):(this.inner.finish(l),this.outer.update(l,this.digestLength).finish(l)),this},l.prototype.digest=function(){var l=new Uint8Array(this.digestLength);return this.finish(l),l},l}();function i(l){var Z=(new c).update(l),d=Z.digest();return Z.clean(),d}function G(l,Z){var d=new b(l).update(Z),c=d.digest();return d.clean(),c}function I(l,Z,d,c){var b=c[0];if(0===b)throw new Error("hkdf: cannot expand more");Z.reset(),b>1&&Z.update(l),d&&Z.update(d),Z.update(c),Z.finish(l),c[0]++}l.HMAC=b,l.hash=i,l.default=i,l.hmac=G;var m=new Uint8Array(l.digestLength);l.hkdf=function(l,Z,d,c){void 0===Z&&(Z=m),void 0===c&&(c=32);for(var i=new Uint8Array([1]),X=G(Z,l),a=new b(X),V=new Uint8Array(a.digestLength),t=V.length,W=new Uint8Array(c),o=0;o<c;o++)t===V.length&&(I(V,a,d,i),t=0),W[o]=V[t++];return a.clean(),V.fill(0),i.fill(0),W},l.pbkdf2=function(l,Z,d,c){for(var i=new b(l),G=i.digestLength,I=new Uint8Array(4),m=new Uint8Array(G),X=new Uint8Array(G),a=new Uint8Array(c),V=0;V*G<c;V++){var t=V+1;I[0]=t>>>24&255,I[1]=t>>>16&255,I[2]=t>>>8&255,I[3]=t>>>0&255,i.reset(),i.update(Z),i.update(I),i.finish(X);for(var W=0;W<G;W++)m[W]=X[W];for(W=2;W<=d;W++){i.reset(),i.update(X).finish(X);for(var o=0;o<G;o++)m[o]^=X[o]}for(W=0;W<G&&V*G+W<c;W++)a[V*G+W]=m[W]}for(V=0;V<G;V++)m[V]=X[V]=0;for(V=0;V<4;V++)I[V]=0;return i.clean(),a}}(c);var b=c.default;for(var i in c)b[i]=c[i];l.exports=b}()}(Zc);var dc=function(l){return l&&l.__esModule&&Object.prototype.hasOwnProperty.call(l,"default")?l.default:l}(Zc.exports),cc=crypto;const bc=l=>l instanceof CryptoKey,ic=new TextEncoder,Gc=new TextDecoder,Ic=l=>{let Z=l;Z instanceof Uint8Array&&(Z=Gc.decode(Z)),Z=Z.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return(l=>{const Z=atob(l),d=new Uint8Array(Z.length);for(let l=0;l<Z.length;l++)d[l]=Z.charCodeAt(l);return d})(Z)}catch(l){throw new TypeError("The input to be decoded is not correctly encoded.")}};class mc extends Error{constructor(l){var Z;super(l),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,null===(Z=Error.captureStackTrace)||void 0===Z||Z.call(Error,this,this.constructor)}static get code(){return"ERR_JOSE_GENERIC"}}class Xc extends mc{constructor(l,Z="unspecified",d="unspecified"){super(l),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=Z,this.reason=d}static get code(){return"ERR_JWT_CLAIM_VALIDATION_FAILED"}}class ac extends mc{constructor(l,Z="unspecified",d="unspecified"){super(l),this.code="ERR_JWT_EXPIRED",this.claim=Z,this.reason=d}static get code(){return"ERR_JWT_EXPIRED"}}class Vc extends mc{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}static get code(){return"ERR_JOSE_ALG_NOT_ALLOWED"}}class tc extends mc{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}static get code(){return"ERR_JOSE_NOT_SUPPORTED"}}class Wc extends mc{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}static get code(){return"ERR_JWS_INVALID"}}class oc extends mc{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}class uc extends mc{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}static get code(){return"ERR_JWKS_INVALID"}}class nc extends mc{constructor(){super(...arguments),this.code="ERR_JWKS_NO_MATCHING_KEY",this.message="no applicable key found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_NO_MATCHING_KEY"}}class hc extends mc{constructor(){super(...arguments),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS",this.message="multiple matching keys found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}class ec extends mc{constructor(){super(...arguments),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED",this.message="signature verification failed"}static get code(){return"ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}function gc(){return"function"==typeof WebSocketPair}function pc(){try{return void 0!==Ll.versions.node}catch(l){return!1}}function sc(l,Z="algorithm.name"){return new TypeError(`CryptoKey does not support this operation, its ${Z} must be ${l}`)}function yc(l,Z){return l.name===Z}function Cc(l){return parseInt(l.name.slice(4),10)}var Rc=(l,...Z)=>{let d="Key must be ";if(Z.length>2){const l=Z.pop();d+=`one of type ${Z.join(", ")}, or ${l}.`}else 2===Z.length?d+=`one of type ${Z[0]} or ${Z[1]}.`:d+=`of type ${Z[0]}.`;return null==l?d+=` Received ${l}`:"function"==typeof l&&l.name?d+=` Received function ${l.name}`:"object"==typeof l&&null!=l&&l.constructor&&l.constructor.name&&(d+=` Received an instance of ${l.constructor.name}`),d},Yc=l=>bc(l);const Sc=["CryptoKey"];function Kc(l){if("object"!=typeof(Z=l)||null===Z||"[object Object]"!==Object.prototype.toString.call(l))return!1;var Z;if(null===Object.getPrototypeOf(l))return!0;let d=l;for(;null!==Object.getPrototypeOf(d);)d=Object.getPrototypeOf(d);return Object.getPrototypeOf(l)===d}const Nc=async l=>{var Z,d;const{algorithm:c,keyUsages:b}=function(l){let Z,d;switch(l.kty){case"oct":switch(l.alg){case"HS256":case"HS384":case"HS512":Z={name:"HMAC",hash:`SHA-${l.alg.slice(-3)}`},d=["sign","verify"];break;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":throw new tc(`${l.alg} keys cannot be imported as CryptoKey instances`);case"A128GCM":case"A192GCM":case"A256GCM":case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":Z={name:"AES-GCM"},d=["encrypt","decrypt"];break;case"A128KW":case"A192KW":case"A256KW":Z={name:"AES-KW"},d=["wrapKey","unwrapKey"];break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":Z={name:"PBKDF2"},d=["deriveBits"];break;default:throw new tc('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"RSA":switch(l.alg){case"PS256":case"PS384":case"PS512":Z={name:"RSA-PSS",hash:`SHA-${l.alg.slice(-3)}`},d=l.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":Z={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${l.alg.slice(-3)}`},d=l.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":Z={name:"RSA-OAEP",hash:`SHA-${parseInt(l.alg.slice(-3),10)||1}`},d=l.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new tc('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(l.alg){case"ES256":Z={name:"ECDSA",namedCurve:"P-256"},d=l.d?["sign"]:["verify"];break;case"ES384":Z={name:"ECDSA",namedCurve:"P-384"},d=l.d?["sign"]:["verify"];break;case"ES512":Z={name:"ECDSA",namedCurve:"P-521"},d=l.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":Z={name:"ECDH",namedCurve:l.crv},d=l.d?["deriveBits"]:[];break;default:throw new tc('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case(gc()||pc())&&"OKP":if("EdDSA"!==l.alg)throw new tc('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');switch(l.crv){case"Ed25519":Z={name:"NODE-ED25519",namedCurve:"NODE-ED25519"},d=l.d?["sign"]:["verify"];break;case pc()&&"Ed448":Z={name:"NODE-ED448",namedCurve:"NODE-ED448"},d=l.d?["sign"]:["verify"];break;default:throw new tc('Invalid or unsupported JWK "crv" (Subtype of Key Pair) Parameter value')}break;default:throw new tc('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:Z,keyUsages:d}}(l),i=[c,null!==(Z=l.ext)&&void 0!==Z&&Z,null!==(d=l.key_ops)&&void 0!==d?d:b];if("PBKDF2"===c.name)return cc.subtle.importKey("raw",Ic(l.k),...i);const G={...l};return delete G.alg,cc.subtle.importKey("jwk",G,...i)},Jc=async(l,Z,d,c)=>{const b=await function(l,Z,d){if(bc(Z))return function(l,Z,...d){switch(Z){case"HS256":case"HS384":case"HS512":{if(!yc(l.algorithm,"HMAC"))throw sc("HMAC");const d=parseInt(Z.slice(2),10);if(Cc(l.algorithm.hash)!==d)throw sc(`SHA-${d}`,"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!yc(l.algorithm,"RSASSA-PKCS1-v1_5"))throw sc("RSASSA-PKCS1-v1_5");const d=parseInt(Z.slice(2),10);if(Cc(l.algorithm.hash)!==d)throw sc(`SHA-${d}`,"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!yc(l.algorithm,"RSA-PSS"))throw sc("RSA-PSS");const d=parseInt(Z.slice(2),10);if(Cc(l.algorithm.hash)!==d)throw sc(`SHA-${d}`,"algorithm.hash");break}case pc()&&"EdDSA":if("NODE-ED25519"!==l.algorithm.name&&"NODE-ED448"!==l.algorithm.name)throw sc("NODE-ED25519 or NODE-ED448");break;case gc()&&"EdDSA":if(!yc(l.algorithm,"NODE-ED25519"))throw sc("NODE-ED25519");break;case"ES256":case"ES384":case"ES512":{if(!yc(l.algorithm,"ECDSA"))throw sc("ECDSA");const d=function(l){switch(l){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(Z);if(l.algorithm.namedCurve!==d)throw sc(d,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}!function(l,Z){if(Z.length&&!Z.some((Z=>l.usages.includes(Z)))){let l="CryptoKey does not support this operation, its usages must include ";if(Z.length>2){const d=Z.pop();l+=`one of ${Z.join(", ")}, or ${d}.`}else 2===Z.length?l+=`one of ${Z[0]} or ${Z[1]}.`:l+=`${Z[0]}.`;throw new TypeError(l)}}(l,d)}(Z,l,d),Z;if(Z instanceof Uint8Array){if(!l.startsWith("HS"))throw new TypeError(Rc(Z,...Sc));return cc.subtle.importKey("raw",Z,{hash:`SHA-${l.slice(-3)}`,name:"HMAC"},!1,[d])}throw new TypeError(Rc(Z,...Sc,"Uint8Array"))}(l,Z,"verify");((l,Z)=>{if(l.startsWith("RS")||l.startsWith("PS")){const{modulusLength:d}=Z.algorithm;if("number"!=typeof d||d<2048)throw new TypeError(`${l} requires key modulusLength to be 2048 bits or larger`)}})(l,b);const i=function(l,Z){const d=`SHA-${l.slice(-3)}`;switch(l){case"HS256":case"HS384":case"HS512":return{hash:d,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:d,name:"RSA-PSS",saltLength:l.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:d,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:d,name:"ECDSA",namedCurve:Z.namedCurve};case(gc()||pc())&&"EdDSA":const{namedCurve:c}=Z;return{name:c,namedCurve:c};default:throw new tc(`alg ${l} is not supported either by JOSE or your javascript runtime`)}}(l,b.algorithm);try{return await cc.subtle.verify(i,b,d,c)}catch(l){return!1}};async function Hc(l,Z,d){var c;if(!Kc(l))throw new Wc("Flattened JWS must be an object");if(void 0===l.protected&&void 0===l.header)throw new Wc('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==l.protected&&"string"!=typeof l.protected)throw new Wc("JWS Protected Header incorrect type");if(void 0===l.payload)throw new Wc("JWS Payload missing");if("string"!=typeof l.signature)throw new Wc("JWS Signature missing or incorrect type");if(void 0!==l.header&&!Kc(l.header))throw new Wc("JWS Unprotected Header incorrect type");let b={};if(l.protected){const Z=Ic(l.protected);try{b=JSON.parse(Gc.decode(Z))}catch(l){throw new Wc("JWS Protected Header is invalid")}}if(!((...l)=>{const Z=l.filter(Boolean);if(0===Z.length||1===Z.length)return!0;let d;for(const l of Z){const Z=Object.keys(l);if(d&&0!==d.size)for(const l of Z){if(d.has(l))return!1;d.add(l)}else d=new Set(Z)}return!0})(b,l.header))throw new Wc("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const i={...b,...l.header},G=function(l,Z,d,c,b){if(void 0!==b.crit&&void 0===c.crit)throw new l('"crit" (Critical) Header Parameter MUST be integrity protected');if(!c||void 0===c.crit)return new Set;if(!Array.isArray(c.crit)||0===c.crit.length||c.crit.some((l=>"string"!=typeof l||0===l.length)))throw new l('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let i;i=void 0!==d?new Map([...Object.entries(d),...Z.entries()]):Z;for(const Z of c.crit){if(!i.has(Z))throw new tc(`Extension Header Parameter "${Z}" is not recognized`);if(void 0===b[Z])throw new l(`Extension Header Parameter "${Z}" is missing`);if(i.get(Z)&&void 0===c[Z])throw new l(`Extension Header Parameter "${Z}" MUST be integrity protected`)}return new Set(c.crit)}(Wc,new Map([["b64",!0]]),null==d?void 0:d.crit,b,i);let I=!0;if(G.has("b64")&&(I=b.b64,"boolean"!=typeof I))throw new Wc('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:m}=i;if("string"!=typeof m||!m)throw new Wc('JWS "alg" (Algorithm) Header Parameter missing or invalid');const X=d&&((l,Z)=>{if(void 0!==Z&&(!Array.isArray(Z)||Z.some((l=>"string"!=typeof l))))throw new TypeError('"algorithms" option must be an array of strings');if(Z)return new Set(Z)})(0,d.algorithms);if(X&&!X.has(m))throw new Vc('"alg" (Algorithm) Header Parameter not allowed');if(I){if("string"!=typeof l.payload)throw new Wc("JWS Payload must be a string")}else if("string"!=typeof l.payload&&!(l.payload instanceof Uint8Array))throw new Wc("JWS Payload must be a string or an Uint8Array instance");let a=!1;"function"==typeof Z&&(Z=await Z(b,l),a=!0),((l,Z,d)=>{l.startsWith("HS")||"dir"===l||l.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(l)?(l=>{if(!(l instanceof Uint8Array)){if(!Yc(l))throw new TypeError(Rc(l,...Sc,"Uint8Array"));if("secret"!==l.type)throw new TypeError(`${Sc.join(" or ")} instances for symmetric algorithms must be of type "secret"`)}})(Z):((l,Z)=>{if(!Yc(l))throw new TypeError(Rc(l,...Sc));if("secret"===l.type)throw new TypeError(`${Sc.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);if("sign"===Z&&"public"===l.type)throw new TypeError(`${Sc.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);if("decrypt"===Z&&"public"===l.type)throw new TypeError(`${Sc.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);if(l.algorithm&&"verify"===Z&&"private"===l.type)throw new TypeError(`${Sc.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);if(l.algorithm&&"encrypt"===Z&&"private"===l.type)throw new TypeError(`${Sc.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`)})(Z,d)})(m,Z,"verify");const V=function(...l){const Z=l.reduce(((l,{length:Z})=>l+Z),0),d=new Uint8Array(Z);let c=0;return l.forEach((l=>{d.set(l,c),c+=l.length})),d}(ic.encode(null!==(c=l.protected)&&void 0!==c?c:""),ic.encode("."),"string"==typeof l.payload?ic.encode(l.payload):l.payload),t=Ic(l.signature);if(!await Jc(m,Z,t,V))throw new ec;let W;W=I?Ic(l.payload):"string"==typeof l.payload?ic.encode(l.payload):l.payload;const o={payload:W};return void 0!==l.protected&&(o.protectedHeader=b),void 0!==l.header&&(o.unprotectedHeader=l.header),a?{...o,key:Z}:o}const Uc=/^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;var Lc=l=>{const Z=Uc.exec(l);if(!Z)throw new TypeError("Invalid time period format");const d=parseFloat(Z[1]);switch(Z[2].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":return Math.round(d);case"minute":case"minutes":case"min":case"mins":case"m":return Math.round(60*d);case"hour":case"hours":case"hr":case"hrs":case"h":return Math.round(3600*d);case"day":case"days":case"d":return Math.round(86400*d);case"week":case"weeks":case"w":return Math.round(604800*d);default:return Math.round(31557600*d)}};const rc=l=>l.toLowerCase().replace(/^application\//,"");var Bc=(l,Z,d={})=>{const{typ:c}=d;if(c&&("string"!=typeof l.typ||rc(l.typ)!==rc(c)))throw new Xc('unexpected "typ" JWT header value',"typ","check_failed");let b;try{b=JSON.parse(Gc.decode(Z))}catch(l){}if(!Kc(b))throw new oc("JWT Claims Set must be a top-level JSON object");const{issuer:i}=d;if(i&&!(Array.isArray(i)?i:[i]).includes(b.iss))throw new Xc('unexpected "iss" claim value',"iss","check_failed");const{subject:G}=d;if(G&&b.sub!==G)throw new Xc('unexpected "sub" claim value',"sub","check_failed");const{audience:I}=d;if(I&&(X="string"==typeof I?[I]:I,!("string"==typeof(m=b.aud)?X.includes(m):Array.isArray(m)&&X.some(Set.prototype.has.bind(new Set(m))))))throw new Xc('unexpected "aud" claim value',"aud","check_failed");var m,X;let a;switch(typeof d.clockTolerance){case"string":a=Lc(d.clockTolerance);break;case"number":a=d.clockTolerance;break;case"undefined":a=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:V}=d,t=(W=V||new Date,Math.floor(W.getTime()/1e3));var W;if((void 0!==b.iat||d.maxTokenAge)&&"number"!=typeof b.iat)throw new Xc('"iat" claim must be a number',"iat","invalid");if(void 0!==b.nbf){if("number"!=typeof b.nbf)throw new Xc('"nbf" claim must be a number',"nbf","invalid");if(b.nbf>t+a)throw new Xc('"nbf" claim timestamp check failed',"nbf","check_failed")}if(void 0!==b.exp){if("number"!=typeof b.exp)throw new Xc('"exp" claim must be a number',"exp","invalid");if(b.exp<=t-a)throw new ac('"exp" claim timestamp check failed',"exp","check_failed")}if(d.maxTokenAge){const l=t-b.iat;if(l-a>("number"==typeof d.maxTokenAge?d.maxTokenAge:Lc(d.maxTokenAge)))throw new ac('"iat" claim timestamp check failed (too far in the past)',"iat","check_failed");if(l<0-a)throw new Xc('"iat" claim timestamp check failed (it should be in the past)',"iat","check_failed")}return b};function Fc(l){return Kc(l)}class vc{constructor(l){if(this._cached=new WeakMap,!function(l){return l&&"object"==typeof l&&Array.isArray(l.keys)&&l.keys.every(Fc)}(l))throw new uc("JSON Web Key Set malformed");var Z;this._jwks=(Z=l,"function"==typeof structuredClone?structuredClone(Z):JSON.parse(JSON.stringify(Z)))}async getKey(l,Z){const{alg:d,kid:c}={...l,...Z.header},b=function(l){switch("string"==typeof l&&l.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new tc('Unsupported "alg" value for a JSON Web Key Set')}}(d),i=this._jwks.keys.filter((l=>{let Z=b===l.kty;if(Z&&"string"==typeof c&&(Z=c===l.kid),Z&&"string"==typeof l.alg&&(Z=d===l.alg),Z&&"string"==typeof l.use&&(Z="sig"===l.use),Z&&Array.isArray(l.key_ops)&&(Z=l.key_ops.includes("verify")),Z&&"EdDSA"===d&&(Z="Ed25519"===l.crv||"Ed448"===l.crv),Z)switch(d){case"ES256":Z="P-256"===l.crv;break;case"ES256K":Z="secp256k1"===l.crv;break;case"ES384":Z="P-384"===l.crv;break;case"ES512":Z="P-521"===l.crv}return Z})),{0:G,length:I}=i;if(0===I)throw new nc;if(1!==I)throw new hc;const m=this._cached.get(G)||this._cached.set(G,{}).get(G);if(void 0===m[d]){const l=await async function(l,Z,d){if(!Kc(l))throw new TypeError("JWK must be an object");if(Z||(Z=l.alg),"string"!=typeof Z||!Z)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');switch(l.kty){case"oct":if("string"!=typeof l.k||!l.k)throw new TypeError('missing "k" (Key Value) Parameter value');return null!=d||(d=!0!==l.ext),d?Nc({...l,alg:Z,ext:!1}):Ic(l.k);case"RSA":if(void 0!==l.oth)throw new tc('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return Nc({...l,alg:Z});default:throw new tc('Unsupported "kty" (Key Type) Parameter value')}}({...G,ext:!0},d);if(l instanceof Uint8Array||"public"!==l.type)throw new uc("JSON Web Key Set members must be public keys");m[d]=l}return m[d]}}var kc={exports:{}},zc={exports:{}},Tc=function(l){if(l.__esModule)return l;var Z=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(l).forEach((function(d){var c=Object.getOwnPropertyDescriptor(l,d);Object.defineProperty(Z,d,c.get?c:{enumerable:!0,get:function(){return l[d]}})})),Z}(Md);
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */!function(l,Z){var d=Tc,c=d.Buffer;function b(l,Z){for(var d in l)Z[d]=l[d]}function i(l,Z,d){return c(l,Z,d)}c.from&&c.alloc&&c.allocUnsafe&&c.allocUnsafeSlow?l.exports=d:(b(d,Z),Z.Buffer=i),i.prototype=Object.create(c.prototype),b(c,i),i.from=function(l,Z,d){if("number"==typeof l)throw new TypeError("Argument must not be a number");return c(l,Z,d)},i.alloc=function(l,Z,d){if("number"!=typeof l)throw new TypeError("Argument must be a number");var b=c(l);return void 0!==Z?"string"==typeof d?b.fill(Z,d):b.fill(Z):b.fill(0),b},i.allocUnsafe=function(l){if("number"!=typeof l)throw new TypeError("Argument must be a number");return c(l)},i.allocUnsafeSlow=function(l){if("number"!=typeof l)throw new TypeError("Argument must be a number");return d.SlowBuffer(l)}}(zc,zc.exports);var xc=zc.exports.Buffer,Ac=Q.crypto||Q.msCrypto;Ac&&Ac.getRandomValues?kc.exports=function(l,Z){if(l>4294967295)throw new RangeError("requested too many random bytes");var d=xc.allocUnsafe(l);if(l>0)if(l>65536)for(var c=0;c<l;c+=65536)Ac.getRandomValues(d.slice(c,c+65536));else Ac.getRandomValues(d);return"function"==typeof Z?Ll.nextTick((function(){Z(null,d)})):d}:kc.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")};var Qc=kc.exports;class jc{base64URLEncode(l){return lc.encode(l).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLDecode(l){return lc.decode(l).toString()}hashSha256(l){return Gd.from(dc((new TextEncoder).encode(l)))}generateRandomBytes(l){return Qc(l)}verifyJwt(l,Z,d,c,b,i,G){return async function(l,Z,d){var c;const b=await async function(l,Z,d){if(l instanceof Uint8Array&&(l=Gc.decode(l)),"string"!=typeof l)throw new Wc("Compact JWS must be a string or Uint8Array");const{0:c,1:b,2:i,length:G}=l.split(".");if(3!==G)throw new Wc("Invalid Compact JWS");const I=await Hc({payload:b,protected:c,signature:i},Z,d),m={payload:I.payload,protectedHeader:I.protectedHeader};return"function"==typeof Z?{...m,key:I.key}:m}(l,Z,d);if((null===(c=b.protectedHeader.crit)||void 0===c?void 0:c.includes("b64"))&&!1===b.protectedHeader.b64)throw new oc("JWTs MUST NOT use unencoded payload");const i={payload:Bc(b.protectedHeader,b.payload,d),protectedHeader:b.protectedHeader};return"function"==typeof Z?{...i,key:b.key}:i}(l,(I={keys:[Z]},vc.prototype.getKey.bind(new vc(I))),{algorithms:d,audience:c,clockTolerance:G,issuer:b,subject:i}).then((()=>Promise.resolve(!0)));var I}}const Mc=(l,d)=>c(void 0,void 0,void 0,(function*(){var b;const i=(l=>{switch(l){case r.LocalStorage:return new jZ;case r.SessionStorage:return new PZ;case r.BrowserMemory:return new MZ;default:return new PZ}})(l.storage),G=new jc,I=new U(i,G);yield I.initialize(l);const m=new z(I),X=I.getDataLayer(),a=yield A((()=>c(void 0,void 0,void 0,(function*(){return I.getSignOutURL()}))),null!==(b=l.storage)&&void 0!==b?b:r.SessionStorage,(l=>X.setSessionDataParameter(e,null!=l?l:""))),V=d(I,m);let t=!1;const W=QZ.getInstance();let o,u,n=!0;(null==W?void 0:W.init)&&(yield W.init(!0,(l=>c(void 0,void 0,void 0,(function*(){const Z=Object.assign({attachToken:!0},l);Z.attachToken&&(Z.shouldAttachIDPAccessToken?l.headers=Object.assign(Object.assign({},l.headers),{Authorization:`Bearer ${yield V.getIDPAccessToken()}`}):l.headers=Object.assign(Object.assign({},l.headers),{Authorization:`Bearer ${yield V.getAccessToken()}`}))})))));const g=()=>c(void 0,void 0,void 0,(function*(){const l=yield I.getOIDCServiceEndpoints(),Z=yield X.getConfigData();V.initializeSessionManger(Z,l,(()=>c(void 0,void 0,void 0,(function*(){return(yield I.getBasicUserInfo()).sessionState}))),(l=>c(void 0,void 0,void 0,(function*(){return I.getAuthorizationURL(l)}))),a)})),p=()=>c(void 0,void 0,void 0,(function*(){return yield a.receivePromptNoneResponse((l=>c(void 0,void 0,void 0,(function*(){yield X.setSessionDataParameter(e,null!=l?l:"")}))))})),y=l=>{l.preventSignOutURLUpdate&&(t=!0)},C=(l,Z,d)=>c(void 0,void 0,void 0,(function*(){return yield V.requestAccessToken(l,Z,g,void 0,d)})),R=()=>c(void 0,void 0,void 0,(function*(){const l=yield X.getConfigData(),Z=yield I.getAuthorizationURL({prompt:"none",state:"sign-in-silently"}),d=new URL(Z);d.searchParams.set("response_mode","query");const c=d.toString();if(l.storage===r.BrowserMemory&&l.enablePKCE){const l=d.searchParams.get(s);x.setPKCE(Y.extractPKCEKeyFromStateParam(null!=l?l:""),yield I.getPKCECode(null!=l?l:""))}return c}));return{disableHttpHandler:()=>(V.disableHttpHandler(W),n=!1,!0),enableHttpHandler:()=>(V.enableHttpHandler(W),n=!0,!0),getAccessToken:()=>c(void 0,void 0,void 0,(function*(){return V.getAccessToken()})),getBasicUserInfo:()=>c(void 0,void 0,void 0,(function*(){return V.getBasicUserInfo()})),getCryptoHelper:()=>c(void 0,void 0,void 0,(function*(){return V.getCryptoHelper()})),getDataLayer:()=>c(void 0,void 0,void 0,(function*(){return V.getDataLayer()})),getDecodedIDToken:()=>c(void 0,void 0,void 0,(function*(){return V.getDecodedIDToken()})),getHttpClient:()=>W,getIDToken:()=>c(void 0,void 0,void 0,(function*(){return V.getIDToken()})),getOIDCServiceEndpoints:()=>c(void 0,void 0,void 0,(function*(){return V.getOIDCServiceEndpoints()})),httpRequest:l=>c(void 0,void 0,void 0,(function*(){return yield V.httpRequest(W,l,n,o,u)})),httpRequestAll:l=>c(void 0,void 0,void 0,(function*(){return yield V.httpRequestAll(l,W,n,o,u)})),isAuthenticated:()=>c(void 0,void 0,void 0,(function*(){return V.isAuthenticated()})),refreshAccessToken:()=>c(void 0,void 0,void 0,(function*(){try{return yield V.refreshAccessToken(y)}catch(l){return Promise.reject(l)}})),requestCustomGrant:l=>c(void 0,void 0,void 0,(function*(){return yield V.requestCustomGrant(l,y)})),revokeAccessToken:()=>I.revokeAccessToken().then((()=>(a.reset(),m.clearRefreshTokenTimeout(),Promise.resolve(!0)))).catch((l=>Promise.reject(l))),setHttpRequestErrorCallback:l=>{o=l},setHttpRequestFinishCallback:l=>{(null==W?void 0:W.setHttpRequestFinishCallback)&&W.setHttpRequestFinishCallback(l)},setHttpRequestStartCallback:l=>{(null==W?void 0:W.setHttpRequestStartCallback)&&W.setHttpRequestStartCallback(l)},setHttpRequestSuccessCallback:l=>{(null==W?void 0:W.setHttpRequestSuccessCallback)&&W.setHttpRequestSuccessCallback(l)},signIn:(d,b,i,G)=>c(void 0,void 0,void 0,(function*(){var m,X,a;const t=yield V.handleSignIn(p,g);if(t)return t;{let V,t,W;return(null==l?void 0:l.responseMode)===Z.formPost&&b?(V=b,t=null!=i?i:"",W=null!=G?G:""):(V=null!==(m=new URL(window.location.href).searchParams.get(h))&&void 0!==m?m:"",t=null!==(X=new URL(window.location.href).searchParams.get(e))&&void 0!==X?X:"",W=null!==(a=new URL(window.location.href).searchParams.get(s))&&void 0!==a?a:"",x.removeAuthorizationCode()),V&&W?C(V,t,W):I.getAuthorizationURL(d).then((Z=>c(void 0,void 0,void 0,(function*(){if(l.storage===r.BrowserMemory&&l.enablePKCE){const l=Y.extractPKCEKeyFromStateParam(W);x.setPKCE(l,yield I.getPKCECode(W))}return location.href=Z,yield x.waitTillPageRedirect(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""})}))))}})),signOut:()=>c(void 0,void 0,void 0,(function*(){return(yield I.isAuthenticated())&&!t?location.href=yield I.getSignOutURL():(location.href=x.getSignOutURL(),yield X.removeOIDCProviderMetaData(),yield X.removeTemporaryData(),yield X.removeSessionData()),m.clearRefreshTokenTimeout(),yield x.waitTillPageRedirect(),!0})),trySignInSilently:()=>c(void 0,void 0,void 0,(function*(){return yield V.trySignInSilently(R,C,a)})),updateConfig:l=>c(void 0,void 0,void 0,(function*(){const Z=yield X.getConfigData(),d=!(Z&&Z.endpoints&&Z.endpoints.checkSessionIframe&&l&&l.endpoints&&l.endpoints.checkSessionIframe&&Z.endpoints.checkSessionIframe===l.endpoints.checkSessionIframe),c=Object.assign(Object.assign({},Z),l);yield I.updateConfig(c),c.enableOIDCSessionManagement&&d&&(a.reset(),g())}))}})),Pc=(l,d,b)=>c(void 0,void 0,void 0,(function*(){var i;let G;const I=null!==(i=null==l?void 0:l.requestTimeout)&&void 0!==i?i:6e4;let m=!0,X=!1;const a=(l=>{switch(l){case r.LocalStorage:return new jZ;case r.SessionStorage:return new PZ;case r.BrowserMemory:return new MZ;default:return new PZ}})(l.storage),V=new jc,t=new U(a,V);yield t.initialize(l);const W=new z(t),o=yield A((()=>c(void 0,void 0,void 0,(function*(){const l={type:"sign-out"};try{return yield g(l)}catch(l){return x.getSignOutURL()}}))),l.storage,(l=>p(l))),u=b(t,W),n=new d,g=l=>{const Z=new MessageChannel;return n.postMessage(l,[Z.port2]),new Promise(((l,d)=>{const c=setTimeout((()=>{d(new R("SPA-WEB_WORKER_CLIENT-COM-TO01","Operation timed out.","No response was received from the web worker for "+I/1e3+" since dispatching the request"))}),I);return Z.port1.onmessage=({data:Z})=>{if(clearTimeout(c),null==Z?void 0:Z.success){const d=(null==Z?void 0:Z.data)?JSON.parse(null==Z?void 0:Z.data):null;(null==Z?void 0:Z.blob)&&(d.data=null==Z?void 0:Z.blob),l(d)}else d(Z.error?JSON.parse(Z.error):null)}}))},p=l=>g({data:l,type:"set_session_state"}),y=()=>g({type:"start_auto_refresh_token"}),C=()=>c(void 0,void 0,void 0,(function*(){const l=yield L(),Z=yield B();u.initializeSessionManger(Z,l,(()=>c(void 0,void 0,void 0,(function*(){return(yield F()).sessionState}))),(l=>c(void 0,void 0,void 0,(function*(){return(yield K(l)).authorizationURL}))),o)})),S=()=>c(void 0,void 0,void 0,(function*(){var l;const Z=yield B(),d=yield g({data:{prompt:"none",state:"sign-in-silently"},type:"get_auth_url"}),c=Y.extractPKCEKeyFromStateParam(null!==(l=new URL(d.authorizationURL).searchParams.get(s))&&void 0!==l?l:"");d.pkce&&Z.enablePKCE&&x.setPKCE(c,d.pkce);const b=d.authorizationURL,i=new URL(b);return i.searchParams.set("response_mode","query"),i.toString()})),K=l=>c(void 0,void 0,void 0,(function*(){const Z=yield B();return g({data:l,type:"get_auth_url"}).then((l=>c(void 0,void 0,void 0,(function*(){var d;if(l.pkce&&Z.enablePKCE){const Z=Y.extractPKCEKeyFromStateParam(null!==(d=new URL(l.authorizationURL).searchParams.get(s))&&void 0!==d?d:"");x.setPKCE(Z,l.pkce)}return Promise.resolve(l)}))))})),N=(l,Z,d)=>c(void 0,void 0,void 0,(function*(){const c=yield B(),b=Y.extractPKCEKeyFromStateParam(d),i={data:{code:l,pkce:c.enablePKCE?x.getPKCE(b):void 0,sessionState:Z,state:d},type:"request_get_token"};return c.enablePKCE&&x.removePKCE(b),g(i).then((l=>g({type:"get_sign_out_url"}).then((Z=>(x.setSignOutURL(Z),c.enableOIDCSessionManagement&&C(),y(),Promise.resolve(l)))).catch((l=>Promise.reject(l))))).catch((l=>Promise.reject(l)))})),J=()=>c(void 0,void 0,void 0,(function*(){return yield o.receivePromptNoneResponse((l=>c(void 0,void 0,void 0,(function*(){return p(l)}))))})),H=()=>c(void 0,void 0,void 0,(function*(){if(yield v())return yield y(),l.enableOIDCSessionManagement&&C(),F()})),L=()=>g({type:"get-oidc-service-endpoints"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),B=()=>g({type:"get_config_data"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),F=()=>g({type:"get-basic-user-info"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),v=()=>g({type:"is_authenticated"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l)));return{disableHttpHandler:()=>g({type:"disable_http_handler"}).then((()=>(m=!1,Promise.resolve(!0)))).catch((l=>Promise.reject(l))),enableHttpHandler:()=>g({type:"enable_http_handler"}).then((()=>(m=!0,Promise.resolve(!0)))).catch((l=>Promise.reject(l))),getBasicUserInfo:F,getCryptoHelper:()=>g({type:"get-crypto-helper"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getDecodedIDPIDToken:()=>g({type:"get-decoded-idp-id-token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getDecodedIDToken:()=>g({type:"get-decoded-id-token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getIDToken:()=>g({type:"get_id_token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getOIDCServiceEndpoints:L,httpRequest:l=>g({data:l,type:"http-request"}).then((l=>Promise.resolve(l))).catch((l=>c(void 0,void 0,void 0,(function*(){return m&&("function"==typeof G.requestErrorCallback&&(yield G.requestErrorCallback(l)),"function"==typeof G.requestFinishCallback&&G.requestFinishCallback()),Promise.reject(l)})))),httpRequestAll:l=>g({data:l,type:"http-request-all"}).then((l=>Promise.resolve(l))).catch((l=>c(void 0,void 0,void 0,(function*(){return m&&("function"==typeof G.requestErrorCallback&&(yield G.requestErrorCallback(l)),"function"==typeof G.requestFinishCallback&&G.requestFinishCallback()),Promise.reject(l)})))),initialize:()=>(G||(G={requestErrorCallback:()=>Promise.resolve(),requestFinishCallback:()=>null,requestStartCallback:()=>null,requestSuccessCallback:()=>null}),n.onmessage=({data:l})=>{switch(l.type){case"request-finish":(null==G?void 0:G.requestFinishCallback)&&(null==G||G.requestFinishCallback());break;case"request-start":(null==G?void 0:G.requestStartCallback)&&(null==G||G.requestStartCallback());break;case"request-success":(null==G?void 0:G.requestSuccessCallback)&&(null==G||G.requestSuccessCallback(l.data?JSON.parse(l.data):null))}},g({data:l,type:"init"}).then((()=>Promise.resolve(!0))).catch((l=>Promise.reject(l)))),isAuthenticated:v,refreshAccessToken:()=>g({type:"refresh_access-token"}),requestCustomGrant:l=>g({data:l,type:"request-custom-grant"}).then((Z=>(l.preventSignOutURLUpdate&&(X=!0),Promise.resolve(Z)))).catch((l=>Promise.reject(l))),revokeAccessToken:()=>g({type:"revoke-access-token"}).then((l=>(o.reset(),Promise.resolve(l)))).catch((l=>Promise.reject(l))),setHttpRequestErrorCallback:l=>{l&&"function"==typeof l&&(G.requestErrorCallback=l)},setHttpRequestFinishCallback:l=>{l&&"function"==typeof l&&(G.requestFinishCallback=l)},setHttpRequestStartCallback:l=>{l&&"function"==typeof l&&(G.requestStartCallback=l)},setHttpRequestSuccessCallback:l=>{l&&"function"==typeof l&&(G.requestSuccessCallback=l)},signIn:(d,b,i,G)=>c(void 0,void 0,void 0,(function*(){var I,m,X;const a=yield u.handleSignIn(J,C,H);if(a)return a;{let a,V,t;return(null==l?void 0:l.responseMode)===Z.formPost&&b?(a=b,V=null!=i?i:"",t=null!=G?G:""):(a=null!==(I=new URL(window.location.href).searchParams.get(h))&&void 0!==I?I:"",V=null!==(m=new URL(window.location.href).searchParams.get(e))&&void 0!==m?m:"",t=null!==(X=new URL(window.location.href).searchParams.get(s))&&void 0!==X?X:"",x.removeAuthorizationCode()),a&&t?N(a,V,t):K(d).then((l=>c(void 0,void 0,void 0,(function*(){return location.href=l.authorizationURL,yield x.waitTillPageRedirect(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""})})))).catch((l=>Promise.reject(l)))}})),signOut:()=>v().then((l=>c(void 0,void 0,void 0,(function*(){return l&&!X?g({type:"sign-out"}).then((l=>c(void 0,void 0,void 0,(function*(){return window.location.href=l,yield x.waitTillPageRedirect(),Promise.resolve(!0)})))).catch((l=>Promise.reject(l))):(window.location.href=x.getSignOutURL(),yield x.waitTillPageRedirect(),Promise.resolve(!0))})))).catch((l=>Promise.reject(l))),trySignInSilently:()=>c(void 0,void 0,void 0,(function*(){return yield u.trySignInSilently(S,N,o)})),updateConfig:l=>c(void 0,void 0,void 0,(function*(){const Z=yield B(),d=!(Z&&Z.endpoints&&Z.endpoints.checkSessionIframe&&l&&l.endpoints&&l.endpoints.checkSessionIframe&&Z.endpoints.checkSessionIframe===l.endpoints.checkSessionIframe),c=Object.assign(Object.assign({},Z),l),b={data:c,type:"update_config"};yield g(b),c.enableOIDCSessionManagement&&d&&(o.reset(),C())}))}})),wc={checkSessionInterval:3,clientHost:origin,enableOIDCSessionManagement:!1,sessionRefreshInterval:300,storage:r.SessionStorage};class fc{constructor(l){this._authHelper=k,this._worker=F,this._initialized=!1,this._startedInitialize=!1,this._onSignInCallback=()=>null,this._onSignOutCallback=()=>null,this._onSignOutFailedCallback=()=>null,this._onEndUserSession=()=>null,this._onInitialize=()=>null,this._onCustomGrant=new Map,this._instanceID=l}instantiateAuthHelper(l){this._authHelper=l||k}instantiateWorker(l){this._worker=l||F}_isInitialized(){return c(this,void 0,void 0,(function*(){if(!this._startedInitialize)return!1;let l=0;for(;!this._initialized;)1e4===l&&console.warn("It is taking longer than usual for the object to be initialized"),yield new Promise((l=>setTimeout(l,1))),l++;return!0}))}_validateMethod(){return c(this,void 0,void 0,(function*(){return(yield this._isInitialized())&&!!(yield this.isAuthenticated())||Promise.reject()}))}
/**
     * This method returns the instance of the singleton class.
     *
     * @return {AsgardeoSPAClient} - Returns the instance of the singleton class.
     *
     * @example
     * ```
     * const auth = AsgardeoSPAClient.getInstance();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getinstance
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */static getInstance(l){var Z,d;return l&&(null===(Z=this._instances)||void 0===Z?void 0:Z.get(l))?this._instances.get(l):!l&&(null===(d=this._instances)||void 0===d?void 0:d.get("primaryInstance"))?this._instances.get("primaryInstance"):l?(this._instances.set(l,new fc(l)),this._instances.get(l)):(this._instances.set("primaryInstance",new fc("primaryInstance")),this._instances.get("primaryInstance"))}
/**
     * This method initializes the `AsgardeoSPAClient` instance.
     *
     * @param {ConfigInterface} config The config object to initialize with.
     *
     * @return {Promise<boolean>} - Resolves to `true` if initialization is successful.
     *
     * @example
     * ```
     * auth.initialize({
     *     signInRedirectURL: "http://localhost:3000/sign-in",
     *     clientID: "client ID",
     *     baseUrl: "https://api.asgardeo.io"
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#initialize
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */initialize(l,Z,d){var b;return c(this,void 0,void 0,(function*(){if(this._storage=null!==(b=l.storage)&&void 0!==b?b:r.SessionStorage,this._initialized=!1,this._startedInitialize=!0,Z&&this.instantiateAuthHelper(Z),d&&this.instantiateWorker(d),this._storage!==r.WebWorker){if(!this._client){const Z=l,d=Object.assign({},wc);this._client=yield Mc(Object.assign(Object.assign({},d),Z),((l,Z)=>new this._authHelper(l,Z)))}return this._initialized=!0,this._onInitialize&&this._onInitialize(!0),Promise.resolve(!0)}if(!this._client){const Z=l;return this._client=yield Pc(Object.assign(Object.assign({},wc),Z),this._worker,((l,Z)=>new this._authHelper(l,Z))),this._client.initialize().then((()=>(this._onInitialize&&this._onInitialize(!0),this._initialized=!0,Promise.resolve(!0)))).catch((l=>Promise.reject(l)))}return Promise.resolve(!0)}))}
/**
     * This method returns a Promise that resolves with the basic user information obtained from the ID token.
     *
     * @return {Promise<BasicUserInfo>} - A promise that resolves with the user information.
     *
     * @example
     * ```
     * auth.getBasicUserInfo().then((response) => {
     *    // console.log(response);
     * }).catch((error) => {
     *    // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getuserinfo
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getBasicUserInfo(){var l;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getBasicUserInfo()}))}
/**
     * This method initiates the authentication flow. This should be called twice.
     *  1. To initiate the authentication flow.
     *  2. To obtain the access token after getting the authorization code.
     *
     * To satisfy the second condition, one of the two strategies mentioned below can be used:
     *  1. Redirect the user back to the same login page that initiated the authentication flow.
     *  2. Call the `signIn()` method in the page the user is redirected to after authentication.
     *
     * **To fire a callback function after signing in, use the `on()` method.**
     * **To learn more about the `on()` method:**
     * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
     *
     * @param {SignInConfig} config - The sign-in config.
     * The `SignInConfig` object has these two attributes in addition to any custom key-value pairs.
     *  1. fidp - Specifies the FIDP parameter that is used to take the user directly to an IdP login page.
     *  2. forceInit: Specifies if the OIDC Provider Meta Data should be loaded again from the `well-known`
     * endpoint.
     *  3. Any other parameters that should be appended to the authorization request.
     * @param {string} authorizationCode - The authorization code. (Optional)
     * @param {string} sessionState - The session state. (Optional)
     * @param {string} state - The state. (Optional)
     *
     * @return {Promise<BasicUserInfo>} - A promise that resolves with the user information.
     *
     * @example
     * ```
     * auth.signIn();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#signin
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */signIn(l,Z,d,b){var i;return c(this,void 0,void 0,(function*(){if(yield this._isInitialized(),x.canContinueSignIn(Boolean(null==l?void 0:l.callOnlyOnRedirect),Z))return null==l||delete l.callOnlyOnRedirect,null===(i=this._client)||void 0===i?void 0:i.signIn(l,Z,d,b).then((l=>(this._onSignInCallback&&(l.allowedScopes||l.displayName||l.email||l.username)&&this._onSignInCallback(l),l)))}))}trySignInSilently(){var l;return c(this,void 0,void 0,(function*(){if(yield this._isInitialized(),!x.wasSignInCalled())return null===(l=this._client)||void 0===l?void 0:l.trySignInSilently().then((l=>{if(this._onSignInCallback&&l){const Z=l;(Z.allowedScopes||Z.displayName||Z.email||Z.username)&&this._onSignInCallback(Z)}return l}))}))}
/**
     * This method initiates the sign-out flow.
     *
     * **To fire a callback function after signing out, use the `on()` method.**
     * **To learn more about the `on()` method:**
     * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
     *
     * @return {Promise<boolean>} - Returns a promise that resolves with `true` if sign out is successful.
     *
     * @example
     * ```
     * auth.signOut();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#signout
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */signOut(){var l,Z;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null!==(Z=yield null===(l=this._client)||void 0===l?void 0:l.signOut())&&void 0!==Z&&Z}))}
/**
     * This method sends an API request to a protected endpoint.
     * The access token is automatically attached to the header of the request.
     * This is the only way by which protected endpoints can be accessed
     * when the web worker is used to store session information.
     *
     * @param {HttpRequestConfig} config -  The config object containing attributes necessary to send a request.
     *
     * @return {Promise<HttpResponse>} - Returns a Promise that resolves with the response to the request.
     *
     * @example
     * ```
     *  const requestConfig = {
     *      headers: {
     *          "Accept": "application/json",
     *          "Access-Control-Allow-Origin": "https://api.asgardeo.io/myaccount",
     *          "Content-Type": "application/scim+json"
     *      },
     *      method: "GET",
     *      url: "https://api.asgardeo.io/scim2/me"
     *  };
     *
     *  return auth.httpRequest(requestConfig)
     *     .then((response) => {
     *           // console.log(response);
     *      })
     *      .catch((error) => {
     *           // console.error(error);
     *      });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#httprequest
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */httpRequest(l){var Z;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(Z=this._client)||void 0===Z?void 0:Z.httpRequest(l)}))}
/**
     * This method sends multiple API requests to a protected endpoint.
     * The access token is automatically attached to the header of the request.
     * This is the only way by which multiple requests can be sent to protected endpoints
     * when the web worker is used to store session information.
     *
     * @param {HttpRequestConfig[]} config -  The config object containing attributes necessary to send a request.
     *
     * @return {Promise<HttpResponse[]>} - Returns a Promise that resolves with the responses to the requests.
     *
     * @example
     * ```
     *  const requestConfig = {
     *      headers: {
     *          "Accept": "application/json",
     *          "Content-Type": "application/scim+json"
     *      },
     *      method: "GET",
     *      url: "https://api.asgardeo.io/scim2/me"
     *  };
     *
     *  const requestConfig2 = {
     *      headers: {
     *          "Accept": "application/json",
     *          "Content-Type": "application/scim+json"
     *      },
     *      method: "GET",
     *      url: "https://api.asgardeo.io/scim2/me"
     *  };
     *
     *  return auth.httpRequest([requestConfig, requestConfig2])
     *     .then((responses) => {
     *           response.forEach((response)=>{
     *              // console.log(response);
     *           });
     *      })
     *      .catch((error) => {
     *           // console.error(error);
     *      });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#httprequestall
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */httpRequestAll(l){var Z;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(Z=this._client)||void 0===Z?void 0:Z.httpRequestAll(l)}))}
/**
     * This method allows you to send a request with a custom grant.
     *
     * @param {CustomGrantRequestParams} config - The request parameters.
     *
     * @return {Promise<HttpResponse<any> | SignInResponse>} - A Promise that resolves with
     * the value returned by the custom grant request.
     *
     * @example
     * ```
     * auth.customGrant({
     *   attachToken: false,
     *   data: {
     *       client_id: "{{clientId}}",
     *       grant_type: "account_switch",
     *       scope: "{{scope}}",
     *       token: "{{token}}",
     *   },
     *   id: "account-switch",
     *   returnResponse: true,
     *   returnsSession: true,
     *   signInRequired: true
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#customgrant
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */requestCustomGrant(l){var Z,d;return c(this,void 0,void 0,(function*(){if(l.signInRequired,yield this._validateMethod(),!l.id)return Promise.reject(new R("SPA-AUTH_CLIENT-RCG-NF01","The custom grant request id not found.","The id attribute of the custom grant config object passed as an argument should have a value."));const c=yield null===(Z=this._client)||void 0===Z?void 0:Z.requestCustomGrant(l),b=this._onCustomGrant.get(l.id);return b&&b(null===(d=this._onCustomGrant)||void 0===d?void 0:d.get(l.id)),c}))}
/**
     * This method ends a user session. The access token is revoked and the session information is destroyed.
     *
     * **To fire a callback function after ending user session, use the `on()` method.**
     * **To learn more about the `on()` method:**
     * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
     *
     * @return {Promise<boolean>} - A promise that resolves with `true` if the process is successful.
     *
     * @example
     * ```
     * auth.endUserSession();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#endusersession
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */revokeAccessToken(){var l;return c(this,void 0,void 0,(function*(){yield this._validateMethod();const Z=yield null===(l=this._client)||void 0===l?void 0:l.revokeAccessToken();return this._onEndUserSession&&(yield this._onEndUserSession(Z)),Z}))}
/**
     * This method returns a Promise that resolves with an object containing the service endpoints.
     *
     * @return {Promise<ServiceResourcesType} - A Promise that resolves with an object containing the service endpoints.
     *
     * @example
     * ```
     * auth.getServiceEndpoints().then((endpoints) => {
     *      // console.log(endpoints);
     *  }).error((error) => {
     *      // console.error(error);
     *  });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getserviceendpoints
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getOIDCServiceEndpoints(){var l;return c(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.getOIDCServiceEndpoints()}))}
/**
     * This methods returns the Axios http client.
     *
     * @return {HttpClientInstance} - The Axios HTTP client.
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getHttpClient(){if(this._client){if(this._storage!==r.WebWorker)return this._client.getHttpClient();throw new R("SPA-AUTH_CLIENT-GHC-IV01","Http client cannot be returned.","The http client cannot be returned when the storage type is set to webWorker.")}throw new R("SPA-AUTH_CLIENT-GHC-NF02","The SDK is not initialized.","The SDK has not been initialized yet. Initialize the SDK using the initialize method before calling this method.")}
/**
     * This method decodes the payload of the id token and returns it.
     *
     * @return {Promise<DecodedIdTokenPayloadInterface>} - A Promise that resolves with
     * the decoded payload of the id token.
     *
     * @example
     * ```
     * auth.getDecodedIDToken().then((response)=>{
     *     // console.log(response);
     * }).catch((error)=>{
     *     // console.error(error);
     * });
     * ```
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getdecodedidtoken
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getDecodedIDToken(){var l;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getDecodedIDToken()}))}
/**
     * This method returns the CryptoHelper instance.
     *
     * @return {Promise<DecodedIdTokenPayloadInterface>} - A Promise that resolves with
     * the CryptoHelper instance.
     *
     * @example
     * ```
     * auth.getCryptoHelper().then((response)=>{
     *     // console.log(response);
     * }).catch((error)=>{
     *     // console.error(error);
     * });
     * ```
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getCryptoHelper
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getCryptoHelper(){var l;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getCryptoHelper()}))}
/**
     * This method return the ID token.
     *
     * @return {Promise<string>} - A Promise that resolves with the ID token.
     *
     * @example
     * ```
     * const idToken = await auth.getIDToken();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIDToken
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */getIDToken(){var l;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getIDToken()}))}
/**
     * This method return a Promise that resolves with the access token.
     *
     * **This method will not return the access token if the storage type is set to `webWorker`.**
     *
     * @return {Promise<string>} - A Promise that resolves with the access token.
     *
     * @example
     * ```
     *   auth.getAccessToken().then((token) => {
     *       // console.log(token);
     *   }).catch((error) => {
     *       // console.error(error);
     *   });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getaccesstoken
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getAccessToken(){return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(r.WebWorker,r.BrowserMemory)].includes(this._storage)?Promise.reject(new R("SPA-AUTH_CLIENT-GAT-IV01","The access token cannot be returned.","The access token cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getAccessToken()}))}
/**
     * This method return a Promise that resolves with the idp access token.
     *
     * **This method will not return the access token if the storage type is set to `webWorker`.**
     *
     * @return {Promise<string>} - A Promise that resolves with the idp access token.
     *
     * @example
     * ```
     *   auth.getIDPAccessToken().then((token) => {
     *       // console.log(token);
     *   }).catch((error) => {
     *       // console.error(error);
     *   });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getaccesstoken
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getIDPAccessToken(){return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(r.WebWorker,r.BrowserMemory)].includes(this._storage)?Promise.reject(new R("SPA-AUTH_CLIENT-GIAT-IV01","The access token cannot be returned.","The access token cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getAccessToken()}))}
/**
     * This method return a Promise that resolves with the data layer object.
     *
     * **This method will not return the data layer object, if the storage type is set to `webWorker`.**
     *
     * @return {Promise<string>} - A Promise that resolves with the data layer object.
     *
     * @example
     * ```
     *   auth.getDataLayer().then((dataLayer) => {
     *       // console.log(dataLayer);
     *   }).catch((error) => {
     *       // console.error(error);
     *   });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getdatalayer
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */getDataLayer(){return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(r.WebWorker,r.BrowserMemory)].includes(this._storage)?Promise.reject(new R("SPA-AUTH_CLIENT-GDL-IV01","The data layer cannot be returned.","The data layer cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getDataLayer()}))}
/**
     * This method refreshes the access token.
     *
     * @return {TokenResponseInterface} - A Promise that resolves with an object containing
     * information about the refreshed access token.
     *
     * @example
     * ```
     * auth.refreshToken().then((response)=>{
     *      // console.log(response);
     * }).catch((error)=>{
     *      // console.error(error);
     * });
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#refreshtoken
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */refreshAccessToken(){var l;return c(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.refreshAccessToken()}))}
/**
     * This method specifies if the user is authenticated or not.
     *
     * @return {Promise<boolean>} - A Promise that resolves with `true` if the user is authenticated.
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */isAuthenticated(){var l;return c(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.isAuthenticated()}))}on(l,Z,d){var b,i,G,I;return c(this,void 0,void 0,(function*(){if(yield this._isInitialized(),!Z||"function"!=typeof Z)throw new R("SPA-AUTH_CLIENT-ON-IV02","Invalid callback function.","The provided callback function is invalid.");switch(l){case B.SignIn:this._onSignInCallback=Z;break;case B.SignOut:this._onSignOutCallback=Z,(yield x.isSignOutSuccessful())&&this._onSignOutCallback();break;case B.RevokeAccessToken:this._onEndUserSession=Z;break;case B.Initialize:this._onInitialize=Z;break;case B.HttpRequestError:null===(b=this._client)||void 0===b||b.setHttpRequestErrorCallback(Z);break;case B.HttpRequestFinish:null===(i=this._client)||void 0===i||i.setHttpRequestFinishCallback(Z);break;case B.HttpRequestStart:null===(G=this._client)||void 0===G||G.setHttpRequestStartCallback(Z);break;case B.HttpRequestSuccess:null===(I=this._client)||void 0===I||I.setHttpRequestSuccessCallback(Z);break;case B.CustomGrant:d&&this._onCustomGrant.set(d,Z);break;case B.SignOutFailed:{this._onSignOutFailedCallback=Z;const l=x.didSignOutFail();l&&this._onSignOutFailedCallback(l);break}default:throw new R("SPA-AUTH_CLIENT-ON-IV01","Invalid hook.","The provided hook is invalid.")}}))}
/**
     * This method enables callback functions attached to the http client.
     *
     * @return {Promise<boolean>} - A promise that resolves with True.
     *
     * @example
     * ```
     * auth.enableHttpHandler();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#enableHttpHandler
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */enableHttpHandler(){var l;return c(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.enableHttpHandler()}))}
/**
     * This method disables callback functions attached to the http client.
     *
     * @return {Promise<boolean>} - A promise that resolves with True.
     *
     * @example
     * ```
     * auth.disableHttpHandler();
     * ```
     *
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#disableHttpHandler
     *
     * @memberof AsgardeoSPAClient
     *
     * @preserve
     */disableHttpHandler(){var l;return c(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.disableHttpHandler()}))}
/**
     * This method updates the configuration that was passed into the constructor when instantiating this class.
     *
     * @param {Partial<AuthClientConfig<T>>} config - A config object to update the SDK configurations with.
     *
     * @example
     * ```
     * const config = {
     *     signInRedirectURL: "http://localhost:3000/sign-in",
     *     clientID: "client ID",
     *     baseUrl: "https://api.asgardeo.io"
     * }
     * const auth.updateConfig(config);
     * ```
     * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master/lib#updateConfig
     *
     * @memberof AsgardeoAuthClient
     *
     * @preserve
     */updateConfig(l){return c(this,void 0,void 0,(function*(){if(yield this._isInitialized(),this._storage===r.WebWorker){const Z=this._client;yield Z.updateConfig(l)}else{const Z=this._client;yield Z.updateConfig(l)}}))}}fc._instances=new Map;class Ec extends Worker{constructor(){super(...arguments),this.onmessage=()=>null}}const Dc=l=>{const Z=self;let d;Z.onmessage=({data:Z,ports:I})=>c(void 0,void 0,void 0,(function*(){var m,X,a,V;const t=I[0];if("init"===Z.type||d)switch(Z.type){case"init":try{const I=Object.assign({},Z.data);d=yield((l,Z)=>c(void 0,void 0,void 0,(function*(){const d=new MZ,b=new jc,i=new U(d,b);yield i.initialize(l);const G=new z(i),I=Z(i,G),m=i.getDataLayer(),X=QZ.getInstance();return(null==X?void 0:X.init)&&(yield X.init(!0,(l=>c(void 0,void 0,void 0,(function*(){const Z=Object.assign({attachToken:!0},l);Z.attachToken&&(Z.shouldAttachIDPAccessToken?l.headers=Object.assign(Object.assign({},l.headers),{Authorization:`Bearer ${yield I.getIDPAccessToken()}`}):l.headers=Object.assign(Object.assign({},l.headers),{Authorization:`Bearer ${yield I.getAccessToken()}`}))}))))),{disableHttpHandler:()=>{I.disableHttpHandler(X)},enableHttpHandler:()=>{I.enableHttpHandler(X)},getAccessToken:()=>I.getAccessToken(),getAuthorizationURL:l=>c(void 0,void 0,void 0,(function*(){return i.getAuthorizationURL(l).then((l=>c(void 0,void 0,void 0,(function*(){var Z;const d=null!==(Z=new URL(l).searchParams.get(s))&&void 0!==Z?Z:"",c=yield i.getPKCECode(d);return{authorizationURL:l,pkce:c}})))).catch((l=>Promise.reject(l)))})),getBasicUserInfo:()=>c(void 0,void 0,void 0,(function*(){return I.getBasicUserInfo()})),getConfigData:()=>c(void 0,void 0,void 0,(function*(){return m.getConfigData()})),getCryptoHelper:()=>c(void 0,void 0,void 0,(function*(){return I.getCryptoHelper()})),getDecodedIDPIDToken:()=>c(void 0,void 0,void 0,(function*(){return I.getDecodedIDPIDToken()})),getDecodedIDToken:()=>c(void 0,void 0,void 0,(function*(){return I.getDecodedIDToken()})),getIDToken:()=>c(void 0,void 0,void 0,(function*(){return I.getIDToken()})),getOIDCServiceEndpoints:()=>c(void 0,void 0,void 0,(function*(){return I.getOIDCServiceEndpoints()})),getSignOutURL:()=>c(void 0,void 0,void 0,(function*(){return yield i.getSignOutURL()})),httpRequest:l=>c(void 0,void 0,void 0,(function*(){return yield I.httpRequest(X,l)})),httpRequestAll:l=>c(void 0,void 0,void 0,(function*(){return yield I.httpRequestAll(l,X)})),isAuthenticated:()=>I.isAuthenticated(),refreshAccessToken:()=>c(void 0,void 0,void 0,(function*(){try{return yield I.refreshAccessToken()}catch(l){return Promise.reject(l)}})),requestAccessToken:(l,Z,d,b)=>c(void 0,void 0,void 0,(function*(){return yield I.requestAccessToken(l,Z,void 0,d,b)})),requestCustomGrant:l=>c(void 0,void 0,void 0,(function*(){return yield I.requestCustomGrant(l)})),revokeAccessToken:()=>i.revokeAccessToken().then((()=>(G.clearRefreshTokenTimeout(),Promise.resolve(!0)))).catch((l=>Promise.reject(l))),setHttpRequestFinishCallback:l=>{(null==X?void 0:X.setHttpRequestFinishCallback)&&X.setHttpRequestFinishCallback(l)},setHttpRequestStartCallback:l=>{(null==X?void 0:X.setHttpRequestStartCallback)&&X.setHttpRequestStartCallback(l)},setHttpRequestSuccessCallback:l=>{(null==X?void 0:X.setHttpRequestSuccessCallback)&&X.setHttpRequestSuccessCallback(l)},setSessionState:l=>c(void 0,void 0,void 0,(function*(){yield m.setSessionDataParameter(e,l)})),signOut:()=>c(void 0,void 0,void 0,(function*(){return G.clearRefreshTokenTimeout(),yield i.getSignOutURL()})),startAutoRefreshToken:()=>c(void 0,void 0,void 0,(function*(){G.clearRefreshTokenTimeout(),G.refreshAccessTokenAutomatically(I)})),updateConfig:l=>c(void 0,void 0,void 0,(function*(){yield i.updateConfig(l)}))}})))(I,l),d.setHttpRequestFinishCallback(G),d.setHttpRequestStartCallback(b),d.setHttpRequestSuccessCallback(i),t.postMessage(T.generateSuccessMessage())}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get_auth_url":d.getAuthorizationURL(null==Z?void 0:Z.data).then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"request_get_token":d.requestAccessToken(null===(m=null==Z?void 0:Z.data)||void 0===m?void 0:m.code,null===(X=null==Z?void 0:Z.data)||void 0===X?void 0:X.sessionState,null===(a=null==Z?void 0:Z.data)||void 0===a?void 0:a.pkce,null===(V=null==Z?void 0:Z.data)||void 0===V?void 0:V.state).then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"http-request":d.httpRequest(Z.data).then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"http-request-all":d.httpRequestAll(Z.data).then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"sign-out":try{t.postMessage(T.generateSuccessMessage(yield d.signOut()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"request-custom-grant":d.requestCustomGrant(Z.data).then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"revoke-access-token":d.revokeAccessToken().then((l=>{t.postMessage(T.generateSuccessMessage(l))})).catch((l=>{t.postMessage(T.generateFailureMessage(l))}));break;case"get-oidc-service-endpoints":try{t.postMessage(T.generateSuccessMessage(yield d.getOIDCServiceEndpoints()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get-basic-user-info":try{t.postMessage(T.generateSuccessMessage(yield d.getBasicUserInfo()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get-decoded-id-token":try{t.postMessage(T.generateSuccessMessage(yield d.getDecodedIDToken()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get-crypto-helper":try{t.postMessage(T.generateSuccessMessage(yield d.getCryptoHelper()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get_id_token":try{t.postMessage(T.generateSuccessMessage(yield d.getIDToken()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"enable_http_handler":d.enableHttpHandler(),t.postMessage(T.generateSuccessMessage());break;case"disable_http_handler":d.disableHttpHandler(),t.postMessage(T.generateSuccessMessage());break;case"is_authenticated":try{t.postMessage(T.generateSuccessMessage(yield d.isAuthenticated()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get_sign_out_url":try{t.postMessage(T.generateSuccessMessage(yield d.getSignOutURL()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"refresh_access-token":try{t.postMessage(T.generateSuccessMessage(yield d.refreshAccessToken()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"start_auto_refresh_token":try{t.postMessage(T.generateSuccessMessage(d.startAutoRefreshToken()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"set_session_state":try{t.postMessage(T.generateSuccessMessage(yield d.setSessionState(null==Z?void 0:Z.data)))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"update_config":try{t.postMessage(T.generateSuccessMessage(yield d.updateConfig(null==Z?void 0:Z.data)))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;case"get_config_data":try{t.postMessage(T.generateSuccessMessage(yield d.getConfigData()))}catch(l){t.postMessage(T.generateFailureMessage(l))}break;default:null==t||t.postMessage(T.generateFailureMessage(new R("SPA-CLIENT_WORKER-ONMSG-IV02","The message type is invalid.",`The message type provided, ${Z.type}, is invalid.`)))}else t.postMessage(T.generateFailureMessage(new R("SPA-CLIENT_WORKER-ONMSG-NF01","The web worker has not been initialized yet.","The initialize method needs to be called before the specified operation can be carried out.")))}));const b=()=>{Z.postMessage({type:"request-start"})},i=l=>{Z.postMessage({data:JSON.stringify(null!=l?l:""),type:"request-success"})},G=()=>{Z.postMessage({type:"request-finish"})}};function Oc(l,Z,d){var c=void 0===Z?null:Z,b=function(l,Z){var d=atob(l);if(Z){for(var c=new Uint8Array(d.length),b=0,i=d.length;b<i;++b)c[b]=d.charCodeAt(b);return String.fromCharCode.apply(null,new Uint16Array(c.buffer))}return d}(l,void 0!==d&&d),i=b.indexOf("\n",10)+1,G=b.substring(i)+(c?"//# sourceMappingURL="+c:""),I=new Blob([G],{type:"application/javascript"});return URL.createObjectURL(I)}var qc,_c,$c,lb,Zb=(qc="",_c=null,$c=!1,function(l){return lb=lb||Oc(qc,_c,$c),new Worker(lb,l)});function db(l){return Object.prototype.toString.call(l).slice(8,-1)}function cb(l){return"Array"===db(l)}function bb(l,Z,d,c){return"Object"===db(b=l)&&b.constructor===Object&&Object.getPrototypeOf(b)===Object.prototype&&Object.keys(l).length&&"FieldValue.serverTimestamp"!==l.methodName?(function(l){return"Number"===db(l)&&!isNaN(l)}(c)&&c--,Object.keys(l).reduce(((b,i)=>{const G=(Z?Z+".":"")+i,I=-1===c?{[G]:l[i]}:bb(l[i],G,d,c);return Object.assign(b,I)}),{})):Z?(d[Z]=l,d):l;var b}function ib(l){return l.reduce(((l,Z)=>cb(Z)?[...l,...ib(Z)]:[...l,Z]),[])}function Gb(l,Z){return cb(l)?ib(l):function(l,Z){return bb(l,null,{},Z)}(l,Z)}var Ib;!function(l){l.SessionData="apim_session_data"}(Ib||(Ib={}));class mb extends k{constructor(l,Z){super(l,Z)}exchangeAccessToken(){const Z=Object.create(null,{getAccessToken:{get:()=>super.getAccessToken}});var d;return l(this,void 0,void 0,(function*(){const l=yield Z.getAccessToken.call(this),c=yield this._dataLayer.getConfigData();if(!l)throw new R("TOKEN_EXCHANGE-AUTH_HELPER-RAT2-NF01","Invalid access token.","Failed retrieving access token.");const b={grant_type:"urn:ietf:params:oauth:grant-type:token-exchange",requested_token_type:"urn:ietf:params:oauth:token-type:jwt",subject_token:l,subject_token_type:"urn:ietf:params:oauth:token-type:jwt"},i=Gb(Object.assign({},null==c?void 0:c.stsConfig),1);for(let l in i){let Z=i[l];"scope"===l&&Array.isArray(Z)?Z=Z.join(" "):"credentials.client_id"===l?l="client_id":"credentials.client_secret"===l&&(l="client_secret"),b[l]=Z}const G=[];for(const l in b){const Z=encodeURIComponent(l),d=encodeURIComponent(b[l]);G.push(`${Z}=${d}`)}const I={body:G.join("&"),credentials:"include",headers:{"Content-Type":"application/x-www-form-urlencoded",authorization:`Bearer ${l}`},method:"POST",mode:"cors"};try{const l=yield fetch(null!==(d=null==c?void 0:c.stsTokenEndpoint)&&void 0!==d?d:"",I);if(!l.ok)throw new R("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE01","Invalid exchanging token response","Token exchange grant has been failed");const Z=yield l.json();(null==Z?void 0:Z.access_token)&&(yield this._dataLayer.setCustomData(Ib.SessionData,Z))}catch(l){throw new R("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE02","Error in exchanging token","Token exchange grant has been failed")}}))}refreshStsAccessToken(){var Z,d,c,b,i,G,I,m,X;return l(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getConfigData(),a=yield this._dataLayer.getCustomData(Ib.SessionData);if(!(null==a?void 0:a.refresh_token))throw new R("TOKEN_EXCHANGE-AUTH_HELPER-RSAT1-NF01","Refresh token not found","STS is not configured to return refresh token");if(!(null===(d=null===(Z=null==l?void 0:l.stsConfig)||void 0===Z?void 0:Z.credentials)||void 0===d?void 0:d.client_id)||!(null===(b=null===(c=null==l?void 0:l.stsConfig)||void 0===c?void 0:c.credentials)||void 0===b?void 0:b.client_secret))throw new R("TOKEN_EXCHANGE-AUTH_HELPER-RSAT2-NF02","Client credentials not found","Client credentials are not configured");const V=btoa(`${null===(G=null===(i=null==l?void 0:l.stsConfig)||void 0===i?void 0:i.credentials)||void 0===G?void 0:G.client_id}:${null===(m=null===(I=null==l?void 0:l.stsConfig)||void 0===I?void 0:I.credentials)||void 0===m?void 0:m.client_secret}`),t={body:`grant_type=refresh_token&refresh_token=${a.refresh_token}`,credentials:"include",headers:{"Content-Type":"application/x-www-form-urlencoded",authorization:`Basic ${V.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}`},method:"POST",mode:"cors"};try{const Z=yield fetch(null!==(X=null==l?void 0:l.stsTokenEndpoint)&&void 0!==X?X:"",t);if(!Z.ok)throw new R("TOKEN_EXCHANGE-AUTH_HELPER-RSAT3-NE01","Invalid refresh token response","STS token refreshing has been failed");const d=yield Z.json();(null==d?void 0:d.access_token)&&(yield this._dataLayer.setCustomData(Ib.SessionData,d))}catch(l){throw new R("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE02","Error in refreshing token","STS token refreshing has been failed")}}))}requestAccessToken(Z,d,c,b,i){const G=Object.create(null,{requestAccessToken:{get:()=>super.requestAccessToken}});var I,m;return l(this,void 0,void 0,(function*(){try{const l=yield G.requestAccessToken.call(this,Z,d,c,b,i);return yield this.exchangeAccessToken(),l}catch(l){return Promise.reject(new R("TOKEN_EXCHANGE-AUTH_HELPER-RAT3-NF01",null!==(I=null==l?void 0:l.name)&&void 0!==I?I:"Failed requesting access token.",null!==(m=null==l?void 0:l.message)&&void 0!==m?m:"Failed retrieving user info."))}}))}getAccessToken(){return l(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getCustomData(Ib.SessionData);return null==l?void 0:l.access_token}))}refreshAccessToken(Z){const d=Object.create(null,{refreshAccessToken:{get:()=>super.refreshAccessToken}});return l(this,void 0,void 0,(function*(){let l={};try{this.refreshStsAccessToken()}catch(c){l=yield d.refreshAccessToken.call(this,Z),yield this.exchangeAccessToken()}return this.refreshAccessTokenAutomatically(),l}))}refreshAccessTokenAutomatically(){return l(this,void 0,void 0,(function*(){const Z=yield this._dataLayer.getCustomData(Ib.SessionData);if(null==Z?void 0:Z.expires_in){const d=parseInt(Z.expires_in);setTimeout((()=>l(this,void 0,void 0,(function*(){yield this.refreshAccessToken()}))),1e3*(d<=10?d:d-10))}}))}getDecodedIDToken(){const Z=Object.create(null,{getCryptoHelper:{get:()=>super.getCryptoHelper}});return l(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getSessionData(),d=null==l?void 0:l.id_token;if(!d)return Promise.reject(new R("TOKEN_EXCHANGE-AUTH_HELPER-GDIT-NF01","Failed requesting access token.","Failed retrieving user info."));return(yield Z.getCryptoHelper.call(this)).decodeIDToken(d)}))}}class Xb extends fc{static getInstance(l){var Z,d;return l&&(null===(Z=Xb._instances)||void 0===Z?void 0:Z.get(l))?this._instances.get(l):!l&&(null===(d=this._instances)||void 0===d?void 0:d.get("primaryInstance"))?this._instances.get("primaryInstance"):l?(this._instances.set(l,new Xb(l)),this._instances.get(l)):(this._instances.set("primaryInstance",new Xb("primaryInstance")),this._instances.get("primaryInstance"))}initialize(Z){const d=Object.create(null,{initialize:{get:()=>super.initialize}});return l(this,void 0,void 0,(function*(){const l=mb;return yield d.initialize.call(this,Z,l,Zb)}))}getIDPAccessToken(){const Z=Object.create(null,{getDataLayer:{get:()=>super.getDataLayer}});var d;return l(this,void 0,void 0,(function*(){const l=yield Z.getDataLayer.call(this);return null===(d=yield l.getSessionData())||void 0===d?void 0:d.access_token}))}}export{h as AUTHORIZATION_CODE,U as AsgardeoAuthClient,R as AsgardeoAuthException,fc as AsgardeoSPAClient,k as AuthenticationHelper,Y as AuthenticationUtils,u as CLAIM_VALIDATION_ERROR,m as CLIENT_ID_TAG,X as CLIENT_SECRET_TAG,K as CryptoHelper,J as DataLayer,B as Hooks,Mc as MainThreadClient,n as NBF_CLAIM,y as OIDC_SCOPE,t as PKCE_CODE_VERIFIER,W as PKCE_SEPARATOR,V as REFRESH_TOKEN_TIMER,Z as ResponseMode,I as SCOPE_TAG,e as SESSION_STATE,p as SIGN_OUT_SUCCESS_PARAM,g as SIGN_OUT_URL,z as SPAHelper,x as SPAUtils,s as STATE,o as SUPPORTED_SIGNATURE_ALGORITHMS,r as Storage,a as Stores,i as TOKEN_TAG,Xb as TokenExchangePlugin,G as USERNAME_TAG,Ec as WebWorkerClass,Pc as WebWorkerClient,Dc as workerReceiver};
//# sourceMappingURL=token-exchange.production.esm.js.map
