/**
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { AsgardeoAuthClient, AuthenticationHelper, BasicUserInfo, DecodedIDTokenPayload, MainThreadClientConfig, SPACustomGrantConfig, SPAHelper, WebWorkerClientConfig } from "@asgardeo/auth-spa";
export interface StsExchangeResponse {
    access_token: string;
    refresh_token: string;
    expires_in: string;
    issued_token_type: string;
    scope: string;
    token_type: string;
    id_token: string;
}
export interface TokenExchangeConfig {
    grant_type: string;
    subject_token: string;
    subject_token_type: string;
    scope?: string;
    requested_token_type?: string;
    client_id?: string;
    resource?: string;
    audience?: string;
    actor_token?: string;
    actor_token_type?: string;
    [x: string]: any;
}
export declare class TokenExchangeAuthenticationHelper<T extends MainThreadClientConfig | WebWorkerClientConfig> extends AuthenticationHelper<T> {
    constructor(authClient: AsgardeoAuthClient<T>, spaHelper: SPAHelper<T>);
    exchangeAccessToken(): Promise<void>;
    refreshStsAccessToken(): Promise<void>;
    requestAccessToken(authorizationCode?: string, sessionState?: string, checkSession?: () => Promise<void>, pkce?: string, state?: string): Promise<BasicUserInfo>;
    getAccessToken(): Promise<string>;
    refreshAccessToken(enableRetrievingSignOutURLFromSession?: (config: SPACustomGrantConfig) => void): Promise<BasicUserInfo>;
    refreshAccessTokenAutomatically(): Promise<void>;
    getDecodedIDToken(): Promise<DecodedIDTokenPayload>;
}
//# sourceMappingURL=authentication-helper.d.ts.map