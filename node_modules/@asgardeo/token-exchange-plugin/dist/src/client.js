/**
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AsgardeoSPAClient } from "@asgardeo/auth-spa";
import WorkerFile from "web-worker:./worker.ts";
import { TokenExchangeAuthenticationHelper } from "./helpers/authentication-helper";
const PRIMARY_INSTANCE = "primaryInstance";
/**
 * This class provides the methods to implement token exchange grant in a Single Page Application.
 *
 * @export
 * @class TokenExchangePlugin
 */
export class TokenExchangePlugin extends AsgardeoSPAClient {
    static getInstance(id) {
        var _a, _b;
        if (id && ((_a = TokenExchangePlugin._instances) === null || _a === void 0 ? void 0 : _a.get(id))) {
            return this._instances.get(id);
        }
        else if (!id && ((_b = this._instances) === null || _b === void 0 ? void 0 : _b.get(PRIMARY_INSTANCE))) {
            return this._instances.get(PRIMARY_INSTANCE);
        }
        if (id) {
            this._instances.set(id, new TokenExchangePlugin(id));
            return this._instances.get(id);
        }
        this._instances.set(PRIMARY_INSTANCE, new TokenExchangePlugin(PRIMARY_INSTANCE));
        return this._instances.get(PRIMARY_INSTANCE);
    }
    initialize(config) {
        const _super = Object.create(null, {
            initialize: { get: () => super.initialize }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const authHelper = TokenExchangeAuthenticationHelper;
            return yield _super.initialize.call(this, config, authHelper, WorkerFile);
        });
    }
    getIDPAccessToken() {
        const _super = Object.create(null, {
            getDataLayer: { get: () => super.getDataLayer }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const dataLayer = yield _super.getDataLayer.call(this);
            return (_a = (yield dataLayer.getSessionData())) === null || _a === void 0 ? void 0 : _a.access_token;
        });
    }
}
//# sourceMappingURL=client.js.map