var l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},d=function(l){return l&&l.Math==Math&&l},Z=d("object"==typeof globalThis&&globalThis)||d("object"==typeof window&&window)||d("object"==typeof self&&self)||d("object"==typeof l&&l)||function(){return this}()||Function("return this")(),c=Z,i=function(l){try{return!!l()}catch(l){return!0}},b=!i((function(){var l=function(){}.bind();return"function"!=typeof l||l.hasOwnProperty("prototype")})),t=b,G=Function.prototype,I=G.bind,m=G.call,n=t&&I.bind(m,m),a=t?function(l){return l&&n(l)}:function(l){return l&&function(){return m.apply(l,arguments)}},o=TypeError,e=function(l){if(null==l)throw o("Can't call method on "+l);return l},X=e,u=Object,V=function(l){return u(X(l))},W=V,h=a({}.hasOwnProperty),p=Object.hasOwn||function(l,d){return h(W(l),d)},g={},s={exports:{}},y=Z,C=Object.defineProperty,R=function(l,d){try{C(y,l,{value:d,configurable:!0,writable:!0})}catch(Z){y[l]=d}return d},Y=R,S=Z["__core-js_shared__"]||Y("__core-js_shared__",{}),r=S;(s.exports=function(l,d){return r[l]||(r[l]=void 0!==d?d:{})})("versions",[]).push({version:"3.23.3",mode:"global",copyright:"Â© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.23.3/LICENSE",source:"https://github.com/zloirock/core-js"});var K,N,J=a,H=0,L=Math.random(),U=J(1..toString),v=function(l){return"Symbol("+(void 0===l?"":l)+")_"+U(++H+L,36)},F=function(l){return"function"==typeof l},k=Z,B=F,z=function(l){return B(l)?l:void 0},T=function(l,d){return arguments.length<2?z(k[l]):k[l]&&k[l][d]},A=T("navigator","userAgent")||"",x=Z,Q=A,f=x.process,w=x.Deno,j=f&&f.versions||w&&w.version,M=j&&j.v8;M&&(N=(K=M.split("."))[0]>0&&K[0]<4?1:+(K[0]+K[1])),!N&&Q&&(!(K=Q.match(/Edge\/(\d+)/))||K[1]>=74)&&(K=Q.match(/Chrome\/(\d+)/))&&(N=+K[1]);var P=N,E=P,D=i,O=!!Object.getOwnPropertySymbols&&!D((function(){var l=Symbol();return!String(l)||!(Object(l)instanceof Symbol)||!Symbol.sham&&E&&E<41})),q=O&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,_=Z,$=s.exports,ll=p,dl=v,Zl=O,cl=q,il=$("wks"),bl=_.Symbol,tl=bl&&bl.for,Gl=cl?bl:bl&&bl.withoutSetter||dl,Il=function(l){if(!ll(il,l)||!Zl&&"string"!=typeof il[l]){var d="Symbol."+l;Zl&&ll(bl,l)?il[l]=bl[l]:il[l]=cl&&tl?tl(d):Gl(d)}return il[l]},ml=Il;g.f=ml;var nl={},al=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),ol=F,el=function(l){return"object"==typeof l?null!==l:ol(l)},Xl=el,ul=Z.document,Vl=Xl(ul)&&Xl(ul.createElement),Wl=function(l){return Vl?ul.createElement(l):{}},hl=Wl,pl=!al&&!i((function(){return 7!=Object.defineProperty(hl("div"),"a",{get:function(){return 7}}).a})),gl=al&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),sl=el,yl=String,Cl=TypeError,Rl=function(l){if(sl(l))return l;throw Cl(yl(l)+" is not an object")},Yl=b,Sl=Function.prototype.call,rl=Yl?Sl.bind(Sl):function(){return Sl.apply(Sl,arguments)},Kl=a({}.isPrototypeOf),Nl=T,Jl=F,Hl=Kl,Ll=Object,Ul=q?function(l){return"symbol"==typeof l}:function(l){var d=Nl("Symbol");return Jl(d)&&Hl(d.prototype,Ll(l))},vl=String,Fl=function(l){try{return vl(l)}catch(l){return"Object"}},kl=F,Bl=Fl,zl=TypeError,Tl=function(l){if(kl(l))return l;throw zl(Bl(l)+" is not a function")},Al=Tl,xl=function(l,d){var Z=l[d];return null==Z?void 0:Al(Z)},Ql=rl,fl=F,wl=el,jl=TypeError,Ml=rl,Pl=el,El=Ul,Dl=xl,Ol=function(l,d){var Z,c;if("string"===d&&fl(Z=l.toString)&&!wl(c=Ql(Z,l)))return c;if(fl(Z=l.valueOf)&&!wl(c=Ql(Z,l)))return c;if("string"!==d&&fl(Z=l.toString)&&!wl(c=Ql(Z,l)))return c;throw jl("Can't convert object to primitive value")},ql=TypeError,_l=Il("toPrimitive"),$l=function(l,d){if(!Pl(l)||El(l))return l;var Z,c=Dl(l,_l);if(c){if(void 0===d&&(d="default"),Z=Ml(c,l,d),!Pl(Z)||El(Z))return Z;throw ql("Can't convert object to primitive value")}return void 0===d&&(d="number"),Ol(l,d)},ld=$l,dd=Ul,Zd=function(l){var d=ld(l,"string");return dd(d)?d:d+""},cd=al,id=pl,bd=gl,td=Rl,Gd=Zd,Id=TypeError,md=Object.defineProperty,nd=Object.getOwnPropertyDescriptor;nl.f=cd?bd?function(l,d,Z){if(td(l),d=Gd(d),td(Z),"function"==typeof l&&"prototype"===d&&"value"in Z&&"writable"in Z&&!Z.writable){var c=nd(l,d);c&&c.writable&&(l[d]=Z.value,Z={configurable:"configurable"in Z?Z.configurable:c.configurable,enumerable:"enumerable"in Z?Z.enumerable:c.enumerable,writable:!1})}return md(l,d,Z)}:md:function(l,d,Z){if(td(l),d=Gd(d),td(Z),id)try{return md(l,d,Z)}catch(l){}if("get"in Z||"set"in Z)throw Id("Accessors not supported");return"value"in Z&&(l[d]=Z.value),l};var ad=c,od=p,ed=g,Xd=nl.f,ud=function(l){var d=ad.Symbol||(ad.Symbol={});od(d,l)||Xd(d,l,{value:ed.f(l)})};ud("matchAll");var Vd={},Wd={},hd={}.propertyIsEnumerable,pd=Object.getOwnPropertyDescriptor,gd=pd&&!hd.call({1:2},1);Wd.f=gd?function(l){var d=pd(this,l);return!!d&&d.enumerable}:hd;var sd=function(l,d){return{enumerable:!(1&l),configurable:!(2&l),writable:!(4&l),value:d}},yd=a,Cd=yd({}.toString),Rd=yd("".slice),Yd=function(l){return Rd(Cd(l),8,-1)},Sd=i,rd=Yd,Kd=Object,Nd=a("".split),Jd=Sd((function(){return!Kd("z").propertyIsEnumerable(0)}))?function(l){return"String"==rd(l)?Nd(l,""):Kd(l)}:Kd,Hd=Jd,Ld=e,Ud=function(l){return Hd(Ld(l))},vd=al,Fd=rl,kd=Wd,Bd=sd,zd=Ud,Td=Zd,Ad=p,xd=pl,Qd=Object.getOwnPropertyDescriptor;Vd.f=vd?Qd:function(l,d){if(l=zd(l),d=Td(d),xd)try{return Qd(l,d)}catch(l){}if(Ad(l,d))return Bd(!Fd(kd.f,l,d),l[d])};var fd=nl,wd=sd,jd=al?function(l,d,Z){return fd.f(l,d,wd(1,Z))}:function(l,d,Z){return l[d]=Z,l},Md={exports:{}},Pd=al,Ed=p,Dd=Function.prototype,Od=Pd&&Object.getOwnPropertyDescriptor,qd=Ed(Dd,"name"),_d={EXISTS:qd,PROPER:qd&&"something"===function(){}.name,CONFIGURABLE:qd&&(!Pd||Pd&&Od(Dd,"name").configurable)},$d=F,lZ=S,dZ=a(Function.toString);$d(lZ.inspectSource)||(lZ.inspectSource=function(l){return dZ(l)});var ZZ,cZ,iZ,bZ=lZ.inspectSource,tZ=F,GZ=bZ,IZ=Z.WeakMap,mZ=tZ(IZ)&&/native code/.test(GZ(IZ)),nZ=s.exports,aZ=v,oZ=nZ("keys"),eZ=function(l){return oZ[l]||(oZ[l]=aZ(l))},XZ={},uZ=mZ,VZ=Z,WZ=a,hZ=el,pZ=jd,gZ=p,sZ=S,yZ=eZ,CZ=XZ,RZ=VZ.TypeError,YZ=VZ.WeakMap;if(uZ||sZ.state){var SZ=sZ.state||(sZ.state=new YZ),rZ=WZ(SZ.get),KZ=WZ(SZ.has),NZ=WZ(SZ.set);ZZ=function(l,d){if(KZ(SZ,l))throw new RZ("Object already initialized");return d.facade=l,NZ(SZ,l,d),d},cZ=function(l){return rZ(SZ,l)||{}},iZ=function(l){return KZ(SZ,l)}}else{var JZ=yZ("state");CZ[JZ]=!0,ZZ=function(l,d){if(gZ(l,JZ))throw new RZ("Object already initialized");return d.facade=l,pZ(l,JZ,d),d},cZ=function(l){return gZ(l,JZ)?l[JZ]:{}},iZ=function(l){return gZ(l,JZ)}}var HZ={set:ZZ,get:cZ,has:iZ,enforce:function(l){return iZ(l)?cZ(l):ZZ(l,{})},getterFor:function(l){return function(d){var Z;if(!hZ(d)||(Z=cZ(d)).type!==l)throw RZ("Incompatible receiver, "+l+" required");return Z}}},LZ=i,UZ=F,vZ=p,FZ=al,kZ=_d.CONFIGURABLE,BZ=bZ,zZ=HZ.enforce,TZ=HZ.get,AZ=Object.defineProperty,xZ=FZ&&!LZ((function(){return 8!==AZ((function(){}),"length",{value:8}).length})),QZ=String(String).split("String"),fZ=Md.exports=function(l,d,Z){"Symbol("===String(d).slice(0,7)&&(d="["+String(d).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),Z&&Z.getter&&(d="get "+d),Z&&Z.setter&&(d="set "+d),(!vZ(l,"name")||kZ&&l.name!==d)&&(FZ?AZ(l,"name",{value:d,configurable:!0}):l.name=d),xZ&&Z&&vZ(Z,"arity")&&l.length!==Z.arity&&AZ(l,"length",{value:Z.arity});try{Z&&vZ(Z,"constructor")&&Z.constructor?FZ&&AZ(l,"prototype",{writable:!1}):l.prototype&&(l.prototype=void 0)}catch(l){}var c=zZ(l);return vZ(c,"source")||(c.source=QZ.join("string"==typeof d?d:"")),l};Function.prototype.toString=fZ((function(){return UZ(this)&&TZ(this).source||BZ(this)}),"toString");var wZ=F,jZ=nl,MZ=Md.exports,PZ=R,EZ=function(l,d,Z,c){c||(c={});var i=c.enumerable,b=void 0!==c.name?c.name:d;if(wZ(Z)&&MZ(Z,b,c),c.global)i?l[d]=Z:PZ(d,Z);else{try{c.unsafe?l[d]&&(i=!0):delete l[d]}catch(l){}i?l[d]=Z:jZ.f(l,d,{value:Z,enumerable:!1,configurable:!c.nonConfigurable,writable:!c.nonWritable})}return l},DZ={},OZ=Math.ceil,qZ=Math.floor,_Z=Math.trunc||function(l){var d=+l;return(d>0?qZ:OZ)(d)},$Z=_Z,lc=function(l){var d=+l;return d!=d||0===d?0:$Z(d)},dc=lc,Zc=Math.max,cc=Math.min,ic=function(l,d){var Z=dc(l);return Z<0?Zc(Z+d,0):cc(Z,d)},bc=lc,tc=Math.min,Gc=function(l){return l>0?tc(bc(l),9007199254740991):0},Ic=Gc,mc=function(l){return Ic(l.length)},nc=Ud,ac=ic,oc=mc,ec=function(l){return function(d,Z,c){var i,b=nc(d),t=oc(b),G=ac(c,t);if(l&&Z!=Z){for(;t>G;)if((i=b[G++])!=i)return!0}else for(;t>G;G++)if((l||G in b)&&b[G]===Z)return l||G||0;return!l&&-1}},Xc={includes:ec(!0),indexOf:ec(!1)},uc=p,Vc=Ud,Wc=Xc.indexOf,hc=XZ,pc=a([].push),gc=function(l,d){var Z,c=Vc(l),i=0,b=[];for(Z in c)!uc(hc,Z)&&uc(c,Z)&&pc(b,Z);for(;d.length>i;)uc(c,Z=d[i++])&&(~Wc(b,Z)||pc(b,Z));return b},sc=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],yc=gc,Cc=sc.concat("length","prototype");DZ.f=Object.getOwnPropertyNames||function(l){return yc(l,Cc)};var Rc={};Rc.f=Object.getOwnPropertySymbols;var Yc=T,Sc=DZ,rc=Rc,Kc=Rl,Nc=a([].concat),Jc=Yc("Reflect","ownKeys")||function(l){var d=Sc.f(Kc(l)),Z=rc.f;return Z?Nc(d,Z(l)):d},Hc=p,Lc=Jc,Uc=Vd,vc=nl,Fc=i,kc=F,Bc=/#|\.prototype\./,zc=function(l,d){var Z=Ac[Tc(l)];return Z==Qc||Z!=xc&&(kc(d)?Fc(d):!!d)},Tc=zc.normalize=function(l){return String(l).replace(Bc,".").toLowerCase()},Ac=zc.data={},xc=zc.NATIVE="N",Qc=zc.POLYFILL="P",fc=zc,wc=Z,jc=Vd.f,Mc=jd,Pc=EZ,Ec=R,Dc=function(l,d,Z){for(var c=Lc(d),i=vc.f,b=Uc.f,t=0;t<c.length;t++){var G=c[t];Hc(l,G)||Z&&Hc(Z,G)||i(l,G,b(d,G))}},Oc=fc,qc=function(l,d){var Z,c,i,b,t,G=l.target,I=l.global,m=l.stat;if(Z=I?wc:m?wc[G]||Ec(G,{}):(wc[G]||{}).prototype)for(c in d){if(b=d[c],i=l.dontCallGetSet?(t=jc(Z,c))&&t.value:Z[c],!Oc(I?c:G+(m?".":"#")+c,l.forced)&&void 0!==i){if(typeof b==typeof i)continue;Dc(b,i)}(l.sham||i&&i.sham)&&Mc(b,"sham",!0),Pc(Z,c,b,l)}},_c={},$c=gc,li=sc,di=Object.keys||function(l){return $c(l,li)},Zi=al,ci=gl,ii=nl,bi=Rl,ti=Ud,Gi=di;_c.f=Zi&&!ci?Object.defineProperties:function(l,d){bi(l);for(var Z,c=ti(d),i=Gi(d),b=i.length,t=0;b>t;)ii.f(l,Z=i[t++],c[Z]);return l};var Ii,mi=T("document","documentElement"),ni=Rl,ai=_c,oi=sc,ei=XZ,Xi=mi,ui=Wl,Vi=eZ("IE_PROTO"),Wi=function(){},hi=function(l){return"<script>"+l+"<\/script>"},pi=function(l){l.write(hi("")),l.close();var d=l.parentWindow.Object;return l=null,d},gi=function(){try{Ii=new ActiveXObject("htmlfile")}catch(l){}var l,d;gi="undefined"!=typeof document?document.domain&&Ii?pi(Ii):((d=ui("iframe")).style.display="none",Xi.appendChild(d),d.src=String("javascript:"),(l=d.contentWindow.document).open(),l.write(hi("document.F=Object")),l.close(),l.F):pi(Ii);for(var Z=oi.length;Z--;)delete gi.prototype[oi[Z]];return gi()};ei[Vi]=!0;var si=Object.create||function(l,d){var Z;return null!==l?(Wi.prototype=ni(l),Z=new Wi,Wi.prototype=null,Z[Vi]=l):Z=gi(),void 0===d?Z:ai.f(Z,d)},yi=Il,Ci=si,Ri=nl.f,Yi=yi("unscopables"),Si=Array.prototype;null==Si[Yi]&&Ri(Si,Yi,{configurable:!0,value:Ci(null)});var ri=function(l){Si[Yi][l]=!0},Ki=Xc.includes,Ni=ri;qc({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(l){return Ki(this,l,arguments.length>1?arguments[1]:void 0)}}),Ni("includes"),ri("flat"),ri("flatMap");var Ji={},Hi=Tl,Li=function(l){var d,Z;this.promise=new l((function(l,c){if(void 0!==d||void 0!==Z)throw TypeError("Bad Promise constructor");d=l,Z=c})),this.resolve=Hi(d),this.reject=Hi(Z)};Ji.f=function(l){return new Li(l)};var Ui=Tl,vi=b,Fi=a(a.bind),ki=function(l,d){return Ui(l),void 0===d?l:vi?Fi(l,d):function(){return l.apply(d,arguments)}},Bi={},zi=Bi,Ti=Il("iterator"),Ai=Array.prototype,xi=function(l){return void 0!==l&&(zi.Array===l||Ai[Ti]===l)},Qi={};Qi[Il("toStringTag")]="z";var fi="[object z]"===String(Qi),wi=F,ji=Yd,Mi=Il("toStringTag"),Pi=Object,Ei="Arguments"==ji(function(){return arguments}()),Di=fi?ji:function(l){var d,Z,c;return void 0===l?"Undefined":null===l?"Null":"string"==typeof(Z=function(l,d){try{return l[d]}catch(l){}}(d=Pi(l),Mi))?Z:Ei?ji(d):"Object"==(c=ji(d))&&wi(d.callee)?"Arguments":c},Oi=Di,qi=xl,_i=Bi,$i=Il("iterator"),lb=function(l){if(null!=l)return qi(l,$i)||qi(l,"@@iterator")||_i[Oi(l)]},db=rl,Zb=Tl,cb=Rl,ib=Fl,bb=lb,tb=TypeError,Gb=function(l,d){var Z=arguments.length<2?bb(l):d;if(Zb(Z))return cb(db(Z,l));throw tb(ib(l)+" is not iterable")},Ib=rl,mb=Rl,nb=xl,ab=function(l,d,Z){var c,i;mb(l);try{if(!(c=nb(l,"return"))){if("throw"===d)throw Z;return Z}c=Ib(c,l)}catch(l){i=!0,c=l}if("throw"===d)throw Z;if(i)throw c;return mb(c),Z},ob=ki,eb=rl,Xb=Rl,ub=Fl,Vb=xi,Wb=mc,hb=Kl,pb=Gb,gb=lb,sb=ab,yb=TypeError,Cb=function(l,d){this.stopped=l,this.result=d},Rb=Cb.prototype,Yb=rl,Sb=Tl,rb=Ji,Kb=function(l){try{return{error:!1,value:l()}}catch(l){return{error:!0,value:l}}},Nb=function(l,d,Z){var c,i,b,t,G,I,m,n=Z&&Z.that,a=!(!Z||!Z.AS_ENTRIES),o=!(!Z||!Z.IS_ITERATOR),e=!(!Z||!Z.INTERRUPTED),X=ob(d,n),u=function(l){return c&&sb(c,"normal",l),new Cb(!0,l)},V=function(l){return a?(Xb(l),e?X(l[0],l[1],u):X(l[0],l[1])):e?X(l,u):X(l)};if(o)c=l;else{if(!(i=gb(l)))throw yb(ub(l)+" is not iterable");if(Vb(i)){for(b=0,t=Wb(l);t>b;b++)if((G=V(l[b]))&&hb(Rb,G))return G;return new Cb(!1)}c=pb(l,i)}for(I=c.next;!(m=eb(I,c)).done;){try{G=V(m.value)}catch(l){sb(c,"throw",l)}if("object"==typeof G&&G&&hb(Rb,G))return G}return new Cb(!1)};qc({target:"Promise",stat:!0},{allSettled:function(l){var d=this,Z=rb.f(d),c=Z.resolve,i=Z.reject,b=Kb((function(){var Z=Sb(d.resolve),i=[],b=0,t=1;Nb(l,(function(l){var G=b++,I=!1;t++,Yb(Z,d,l).then((function(l){I||(I=!0,i[G]={status:"fulfilled",value:l},--t||c(i))}),(function(l){I||(I=!0,i[G]={status:"rejected",reason:l},--t||c(i))}))})),--t||c(i)}));return b.error&&i(b.value),Z.promise}});var Jb=Z.Promise,Hb=a,Lb=i,Ub=F,vb=Di,Fb=bZ,kb=function(){},Bb=[],zb=T("Reflect","construct"),Tb=/^\s*(?:class|function)\b/,Ab=Hb(Tb.exec),xb=!Tb.exec(kb),Qb=function(l){if(!Ub(l))return!1;try{return zb(kb,Bb,l),!0}catch(l){return!1}},fb=function(l){if(!Ub(l))return!1;switch(vb(l)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return xb||!!Ab(Tb,Fb(l))}catch(l){return!0}};fb.sham=!0;var wb=!zb||Lb((function(){var l;return Qb(Qb.call)||!Qb(Object)||!Qb((function(){l=!0}))||l}))?fb:Qb,jb=wb,Mb=Fl,Pb=TypeError,Eb=function(l){if(jb(l))return l;throw Pb(Mb(l)+" is not a constructor")},Db=Rl,Ob=Eb,qb=Il("species"),_b=function(l,d){var Z,c=Db(l).constructor;return void 0===c||null==(Z=Db(c)[qb])?d:Ob(Z)},$b=Rl,lt=el,dt=Ji,Zt=qc,ct=Jb,it=i,bt=T,tt=F,Gt=_b,It=function(l,d){if($b(l),lt(d)&&d.constructor===l)return d;var Z=dt.f(l);return(0,Z.resolve)(d),Z.promise},mt=EZ,nt=ct&&ct.prototype;if(Zt({target:"Promise",proto:!0,real:!0,forced:!!ct&&it((function(){nt.finally.call({then:function(){}},(function(){}))}))},{finally:function(l){var d=Gt(this,bt("Promise")),Z=tt(l);return this.then(Z?function(Z){return It(d,l()).then((function(){return Z}))}:l,Z?function(Z){return It(d,l()).then((function(){throw Z}))}:l)}}),tt(ct)){var at=bt("Promise").prototype.finally;nt.finally!==at&&mt(nt,"finally",at,{unsafe:!0})}var ot=Md.exports,et=nl,Xt=function(l,d,Z){return Z.get&&ot(Z.get,d,{getter:!0}),Z.set&&ot(Z.set,d,{setter:!0}),et.f(l,d,Z)},ut=Rl,Vt=function(){var l=ut(this),d="";return l.hasIndices&&(d+="d"),l.global&&(d+="g"),l.ignoreCase&&(d+="i"),l.multiline&&(d+="m"),l.dotAll&&(d+="s"),l.unicode&&(d+="u"),l.unicodeSets&&(d+="v"),l.sticky&&(d+="y"),d},Wt=al,ht=Xt,pt=Vt,gt=i,st=Z.RegExp,yt=st.prototype,Ct=Wt&&gt((function(){var l=!0;try{st(".","d")}catch(d){l=!1}var d={},Z="",c=l?"dgimsy":"gimsy",i=function(l,c){Object.defineProperty(d,l,{get:function(){return Z+=c,!0}})},b={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var t in l&&(b.hasIndices="d"),b)i(t,b[t]);return Object.getOwnPropertyDescriptor(yt,"flags").get.call(d)!==c||Z!==c}));Ct&&ht(yt,"flags",{configurable:!0,get:pt});var Rt,Yt,St,rt=!i((function(){function l(){}return l.prototype.constructor=null,Object.getPrototypeOf(new l)!==l.prototype})),Kt=p,Nt=F,Jt=V,Ht=rt,Lt=eZ("IE_PROTO"),Ut=Object,vt=Ut.prototype,Ft=Ht?Ut.getPrototypeOf:function(l){var d=Jt(l);if(Kt(d,Lt))return d[Lt];var Z=d.constructor;return Nt(Z)&&d instanceof Z?Z.prototype:d instanceof Ut?vt:null},kt=i,Bt=F,zt=Ft,Tt=EZ,At=Il("iterator"),xt=!1;[].keys&&("next"in(St=[].keys())?(Yt=zt(zt(St)))!==Object.prototype&&(Rt=Yt):xt=!0);var Qt=null==Rt||kt((function(){var l={};return Rt[At].call(l)!==l}));Qt&&(Rt={}),Bt(Rt[At])||Tt(Rt,At,(function(){return this}));var ft,wt,jt={IteratorPrototype:Rt,BUGGY_SAFARI_ITERATORS:xt},Mt=nl.f,Pt=p,Et=Il("toStringTag"),Dt=function(l,d,Z){l&&!Z&&(l=l.prototype),l&&!Pt(l,Et)&&Mt(l,Et,{configurable:!0,value:d})},Ot=jt.IteratorPrototype,qt=si,_t=sd,$t=Dt,lG=Bi,dG=function(){return this},ZG=function(l,d,Z,c){var i=d+" Iterator";return l.prototype=qt(Ot,{next:_t(+!c,Z)}),$t(l,i,!1),lG[i]=dG,l},cG=Di,iG=String,bG=function(l){if("Symbol"===cG(l))throw TypeError("Cannot convert a Symbol value to a string");return iG(l)},tG=el,GG=Yd,IG=Il("match"),mG=rl,nG=p,aG=Kl,oG=Vt,eG=RegExp.prototype,XG=a,uG=lc,VG=bG,WG=e,hG=XG("".charAt),pG=XG("".charCodeAt),gG=XG("".slice),sG=function(l){return function(d,Z){var c,i,b=VG(WG(d)),t=uG(Z),G=b.length;return t<0||t>=G?l?"":void 0:(c=pG(b,t))<55296||c>56319||t+1===G||(i=pG(b,t+1))<56320||i>57343?l?hG(b,t):c:l?gG(b,t,t+2):i-56320+(c-55296<<10)+65536}},yG={codeAt:sG(!1),charAt:sG(!0)},CG=yG.charAt,RG=function(l,d,Z){return d+(Z?CG(l,d).length:1)},YG=i,SG=Z.RegExp,rG=YG((function(){var l=SG("a","y");return l.lastIndex=2,null!=l.exec("abcd")})),KG=rG||YG((function(){return!SG("a","y").sticky})),NG=rG||YG((function(){var l=SG("^r","gy");return l.lastIndex=2,null!=l.exec("str")})),JG={BROKEN_CARET:NG,MISSED_STICKY:KG,UNSUPPORTED_Y:rG},HG=i,LG=Z.RegExp,UG=HG((function(){var l=LG(".","s");return!(l.dotAll&&l.exec("\n")&&"s"===l.flags)})),vG=i,FG=Z.RegExp,kG=vG((function(){var l=FG("(?<a>b)","g");return"b"!==l.exec("b").groups.a||"bc"!=="b".replace(l,"$<a>c")})),BG=rl,zG=a,TG=bG,AG=Vt,xG=JG,QG=s.exports,fG=si,wG=HZ.get,jG=UG,MG=kG,PG=QG("native-string-replace",String.prototype.replace),EG=RegExp.prototype.exec,DG=EG,OG=zG("".charAt),qG=zG("".indexOf),_G=zG("".replace),$G=zG("".slice),lI=(wt=/b*/g,BG(EG,ft=/a/,"a"),BG(EG,wt,"a"),0!==ft.lastIndex||0!==wt.lastIndex),dI=xG.BROKEN_CARET,ZI=void 0!==/()??/.exec("")[1];(lI||ZI||dI||jG||MG)&&(DG=function(l){var d,Z,c,i,b,t,G,I=this,m=wG(I),n=TG(l),a=m.raw;if(a)return a.lastIndex=I.lastIndex,d=BG(DG,a,n),I.lastIndex=a.lastIndex,d;var o=m.groups,e=dI&&I.sticky,X=BG(AG,I),u=I.source,V=0,W=n;if(e&&(X=_G(X,"y",""),-1===qG(X,"g")&&(X+="g"),W=$G(n,I.lastIndex),I.lastIndex>0&&(!I.multiline||I.multiline&&"\n"!==OG(n,I.lastIndex-1))&&(u="(?: "+u+")",W=" "+W,V++),Z=new RegExp("^(?:"+u+")",X)),ZI&&(Z=new RegExp("^"+u+"$(?!\\s)",X)),lI&&(c=I.lastIndex),i=BG(EG,e?Z:I,W),e?i?(i.input=$G(i.input,V),i[0]=$G(i[0],V),i.index=I.lastIndex,I.lastIndex+=i[0].length):I.lastIndex=0:lI&&i&&(I.lastIndex=I.global?i.index+i[0].length:c),ZI&&i&&i.length>1&&BG(PG,i[0],Z,(function(){for(b=1;b<arguments.length-2;b++)void 0===arguments[b]&&(i[b]=void 0)})),i&&o)for(i.groups=t=fG(null),b=0;b<o.length;b++)t[(G=o[b])[0]]=i[G[1]];return i});var cI=DG,iI=rl,bI=Rl,tI=F,GI=Yd,II=cI,mI=TypeError,nI=function(l,d){var Z=l.exec;if(tI(Z)){var c=iI(Z,l,d);return null!==c&&bI(c),c}if("RegExp"===GI(l))return iI(II,l,d);throw mI("RegExp#exec called on incompatible receiver")},aI=qc,oI=rl,eI=a,XI=ZG,uI=e,VI=Gc,WI=bG,hI=Rl,pI=function(l){var d;return tG(l)&&(void 0!==(d=l[IG])?!!d:"RegExp"==GG(l))},gI=function(l){var d=l.flags;return void 0!==d||"flags"in eG||nG(l,"flags")||!aG(eG,l)?d:mG(oG,l)},sI=xl,yI=EZ,CI=i,RI=_b,YI=RG,SI=nI,rI=HZ,KI=Il("matchAll"),NI=rI.set,JI=rI.getterFor("RegExp String Iterator"),HI=RegExp.prototype,LI=TypeError,UI=eI("".indexOf),vI=eI("".matchAll),FI=!!vI&&!CI((function(){vI("a",/./)})),kI=XI((function(l,d,Z,c){NI(this,{type:"RegExp String Iterator",regexp:l,string:d,global:Z,unicode:c,done:!1})}),"RegExp String",(function(){var l=JI(this);if(l.done)return{value:void 0,done:!0};var d=l.regexp,Z=l.string,c=SI(d,Z);return null===c?{value:void 0,done:l.done=!0}:l.global?(""===WI(c[0])&&(d.lastIndex=YI(Z,VI(d.lastIndex),l.unicode)),{value:c,done:!1}):(l.done=!0,{value:c,done:!1})})),BI=function(l){var d,Z,c,i=hI(this),b=WI(l),t=RI(i,RegExp),G=WI(gI(i));return d=new t(t===RegExp?i.source:i,G),Z=!!~UI(G,"g"),c=!!~UI(G,"u"),d.lastIndex=VI(i.lastIndex),new kI(d,b,Z,c)};aI({target:"String",proto:!0,forced:FI},{matchAll:function(l){var d,Z,c,i=uI(this);if(null!=l){if(pI(l)&&(d=WI(uI(gI(l))),!~UI(d,"g")))throw LI("`.matchAll` does not allow non-global regexes");if(FI)return vI(i,l);if(c=sI(l,KI))return oI(c,l,i)}else if(FI)return vI(i,l);return Z=WI(i),new RegExp(l,"g")[KI](Z)}}),KI in HI||yI(HI,KI,BI);var zI=b,TI=Function.prototype,AI=TI.apply,xI=TI.call,QI="object"==typeof Reflect&&Reflect.apply||(zI?xI.bind(AI):function(){return xI.apply(AI,arguments)});qc({target:"RegExp",proto:!0,forced:/./.exec!==cI},{exec:cI});var fI=a,wI=EZ,jI=cI,MI=i,PI=Il,EI=jd,DI=PI("species"),OI=RegExp.prototype,qI=a,_I=V,$I=Math.floor,lm=qI("".charAt),dm=qI("".replace),Zm=qI("".slice),cm=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,im=/\$([$&'`]|\d{1,2})/g,bm=QI,tm=rl,Gm=a,Im=function(l,d,Z,c){var i=PI(l),b=!MI((function(){var d={};return d[i]=function(){return 7},7!=""[l](d)})),t=b&&!MI((function(){var d=!1,Z=/a/;return"split"===l&&((Z={}).constructor={},Z.constructor[DI]=function(){return Z},Z.flags="",Z[i]=/./[i]),Z.exec=function(){return d=!0,null},Z[i](""),!d}));if(!b||!t||Z){var G=fI(/./[i]),I=d(i,""[l],(function(l,d,Z,c,i){var t=fI(l),I=d.exec;return I===jI||I===OI.exec?b&&!i?{done:!0,value:G(d,Z,c)}:{done:!0,value:t(Z,d,c)}:{done:!1}}));wI(String.prototype,l,I[0]),wI(OI,i,I[1])}c&&EI(OI[i],"sham",!0)},mm=i,nm=Rl,am=F,om=lc,em=Gc,Xm=bG,um=e,Vm=RG,Wm=xl,hm=function(l,d,Z,c,i,b){var t=Z+l.length,G=c.length,I=im;return void 0!==i&&(i=_I(i),I=cm),dm(b,I,(function(b,I){var m;switch(lm(I,0)){case"$":return"$";case"&":return l;case"`":return Zm(d,0,Z);case"'":return Zm(d,t);case"<":m=i[Zm(I,1,-1)];break;default:var n=+I;if(0===n)return b;if(n>G){var a=$I(n/10);return 0===a?b:a<=G?void 0===c[a-1]?lm(I,1):c[a-1]+lm(I,1):b}m=c[n-1]}return void 0===m?"":m}))},pm=nI,gm=Il("replace"),sm=Math.max,ym=Math.min,Cm=Gm([].concat),Rm=Gm([].push),Ym=Gm("".indexOf),Sm=Gm("".slice),rm=function(l){return void 0===l?l:String(l)},Km="$0"==="a".replace(/./,"$0"),Nm=!!/./[gm]&&""===/./[gm]("a","$0"),Jm=!mm((function(){var l=/./;return l.exec=function(){var l=[];return l.groups={a:"7"},l},"7"!=="".replace(l,"$<a>")}));Im("replace",(function(l,d,Z){var c=Nm?"$":"$0";return[function(l,Z){var c=um(this),i=null==l?void 0:Wm(l,gm);return i?tm(i,l,c,Z):tm(d,Xm(c),l,Z)},function(l,i){var b=nm(this),t=Xm(l);if("string"==typeof i&&-1===Ym(i,c)&&-1===Ym(i,"$<")){var G=Z(d,b,t,i);if(G.done)return G.value}var I=am(i);I||(i=Xm(i));var m=b.global;if(m){var n=b.unicode;b.lastIndex=0}for(var a=[];;){var o=pm(b,t);if(null===o)break;if(Rm(a,o),!m)break;""===Xm(o[0])&&(b.lastIndex=Vm(t,em(b.lastIndex),n))}for(var e="",X=0,u=0;u<a.length;u++){for(var V=Xm((o=a[u])[0]),W=sm(ym(om(o.index),t.length),0),h=[],p=1;p<o.length;p++)Rm(h,rm(o[p]));var g=o.groups;if(I){var s=Cm([V],h,W,t);void 0!==g&&Rm(s,g);var y=Xm(bm(i,void 0,s))}else y=hm(V,t,W,h,g,i);W>=X&&(e+=Sm(t,X,W)+y,X=W+V.length)}return e+Sm(t,X)}]}),!Jm||!Km||Nm);var Hm={exports:{}},Lm=Il("iterator"),Um=!1;try{var vm=0,Fm={next:function(){return{done:!!vm++}},return:function(){Um=!0}};Fm[Lm]=function(){return this},Array.from(Fm,(function(){throw 2}))}catch(l){}var km,Bm,zm,Tm="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView,Am=F,xm=String,Qm=TypeError,fm=a,wm=Rl,jm=function(l){if("object"==typeof l||Am(l))return l;throw Qm("Can't set "+xm(l)+" as a prototype")},Mm=Object.setPrototypeOf||("__proto__"in{}?function(){var l,d=!1,Z={};try{(l=fm(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(Z,[]),d=Z instanceof Array}catch(l){}return function(Z,c){return wm(Z),jm(c),d?l(Z,c):Z.__proto__=c,Z}}():void 0),Pm=Tm,Em=al,Dm=Z,Om=F,qm=el,_m=p,$m=Di,ln=Fl,dn=jd,Zn=EZ,cn=nl.f,bn=Kl,tn=Ft,Gn=Mm,In=Il,mn=v,nn=HZ.enforce,an=HZ.get,on=Dm.Int8Array,en=on&&on.prototype,Xn=Dm.Uint8ClampedArray,un=Xn&&Xn.prototype,Vn=on&&tn(on),Wn=en&&tn(en),hn=Object.prototype,pn=Dm.TypeError,gn=In("toStringTag"),sn=mn("TYPED_ARRAY_TAG"),yn=Pm&&!!Gn&&"Opera"!==$m(Dm.opera),Cn=!1,Rn={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},Yn={BigInt64Array:8,BigUint64Array:8},Sn=function(l){var d=tn(l);if(qm(d)){var Z=an(d);return Z&&_m(Z,"TypedArrayConstructor")?Z.TypedArrayConstructor:Sn(d)}},rn=function(l){if(!qm(l))return!1;var d=$m(l);return _m(Rn,d)||_m(Yn,d)};for(km in Rn)(zm=(Bm=Dm[km])&&Bm.prototype)?nn(zm).TypedArrayConstructor=Bm:yn=!1;for(km in Yn)(zm=(Bm=Dm[km])&&Bm.prototype)&&(nn(zm).TypedArrayConstructor=Bm);if((!yn||!Om(Vn)||Vn===Function.prototype)&&(Vn=function(){throw pn("Incorrect invocation")},yn))for(km in Rn)Dm[km]&&Gn(Dm[km],Vn);if((!yn||!Wn||Wn===hn)&&(Wn=Vn.prototype,yn))for(km in Rn)Dm[km]&&Gn(Dm[km].prototype,Wn);if(yn&&tn(un)!==Wn&&Gn(un,Wn),Em&&!_m(Wn,gn))for(km in Cn=!0,cn(Wn,gn,{get:function(){return qm(this)?this[sn]:void 0}}),Rn)Dm[km]&&dn(Dm[km],sn,km);var Kn={NATIVE_ARRAY_BUFFER_VIEWS:yn,TYPED_ARRAY_TAG:Cn&&sn,aTypedArray:function(l){if(rn(l))return l;throw pn("Target is not a typed array")},aTypedArrayConstructor:function(l){if(Om(l)&&(!Gn||bn(Vn,l)))return l;throw pn(ln(l)+" is not a typed array constructor")},exportTypedArrayMethod:function(l,d,Z,c){if(Em){if(Z)for(var i in Rn){var b=Dm[i];if(b&&_m(b.prototype,l))try{delete b.prototype[l]}catch(Z){try{b.prototype[l]=d}catch(l){}}}Wn[l]&&!Z||Zn(Wn,l,Z?d:yn&&en[l]||d,c)}},exportTypedArrayStaticMethod:function(l,d,Z){var c,i;if(Em){if(Gn){if(Z)for(c in Rn)if((i=Dm[c])&&_m(i,l))try{delete i[l]}catch(l){}if(Vn[l]&&!Z)return;try{return Zn(Vn,l,Z?d:yn&&Vn[l]||d)}catch(l){}}for(c in Rn)!(i=Dm[c])||i[l]&&!Z||Zn(i,l,d)}},getTypedArrayConstructor:Sn,isView:function(l){if(!qm(l))return!1;var d=$m(l);return"DataView"===d||_m(Rn,d)||_m(Yn,d)},isTypedArray:rn,TypedArray:Vn,TypedArrayPrototype:Wn},Nn=Z,Jn=i,Hn=function(l,d){if(!d&&!Um)return!1;var Z=!1;try{var c={};c[Lm]=function(){return{next:function(){return{done:Z=!0}}}},l(c)}catch(l){}return Z},Ln=Kn.NATIVE_ARRAY_BUFFER_VIEWS,Un=Nn.ArrayBuffer,vn=Nn.Int8Array,Fn=!Ln||!Jn((function(){vn(1)}))||!Jn((function(){new vn(-1)}))||!Hn((function(l){new vn,new vn(null),new vn(1.5),new vn(l)}),!0)||Jn((function(){return 1!==new vn(new Un(2),1,void 0).length})),kn=EZ,Bn=function(l,d,Z){for(var c in d)kn(l,c,d[c],Z);return l},zn=Kl,Tn=TypeError,An=function(l,d){if(zn(d,l))return l;throw Tn("Incorrect invocation")},xn=lc,Qn=Gc,fn=RangeError,wn=function(l){if(void 0===l)return 0;var d=xn(l),Z=Qn(d);if(d!==Z)throw fn("Wrong length or index");return Z},jn=Array,Mn=Math.abs,Pn=Math.pow,En=Math.floor,Dn=Math.log,On=Math.LN2,qn={pack:function(l,d,Z){var c,i,b,t=jn(Z),G=8*Z-d-1,I=(1<<G)-1,m=I>>1,n=23===d?Pn(2,-24)-Pn(2,-77):0,a=l<0||0===l&&1/l<0?1:0,o=0;for((l=Mn(l))!=l||l===1/0?(i=l!=l?1:0,c=I):(c=En(Dn(l)/On),l*(b=Pn(2,-c))<1&&(c--,b*=2),(l+=c+m>=1?n/b:n*Pn(2,1-m))*b>=2&&(c++,b/=2),c+m>=I?(i=0,c=I):c+m>=1?(i=(l*b-1)*Pn(2,d),c+=m):(i=l*Pn(2,m-1)*Pn(2,d),c=0));d>=8;)t[o++]=255&i,i/=256,d-=8;for(c=c<<d|i,G+=d;G>0;)t[o++]=255&c,c/=256,G-=8;return t[--o]|=128*a,t},unpack:function(l,d){var Z,c=l.length,i=8*c-d-1,b=(1<<i)-1,t=b>>1,G=i-7,I=c-1,m=l[I--],n=127&m;for(m>>=7;G>0;)n=256*n+l[I--],G-=8;for(Z=n&(1<<-G)-1,n>>=-G,G+=d;G>0;)Z=256*Z+l[I--],G-=8;if(0===n)n=1-t;else{if(n===b)return Z?NaN:m?-1/0:1/0;Z+=Pn(2,d),n-=t}return(m?-1:1)*Z*Pn(2,n-d)}},_n=V,$n=ic,la=mc,da=function(l){for(var d=_n(this),Z=la(d),c=arguments.length,i=$n(c>1?arguments[1]:void 0,Z),b=c>2?arguments[2]:void 0,t=void 0===b?Z:$n(b,Z);t>i;)d[i++]=l;return d},Za=Zd,ca=nl,ia=sd,ba=function(l,d,Z){var c=Za(d);c in l?ca.f(l,c,ia(0,Z)):l[c]=Z},ta=ic,Ga=mc,Ia=ba,ma=Array,na=Math.max,aa=function(l,d,Z){for(var c=Ga(l),i=ta(d,c),b=ta(void 0===Z?c:Z,c),t=ma(na(b-i,0)),G=0;i<b;i++,G++)Ia(t,G,l[i]);return t.length=G,t},oa=Z,ea=a,Xa=al,ua=Tm,Va=_d,Wa=jd,ha=Bn,pa=i,ga=An,sa=lc,ya=Gc,Ca=wn,Ra=qn,Ya=Ft,Sa=Mm,ra=DZ.f,Ka=nl.f,Na=da,Ja=aa,Ha=Dt,La=Va.PROPER,Ua=Va.CONFIGURABLE,va=HZ.get,Fa=HZ.set,ka=oa.ArrayBuffer,Ba=ka,za=Ba&&Ba.prototype,Ta=oa.DataView,Aa=Ta&&Ta.prototype,xa=Object.prototype,Qa=oa.Array,fa=oa.RangeError,wa=ea(Na),ja=ea([].reverse),Ma=Ra.pack,Pa=Ra.unpack,Ea=function(l){return[255&l]},Da=function(l){return[255&l,l>>8&255]},Oa=function(l){return[255&l,l>>8&255,l>>16&255,l>>24&255]},qa=function(l){return l[3]<<24|l[2]<<16|l[1]<<8|l[0]},_a=function(l){return Ma(l,23,4)},$a=function(l){return Ma(l,52,8)},lo=function(l,d){Ka(l.prototype,d,{get:function(){return va(this)[d]}})},Zo=function(l,d,Z,c){var i=Ca(Z),b=va(l);if(i+d>b.byteLength)throw fa("Wrong index");var t=va(b.buffer).bytes,G=i+b.byteOffset,I=Ja(t,G,G+d);return c?I:ja(I)},co=function(l,d,Z,c,i,b){var t=Ca(Z),G=va(l);if(t+d>G.byteLength)throw fa("Wrong index");for(var I=va(G.buffer).bytes,m=t+G.byteOffset,n=c(+i),a=0;a<d;a++)I[m+a]=n[b?a:d-a-1]};if(ua){var io=La&&"ArrayBuffer"!==ka.name;if(pa((function(){ka(1)}))&&pa((function(){new ka(-1)}))&&!pa((function(){return new ka,new ka(1.5),new ka(NaN),io&&!Ua})))io&&Ua&&Wa(ka,"name","ArrayBuffer");else{(Ba=function(l){return ga(this,za),new ka(Ca(l))}).prototype=za;for(var bo,to=ra(ka),Go=0;to.length>Go;)(bo=to[Go++])in Ba||Wa(Ba,bo,ka[bo]);za.constructor=Ba}Sa&&Ya(Aa)!==xa&&Sa(Aa,xa);var Io=new Ta(new Ba(2)),mo=ea(Aa.setInt8);Io.setInt8(0,2147483648),Io.setInt8(1,2147483649),!Io.getInt8(0)&&Io.getInt8(1)||ha(Aa,{setInt8:function(l,d){mo(this,l,d<<24>>24)},setUint8:function(l,d){mo(this,l,d<<24>>24)}},{unsafe:!0})}else za=(Ba=function(l){ga(this,za);var d=Ca(l);Fa(this,{bytes:wa(Qa(d),0),byteLength:d}),Xa||(this.byteLength=d)}).prototype,Aa=(Ta=function(l,d,Z){ga(this,Aa),ga(l,za);var c=va(l).byteLength,i=sa(d);if(i<0||i>c)throw fa("Wrong offset");if(i+(Z=void 0===Z?c-i:ya(Z))>c)throw fa("Wrong length");Fa(this,{buffer:l,byteLength:Z,byteOffset:i}),Xa||(this.buffer=l,this.byteLength=Z,this.byteOffset=i)}).prototype,Xa&&(lo(Ba,"byteLength"),lo(Ta,"buffer"),lo(Ta,"byteLength"),lo(Ta,"byteOffset")),ha(Aa,{getInt8:function(l){return Zo(this,1,l)[0]<<24>>24},getUint8:function(l){return Zo(this,1,l)[0]},getInt16:function(l){var d=Zo(this,2,l,arguments.length>1?arguments[1]:void 0);return(d[1]<<8|d[0])<<16>>16},getUint16:function(l){var d=Zo(this,2,l,arguments.length>1?arguments[1]:void 0);return d[1]<<8|d[0]},getInt32:function(l){return qa(Zo(this,4,l,arguments.length>1?arguments[1]:void 0))},getUint32:function(l){return qa(Zo(this,4,l,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(l){return Pa(Zo(this,4,l,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(l){return Pa(Zo(this,8,l,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(l,d){co(this,1,l,Ea,d)},setUint8:function(l,d){co(this,1,l,Ea,d)},setInt16:function(l,d){co(this,2,l,Da,d,arguments.length>2?arguments[2]:void 0)},setUint16:function(l,d){co(this,2,l,Da,d,arguments.length>2?arguments[2]:void 0)},setInt32:function(l,d){co(this,4,l,Oa,d,arguments.length>2?arguments[2]:void 0)},setUint32:function(l,d){co(this,4,l,Oa,d,arguments.length>2?arguments[2]:void 0)},setFloat32:function(l,d){co(this,4,l,_a,d,arguments.length>2?arguments[2]:void 0)},setFloat64:function(l,d){co(this,8,l,$a,d,arguments.length>2?arguments[2]:void 0)}});Ha(Ba,"ArrayBuffer"),Ha(Ta,"DataView");var no={ArrayBuffer:Ba,DataView:Ta},ao=el,oo=Math.floor,eo=Number.isInteger||function(l){return!ao(l)&&isFinite(l)&&oo(l)===l},Xo=lc,uo=RangeError,Vo=function(l){var d=Xo(l);if(d<0)throw uo("The argument can't be less than 0");return d},Wo=RangeError,ho=function(l,d){var Z=Vo(l);if(Z%d)throw Wo("Wrong offset");return Z},po=ki,go=rl,so=Eb,yo=V,Co=mc,Ro=Gb,Yo=lb,So=xi,ro=Kn.aTypedArrayConstructor,Ko=function(l){var d,Z,c,i,b,t,G=so(this),I=yo(l),m=arguments.length,n=m>1?arguments[1]:void 0,a=void 0!==n,o=Yo(I);if(o&&!So(o))for(t=(b=Ro(I,o)).next,I=[];!(i=go(t,b)).done;)I.push(i.value);for(a&&m>2&&(n=po(n,arguments[2])),Z=Co(I),c=new(ro(G))(Z),d=0;Z>d;d++)c[d]=a?n(I[d],d):I[d];return c},No=Yd,Jo=Array.isArray||function(l){return"Array"==No(l)},Ho=wb,Lo=el,Uo=Il("species"),vo=Array,Fo=function(l){var d;return Jo(l)&&(d=l.constructor,(Ho(d)&&(d===vo||Jo(d.prototype))||Lo(d)&&null===(d=d[Uo]))&&(d=void 0)),void 0===d?vo:d},ko=ki,Bo=Jd,zo=V,To=mc,Ao=function(l,d){return new(Fo(l))(0===d?0:d)},xo=a([].push),Qo=function(l){var d=1==l,Z=2==l,c=3==l,i=4==l,b=6==l,t=7==l,G=5==l||b;return function(I,m,n,a){for(var o,e,X=zo(I),u=Bo(X),V=ko(m,n),W=To(u),h=0,p=a||Ao,g=d?p(I,W):Z||t?p(I,0):void 0;W>h;h++)if((G||h in u)&&(e=V(o=u[h],h,X),l))if(d)g[h]=e;else if(e)switch(l){case 3:return!0;case 5:return o;case 6:return h;case 2:xo(g,o)}else switch(l){case 4:return!1;case 7:xo(g,o)}return b?-1:c||i?i:g}},fo={forEach:Qo(0),map:Qo(1),filter:Qo(2),some:Qo(3),every:Qo(4),find:Qo(5),findIndex:Qo(6),filterReject:Qo(7)},wo=T,jo=nl,Mo=al,Po=Il("species"),Eo=F,Do=el,Oo=Mm,qo=qc,_o=Z,$o=rl,le=al,de=Fn,Ze=Kn,ce=no,ie=An,be=sd,te=jd,Ge=eo,Ie=Gc,me=wn,ne=ho,ae=Zd,oe=p,ee=Di,Xe=el,ue=Ul,Ve=si,We=Kl,he=Mm,pe=DZ.f,ge=Ko,se=fo.forEach,ye=function(l){var d=wo(l),Z=jo.f;Mo&&d&&!d[Po]&&Z(d,Po,{configurable:!0,get:function(){return this}})},Ce=nl,Re=Vd,Ye=function(l,d,Z){var c,i;return Oo&&Eo(c=d.constructor)&&c!==Z&&Do(i=c.prototype)&&i!==Z.prototype&&Oo(l,i),l},Se=HZ.get,re=HZ.set,Ke=HZ.enforce,Ne=Ce.f,Je=Re.f,He=Math.round,Le=_o.RangeError,Ue=ce.ArrayBuffer,ve=Ue.prototype,Fe=ce.DataView,ke=Ze.NATIVE_ARRAY_BUFFER_VIEWS,Be=Ze.TYPED_ARRAY_TAG,ze=Ze.TypedArray,Te=Ze.TypedArrayPrototype,Ae=Ze.aTypedArrayConstructor,xe=Ze.isTypedArray,Qe=function(l,d){Ae(l);for(var Z=0,c=d.length,i=new l(c);c>Z;)i[Z]=d[Z++];return i},fe=function(l,d){Ne(l,d,{get:function(){return Se(this)[d]}})},we=function(l){var d;return We(ve,l)||"ArrayBuffer"==(d=ee(l))||"SharedArrayBuffer"==d},je=function(l,d){return xe(l)&&!ue(d)&&d in l&&Ge(+d)&&d>=0},Me=function(l,d){return d=ae(d),je(l,d)?be(2,l[d]):Je(l,d)},Pe=function(l,d,Z){return d=ae(d),!(je(l,d)&&Xe(Z)&&oe(Z,"value"))||oe(Z,"get")||oe(Z,"set")||Z.configurable||oe(Z,"writable")&&!Z.writable||oe(Z,"enumerable")&&!Z.enumerable?Ne(l,d,Z):(l[d]=Z.value,l)};le?(ke||(Re.f=Me,Ce.f=Pe,fe(Te,"buffer"),fe(Te,"byteOffset"),fe(Te,"byteLength"),fe(Te,"length")),qo({target:"Object",stat:!0,forced:!ke},{getOwnPropertyDescriptor:Me,defineProperty:Pe}),Hm.exports=function(l,d,Z){var c=l.match(/\d+$/)[0]/8,i=l+(Z?"Clamped":"")+"Array",b="get"+l,t="set"+l,G=_o[i],I=G,m=I&&I.prototype,n={},a=function(l,d){Ne(l,d,{get:function(){return function(l,d){var Z=Se(l);return Z.view[b](d*c+Z.byteOffset,!0)}(this,d)},set:function(l){return function(l,d,i){var b=Se(l);Z&&(i=(i=He(i))<0?0:i>255?255:255&i),b.view[t](d*c+b.byteOffset,i,!0)}(this,d,l)},enumerable:!0})};ke?de&&(I=d((function(l,d,Z,i){return ie(l,m),Ye(Xe(d)?we(d)?void 0!==i?new G(d,ne(Z,c),i):void 0!==Z?new G(d,ne(Z,c)):new G(d):xe(d)?Qe(I,d):$o(ge,I,d):new G(me(d)),l,I)})),he&&he(I,ze),se(pe(G),(function(l){l in I||te(I,l,G[l])})),I.prototype=m):(I=d((function(l,d,Z,i){ie(l,m);var b,t,G,n=0,o=0;if(Xe(d)){if(!we(d))return xe(d)?Qe(I,d):$o(ge,I,d);b=d,o=ne(Z,c);var e=d.byteLength;if(void 0===i){if(e%c)throw Le("Wrong length");if((t=e-o)<0)throw Le("Wrong length")}else if((t=Ie(i)*c)+o>e)throw Le("Wrong length");G=t/c}else G=me(d),b=new Ue(t=G*c);for(re(l,{buffer:b,byteOffset:o,byteLength:t,length:G,view:new Fe(b)});n<G;)a(l,n++)})),he&&he(I,ze),m=I.prototype=Ve(Te)),m.constructor!==I&&te(m,"constructor",I),Ke(m).TypedArrayConstructor=I,Be&&te(m,Be,i);var o=I!=G;n[i]=I,qo({global:!0,constructor:!0,forced:o,sham:!ke},n),"BYTES_PER_ELEMENT"in I||te(I,"BYTES_PER_ELEMENT",c),"BYTES_PER_ELEMENT"in m||te(m,"BYTES_PER_ELEMENT",c),ye(i)}):Hm.exports=function(){},(0,Hm.exports)("Float32",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Float64",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Int8",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Int16",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Int32",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Uint8",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Uint8",(function(l){return function(d,Z,c){return l(this,d,Z,c)}}),!0),(0,Hm.exports)("Uint16",(function(l){return function(d,Z,c){return l(this,d,Z,c)}})),(0,Hm.exports)("Uint32",(function(l){return function(d,Z,c){return l(this,d,Z,c)}}));var Ee=$l,De=TypeError,Oe=da,qe=function(l){var d=Ee(l,"number");if("number"==typeof d)throw De("Can't convert number to bigint");return BigInt(d)},_e=Di,$e=rl,lX=i,dX=Kn.aTypedArray,ZX=Kn.exportTypedArrayMethod,cX=a("".slice);ZX("fill",(function(l){var d=arguments.length;dX(this);var Z="Big"===cX(_e(this),0,3)?qe(l):+l;return $e(Oe,this,Z,d>1?arguments[1]:void 0,d>2?arguments[2]:void 0)}),lX((function(){var l=0;return new Int8Array(2).fill({valueOf:function(){return l++}}),1!==l}))),(0,Kn.exportTypedArrayStaticMethod)("from",Ko,Fn);var iX=Kn.aTypedArrayConstructor;(0,Kn.exportTypedArrayStaticMethod)("of",(function(){for(var l=0,d=arguments.length,Z=new(iX(this))(d);d>l;)Z[l]=arguments[l++];return Z}),Fn);var bX=Z,tX=rl,GX=Kn,IX=mc,mX=ho,nX=V,aX=i,oX=bX.RangeError,eX=bX.Int8Array,XX=eX&&eX.prototype,uX=XX&&XX.set,VX=GX.aTypedArray,WX=GX.exportTypedArrayMethod,hX=!aX((function(){var l=new Uint8ClampedArray(2);return tX(uX,l,{length:1,0:3},1),3!==l[1]})),pX=hX&&GX.NATIVE_ARRAY_BUFFER_VIEWS&&aX((function(){var l=new eX(2);return l.set(1),l.set("2",1),0!==l[0]||2!==l[1]}));WX("set",(function(l){VX(this);var d=mX(arguments.length>1?arguments[1]:void 0,1),Z=nX(l);if(hX)return tX(uX,this,Z,d);var c=this.length,i=IX(Z),b=0;if(i+d>c)throw oX("Wrong length");for(;b<i;)this[d+b]=Z[b++]}),!hX||pX);var gX=aa,sX=Math.floor,yX=function(l,d){var Z=l.length,c=sX(Z/2);return Z<8?CX(l,d):RX(l,yX(gX(l,0,c),d),yX(gX(l,c),d),d)},CX=function(l,d){for(var Z,c,i=l.length,b=1;b<i;){for(c=b,Z=l[b];c&&d(l[c-1],Z)>0;)l[c]=l[--c];c!==b++&&(l[c]=Z)}return l},RX=function(l,d,Z,c){for(var i=d.length,b=Z.length,t=0,G=0;t<i||G<b;)l[t+G]=t<i&&G<b?c(d[t],Z[G])<=0?d[t++]:Z[G++]:t<i?d[t++]:Z[G++];return l},YX=yX,SX=A.match(/firefox\/(\d+)/i),rX=!!SX&&+SX[1],KX=/MSIE|Trident/.test(A),NX=A.match(/AppleWebKit\/(\d+)\./),JX=!!NX&&+NX[1],HX=a,LX=i,UX=Tl,vX=YX,FX=rX,kX=KX,BX=P,zX=JX,TX=Kn.aTypedArray,AX=Kn.exportTypedArrayMethod,xX=Z.Uint16Array,QX=xX&&HX(xX.prototype.sort),fX=!(!QX||LX((function(){QX(new xX(2),null)}))&&LX((function(){QX(new xX(2),{})}))),wX=!!QX&&!LX((function(){if(BX)return BX<74;if(FX)return FX<67;if(kX)return!0;if(zX)return zX<602;var l,d,Z=new xX(516),c=Array(516);for(l=0;l<516;l++)d=l%4,Z[l]=515-l,c[l]=l-2*d+3;for(QX(Z,(function(l,d){return(l/4|0)-(d/4|0)})),l=0;l<516;l++)if(Z[l]!==c[l])return!0}));AX("sort",(function(l){return void 0!==l&&UX(l),wX?QX(this,l):vX(TX(this),function(l){return function(d,Z){return void 0!==l?+l(d,Z)||0:Z!=Z?-1:d!=d?1:0===d&&0===Z?1/d>0&&1/Z<0?1:-1:d>Z}}(l))}),!wX||fX);var jX=Wl("span").classList,MX=jX&&jX.constructor&&jX.constructor.prototype,PX=MX===Object.prototype?void 0:MX,EX=qc,DX=rl,OX=F,qX=ZG,_X=Ft,$X=Mm,lu=Dt,du=jd,Zu=EZ,cu=Bi,iu=_d.PROPER,bu=_d.CONFIGURABLE,tu=jt.IteratorPrototype,Gu=jt.BUGGY_SAFARI_ITERATORS,Iu=Il("iterator"),mu=function(){return this},nu=function(l,d,Z,c,i,b,t){qX(Z,d,c);var G,I,m,n=function(l){if(l===i&&u)return u;if(!Gu&&l in e)return e[l];switch(l){case"keys":case"values":case"entries":return function(){return new Z(this,l)}}return function(){return new Z(this)}},a=d+" Iterator",o=!1,e=l.prototype,X=e[Iu]||e["@@iterator"]||i&&e[i],u=!Gu&&X||n(i),V="Array"==d&&e.entries||X;if(V&&(G=_X(V.call(new l)))!==Object.prototype&&G.next&&(_X(G)!==tu&&($X?$X(G,tu):OX(G[Iu])||Zu(G,Iu,mu)),lu(G,a,!0)),iu&&"values"==i&&X&&"values"!==X.name&&(bu?du(e,"name","values"):(o=!0,u=function(){return DX(X,this)})),i)if(I={values:n("values"),keys:b?u:n("keys"),entries:n("entries")},t)for(m in I)(Gu||o||!(m in e))&&Zu(e,m,I[m]);else EX({target:d,proto:!0,forced:Gu||o},I);return e[Iu]!==u&&Zu(e,Iu,u,{name:i}),cu[d]=u,I},au=Ud,ou=ri,eu=Bi,Xu=HZ,uu=nl.f,Vu=nu,Wu=al,hu=Xu.set,pu=Xu.getterFor("Array Iterator"),gu=Vu(Array,"Array",(function(l,d){hu(this,{type:"Array Iterator",target:au(l),index:0,kind:d})}),(function(){var l=pu(this),d=l.target,Z=l.kind,c=l.index++;return!d||c>=d.length?(l.target=void 0,{value:void 0,done:!0}):"keys"==Z?{value:c,done:!1}:"values"==Z?{value:d[c],done:!1}:{value:[c,d[c]],done:!1}}),"values"),su=eu.Arguments=eu.Array;if(ou("keys"),ou("values"),ou("entries"),Wu&&"values"!==su.name)try{uu(su,"name",{value:"values"})}catch(l){}var yu=Z,Cu={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Ru=PX,Yu=gu,Su=jd,ru=Il,Ku=ru("iterator"),Nu=ru("toStringTag"),Ju=Yu.values,Hu=function(l,d){if(l){if(l[Ku]!==Ju)try{Su(l,Ku,Ju)}catch(d){l[Ku]=Ju}if(l[Nu]||Su(l,Nu,d),Cu[d])for(var Z in Yu)if(l[Z]!==Yu[Z])try{Su(l,Z,Yu[Z])}catch(d){l[Z]=Yu[Z]}}};for(var Lu in Cu)Hu(yu[Lu]&&yu[Lu].prototype,Lu);Hu(Ru,"DOMTokenList");var Uu,vu,Fu,ku,Bu=a([].slice),zu=TypeError,Tu=function(l,d){if(l<d)throw zu("Not enough arguments");return l},Au=/(?:ipad|iphone|ipod).*applewebkit/i.test(A),xu="process"==Yd(Z.process),Qu=Z,fu=QI,wu=ki,ju=F,Mu=p,Pu=i,Eu=mi,Du=Bu,Ou=Wl,qu=Tu,_u=Au,$u=xu,lV=Qu.setImmediate,dV=Qu.clearImmediate,ZV=Qu.process,cV=Qu.Dispatch,iV=Qu.Function,bV=Qu.MessageChannel,tV=Qu.String,GV=0,IV={};try{Uu=Qu.location}catch(l){}var mV=function(l){if(Mu(IV,l)){var d=IV[l];delete IV[l],d()}},nV=function(l){return function(){mV(l)}},aV=function(l){mV(l.data)},oV=function(l){Qu.postMessage(tV(l),Uu.protocol+"//"+Uu.host)};lV&&dV||(lV=function(l){qu(arguments.length,1);var d=ju(l)?l:iV(l),Z=Du(arguments,1);return IV[++GV]=function(){fu(d,void 0,Z)},vu(GV),GV},dV=function(l){delete IV[l]},$u?vu=function(l){ZV.nextTick(nV(l))}:cV&&cV.now?vu=function(l){cV.now(nV(l))}:bV&&!_u?(ku=(Fu=new bV).port2,Fu.port1.onmessage=aV,vu=wu(ku.postMessage,ku)):Qu.addEventListener&&ju(Qu.postMessage)&&!Qu.importScripts&&Uu&&"file:"!==Uu.protocol&&!Pu(oV)?(vu=oV,Qu.addEventListener("message",aV,!1)):vu="onreadystatechange"in Ou("script")?function(l){Eu.appendChild(Ou("script")).onreadystatechange=function(){Eu.removeChild(this),mV(l)}}:function(l){setTimeout(nV(l),0)});var eV={set:lV,clear:dV},XV=eV.clear;qc({global:!0,bind:!0,enumerable:!0,forced:Z.clearImmediate!==XV},{clearImmediate:XV});var uV=eV.set;qc({global:!0,bind:!0,enumerable:!0,forced:Z.setImmediate!==uV},{setImmediate:uV});var VV=yG.charAt,WV=bG,hV=HZ,pV=nu,gV=hV.set,sV=hV.getterFor("String Iterator");pV(String,"String",(function(l){gV(this,{type:"String Iterator",string:WV(l),index:0})}),(function(){var l,d=sV(this),Z=d.string,c=d.index;return c>=Z.length?{value:void 0,done:!0}:(l=VV(Z,c),d.index+=l.length,{value:l,done:!1})}));var yV=i,CV=Il("iterator"),RV=!yV((function(){var l=new URL("b?a=1&b=2&c=3","http://a"),d=l.searchParams,Z="";return l.pathname="c%20d",d.forEach((function(l,c){d.delete("b"),Z+=c+l})),!d.sort||"http://a/c%20d?a=1&c=3"!==l.href||"3"!==d.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!d[CV]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://ÑÐµÑÑ").host||"#%D0%B1"!==new URL("http://a#Ð±").hash||"a1c3"!==Z||"x"!==new URL("http://x",void 0).host})),YV=al,SV=a,rV=rl,KV=i,NV=di,JV=Rc,HV=Wd,LV=V,UV=Jd,vV=Object.assign,FV=Object.defineProperty,kV=SV([].concat),BV=!vV||KV((function(){if(YV&&1!==vV({b:1},vV(FV({},"a",{enumerable:!0,get:function(){FV(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var l={},d={},Z=Symbol(),c="abcdefghijklmnopqrst";return l[Z]=7,c.split("").forEach((function(l){d[l]=l})),7!=vV({},l)[Z]||NV(vV({},d)).join("")!=c}))?function(l,d){for(var Z=LV(l),c=arguments.length,i=1,b=JV.f,t=HV.f;c>i;)for(var G,I=UV(arguments[i++]),m=b?kV(NV(I),b(I)):NV(I),n=m.length,a=0;n>a;)G=m[a++],YV&&!rV(t,I,G)||(Z[G]=I[G]);return Z}:vV,zV=Rl,TV=ab,AV=ki,xV=rl,QV=V,fV=function(l,d,Z,c){try{return c?d(zV(Z)[0],Z[1]):d(Z)}catch(d){TV(l,"throw",d)}},wV=xi,jV=wb,MV=mc,PV=ba,EV=Gb,DV=lb,OV=Array,qV=a,_V=/[^\0-\u007E]/,$V=/[.\u3002\uFF0E\uFF61]/g,lW="Overflow: input needs wider integers to process",dW=RangeError,ZW=qV($V.exec),cW=Math.floor,iW=String.fromCharCode,bW=qV("".charCodeAt),tW=qV([].join),GW=qV([].push),IW=qV("".replace),mW=qV("".split),nW=qV("".toLowerCase),aW=function(l){return l+22+75*(l<26)},oW=function(l,d,Z){var c=0;for(l=Z?cW(l/700):l>>1,l+=cW(l/d);l>455;)l=cW(l/35),c+=36;return cW(c+36*l/(l+38))},eW=function(l){var d=[];l=function(l){for(var d=[],Z=0,c=l.length;Z<c;){var i=bW(l,Z++);if(i>=55296&&i<=56319&&Z<c){var b=bW(l,Z++);56320==(64512&b)?GW(d,((1023&i)<<10)+(1023&b)+65536):(GW(d,i),Z--)}else GW(d,i)}return d}(l);var Z,c,i=l.length,b=128,t=0,G=72;for(Z=0;Z<l.length;Z++)(c=l[Z])<128&&GW(d,iW(c));var I=d.length,m=I;for(I&&GW(d,"-");m<i;){var n=2147483647;for(Z=0;Z<l.length;Z++)(c=l[Z])>=b&&c<n&&(n=c);var a=m+1;if(n-b>cW((2147483647-t)/a))throw dW(lW);for(t+=(n-b)*a,b=n,Z=0;Z<l.length;Z++){if((c=l[Z])<b&&++t>2147483647)throw dW(lW);if(c==b){for(var o=t,e=36;;){var X=e<=G?1:e>=G+26?26:e-G;if(o<X)break;var u=o-X,V=36-X;GW(d,iW(aW(X+u%V))),o=cW(u/V),e+=36}GW(d,iW(aW(o))),G=oW(t,a,m==I),t=0,m++}}t++,b++}return tW(d,"")},XW=qc,uW=Z,VW=rl,WW=a,hW=al,pW=RV,gW=EZ,sW=Bn,yW=Dt,CW=ZG,RW=HZ,YW=An,SW=F,rW=p,KW=ki,NW=Di,JW=Rl,HW=el,LW=bG,UW=si,vW=sd,FW=Gb,kW=lb,BW=Tu,zW=YX,TW=Il("iterator"),AW=RW.set,xW=RW.getterFor("URLSearchParams"),QW=RW.getterFor("URLSearchParamsIterator"),fW=Object.getOwnPropertyDescriptor,wW=function(l){if(!hW)return uW[l];var d=fW(uW,l);return d&&d.value},jW=wW("fetch"),MW=wW("Request"),PW=wW("Headers"),EW=MW&&MW.prototype,DW=PW&&PW.prototype,OW=uW.RegExp,qW=uW.TypeError,_W=uW.decodeURIComponent,$W=uW.encodeURIComponent,lh=WW("".charAt),dh=WW([].join),Zh=WW([].push),ch=WW("".replace),ih=WW([].shift),bh=WW([].splice),th=WW("".split),Gh=WW("".slice),Ih=/\+/g,mh=Array(4),nh=function(l){return mh[l-1]||(mh[l-1]=OW("((?:%[\\da-f]{2}){"+l+"})","gi"))},ah=function(l){try{return _W(l)}catch(d){return l}},oh=function(l){var d=ch(l,Ih," "),Z=4;try{return _W(d)}catch(l){for(;Z;)d=ch(d,nh(Z--),ah);return d}},eh=/[!'()~]|%20/g,Xh={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},uh=function(l){return Xh[l]},Vh=function(l){return ch($W(l),eh,uh)},Wh=CW((function(l,d){AW(this,{type:"URLSearchParamsIterator",iterator:FW(xW(l).entries),kind:d})}),"Iterator",(function(){var l=QW(this),d=l.kind,Z=l.iterator.next(),c=Z.value;return Z.done||(Z.value="keys"===d?c.key:"values"===d?c.value:[c.key,c.value]),Z}),!0),hh=function(l){this.entries=[],this.url=null,void 0!==l&&(HW(l)?this.parseObject(l):this.parseQuery("string"==typeof l?"?"===lh(l,0)?Gh(l,1):l:LW(l)))};hh.prototype={type:"URLSearchParams",bindURL:function(l){this.url=l,this.update()},parseObject:function(l){var d,Z,c,i,b,t,G,I=kW(l);if(I)for(Z=(d=FW(l,I)).next;!(c=VW(Z,d)).done;){if(b=(i=FW(JW(c.value))).next,(t=VW(b,i)).done||(G=VW(b,i)).done||!VW(b,i).done)throw qW("Expected sequence with length 2");Zh(this.entries,{key:LW(t.value),value:LW(G.value)})}else for(var m in l)rW(l,m)&&Zh(this.entries,{key:m,value:LW(l[m])})},parseQuery:function(l){if(l)for(var d,Z,c=th(l,"&"),i=0;i<c.length;)(d=c[i++]).length&&(Z=th(d,"="),Zh(this.entries,{key:oh(ih(Z)),value:oh(dh(Z,"="))}))},serialize:function(){for(var l,d=this.entries,Z=[],c=0;c<d.length;)l=d[c++],Zh(Z,Vh(l.key)+"="+Vh(l.value));return dh(Z,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var ph=function(){YW(this,gh);var l=arguments.length>0?arguments[0]:void 0;AW(this,new hh(l))},gh=ph.prototype;if(sW(gh,{append:function(l,d){BW(arguments.length,2);var Z=xW(this);Zh(Z.entries,{key:LW(l),value:LW(d)}),Z.updateURL()},delete:function(l){BW(arguments.length,1);for(var d=xW(this),Z=d.entries,c=LW(l),i=0;i<Z.length;)Z[i].key===c?bh(Z,i,1):i++;d.updateURL()},get:function(l){BW(arguments.length,1);for(var d=xW(this).entries,Z=LW(l),c=0;c<d.length;c++)if(d[c].key===Z)return d[c].value;return null},getAll:function(l){BW(arguments.length,1);for(var d=xW(this).entries,Z=LW(l),c=[],i=0;i<d.length;i++)d[i].key===Z&&Zh(c,d[i].value);return c},has:function(l){BW(arguments.length,1);for(var d=xW(this).entries,Z=LW(l),c=0;c<d.length;)if(d[c++].key===Z)return!0;return!1},set:function(l,d){BW(arguments.length,1);for(var Z,c=xW(this),i=c.entries,b=!1,t=LW(l),G=LW(d),I=0;I<i.length;I++)(Z=i[I]).key===t&&(b?bh(i,I--,1):(b=!0,Z.value=G));b||Zh(i,{key:t,value:G}),c.updateURL()},sort:function(){var l=xW(this);zW(l.entries,(function(l,d){return l.key>d.key?1:-1})),l.updateURL()},forEach:function(l){for(var d,Z=xW(this).entries,c=KW(l,arguments.length>1?arguments[1]:void 0),i=0;i<Z.length;)c((d=Z[i++]).value,d.key,this)},keys:function(){return new Wh(this,"keys")},values:function(){return new Wh(this,"values")},entries:function(){return new Wh(this,"entries")}},{enumerable:!0}),gW(gh,TW,gh.entries,{name:"entries"}),gW(gh,"toString",(function(){return xW(this).serialize()}),{enumerable:!0}),yW(ph,"URLSearchParams"),XW({global:!0,constructor:!0,forced:!pW},{URLSearchParams:ph}),!pW&&SW(PW)){var sh=WW(DW.has),yh=WW(DW.set),Ch=function(l){if(HW(l)){var d,Z=l.body;if("URLSearchParams"===NW(Z))return d=l.headers?new PW(l.headers):new PW,sh(d,"content-type")||yh(d,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),UW(l,{body:vW(0,LW(Z)),headers:vW(0,d)})}return l};if(SW(jW)&&XW({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(l){return jW(l,arguments.length>1?Ch(arguments[1]):{})}}),SW(MW)){var Rh=function(l){return YW(this,EW),new MW(l,arguments.length>1?Ch(arguments[1]):{})};EW.constructor=Rh,Rh.prototype=EW,XW({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:Rh})}}var Yh,Sh=qc,rh=al,Kh=RV,Nh=Z,Jh=ki,Hh=a,Lh=EZ,Uh=Xt,vh=An,Fh=p,kh=BV,Bh=function(l){var d=QV(l),Z=jV(this),c=arguments.length,i=c>1?arguments[1]:void 0,b=void 0!==i;b&&(i=AV(i,c>2?arguments[2]:void 0));var t,G,I,m,n,a,o=DV(d),e=0;if(!o||this===OV&&wV(o))for(t=MV(d),G=Z?new this(t):OV(t);t>e;e++)a=b?i(d[e],e):d[e],PV(G,e,a);else for(n=(m=EV(d,o)).next,G=Z?new this:[];!(I=xV(n,m)).done;e++)a=b?fV(m,i,[I.value,e],!0):I.value,PV(G,e,a);return G.length=e,G},zh=aa,Th=yG.codeAt,Ah=function(l){var d,Z,c=[],i=mW(IW(nW(l),$V,"."),".");for(d=0;d<i.length;d++)Z=i[d],GW(c,ZW(_V,Z)?"xn--"+eW(Z):Z);return tW(c,".")},xh=bG,Qh=Dt,fh=Tu,wh={URLSearchParams:ph,getState:xW},jh=HZ,Mh=jh.set,Ph=jh.getterFor("URL"),Eh=wh.URLSearchParams,Dh=wh.getState,Oh=Nh.URL,qh=Nh.TypeError,_h=Nh.parseInt,$h=Math.floor,lp=Math.pow,dp=Hh("".charAt),Zp=Hh(/./.exec),cp=Hh([].join),ip=Hh(1..toString),bp=Hh([].pop),tp=Hh([].push),Gp=Hh("".replace),Ip=Hh([].shift),mp=Hh("".split),np=Hh("".slice),ap=Hh("".toLowerCase),op=Hh([].unshift),ep=/[a-z]/i,Xp=/[\d+-.a-z]/i,up=/\d/,Vp=/^0x/i,Wp=/^[0-7]+$/,hp=/^\d+$/,pp=/^[\da-f]+$/i,gp=/[\0\t\n\r #%/:<>?@[\\\]^|]/,sp=/[\0\t\n\r #/:<>?@[\\\]^|]/,yp=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,Cp=/[\t\n\r]/g,Rp=function(l){var d,Z,c,i;if("number"==typeof l){for(d=[],Z=0;Z<4;Z++)op(d,l%256),l=$h(l/256);return cp(d,".")}if("object"==typeof l){for(d="",c=function(l){for(var d=null,Z=1,c=null,i=0,b=0;b<8;b++)0!==l[b]?(i>Z&&(d=c,Z=i),c=null,i=0):(null===c&&(c=b),++i);return i>Z&&(d=c,Z=i),d}(l),Z=0;Z<8;Z++)i&&0===l[Z]||(i&&(i=!1),c===Z?(d+=Z?":":"::",i=!0):(d+=ip(l[Z],16),Z<7&&(d+=":")));return"["+d+"]"}return l},Yp={},Sp=kh({},Yp,{" ":1,'"':1,"<":1,">":1,"`":1}),rp=kh({},Sp,{"#":1,"?":1,"{":1,"}":1}),Kp=kh({},rp,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Np=function(l,d){var Z=Th(l,0);return Z>32&&Z<127&&!Fh(d,l)?l:encodeURIComponent(l)},Jp={ftp:21,file:null,http:80,https:443,ws:80,wss:443},Hp=function(l,d){var Z;return 2==l.length&&Zp(ep,dp(l,0))&&(":"==(Z=dp(l,1))||!d&&"|"==Z)},Lp=function(l){var d;return l.length>1&&Hp(np(l,0,2))&&(2==l.length||"/"===(d=dp(l,2))||"\\"===d||"?"===d||"#"===d)},Up=function(l){return"."===l||"%2e"===ap(l)},vp={},Fp={},kp={},Bp={},zp={},Tp={},Ap={},xp={},Qp={},fp={},wp={},jp={},Mp={},Pp={},Ep={},Dp={},Op={},qp={},_p={},$p={},lg={},dg=function(l,d,Z){var c,i,b,t=xh(l);if(d){if(i=this.parse(t))throw qh(i);this.searchParams=null}else{if(void 0!==Z&&(c=new dg(Z,!0)),i=this.parse(t,null,c))throw qh(i);(b=Dh(new Eh)).bindURL(this),this.searchParams=b}};dg.prototype={type:"URL",parse:function(l,d,Z){var c,i,b,t,G,I=this,m=d||vp,n=0,a="",o=!1,e=!1,X=!1;for(l=xh(l),d||(I.scheme="",I.username="",I.password="",I.host=null,I.port=null,I.path=[],I.query=null,I.fragment=null,I.cannotBeABaseURL=!1,l=Gp(l,yp,"")),l=Gp(l,Cp,""),c=Bh(l);n<=c.length;){switch(i=c[n],m){case vp:if(!i||!Zp(ep,i)){if(d)return"Invalid scheme";m=kp;continue}a+=ap(i),m=Fp;break;case Fp:if(i&&(Zp(Xp,i)||"+"==i||"-"==i||"."==i))a+=ap(i);else{if(":"!=i){if(d)return"Invalid scheme";a="",m=kp,n=0;continue}if(d&&(I.isSpecial()!=Fh(Jp,a)||"file"==a&&(I.includesCredentials()||null!==I.port)||"file"==I.scheme&&!I.host))return;if(I.scheme=a,d)return void(I.isSpecial()&&Jp[I.scheme]==I.port&&(I.port=null));a="","file"==I.scheme?m=Pp:I.isSpecial()&&Z&&Z.scheme==I.scheme?m=Bp:I.isSpecial()?m=xp:"/"==c[n+1]?(m=zp,n++):(I.cannotBeABaseURL=!0,tp(I.path,""),m=_p)}break;case kp:if(!Z||Z.cannotBeABaseURL&&"#"!=i)return"Invalid scheme";if(Z.cannotBeABaseURL&&"#"==i){I.scheme=Z.scheme,I.path=zh(Z.path),I.query=Z.query,I.fragment="",I.cannotBeABaseURL=!0,m=lg;break}m="file"==Z.scheme?Pp:Tp;continue;case Bp:if("/"!=i||"/"!=c[n+1]){m=Tp;continue}m=Qp,n++;break;case zp:if("/"==i){m=fp;break}m=qp;continue;case Tp:if(I.scheme=Z.scheme,i==Yh)I.username=Z.username,I.password=Z.password,I.host=Z.host,I.port=Z.port,I.path=zh(Z.path),I.query=Z.query;else if("/"==i||"\\"==i&&I.isSpecial())m=Ap;else if("?"==i)I.username=Z.username,I.password=Z.password,I.host=Z.host,I.port=Z.port,I.path=zh(Z.path),I.query="",m=$p;else{if("#"!=i){I.username=Z.username,I.password=Z.password,I.host=Z.host,I.port=Z.port,I.path=zh(Z.path),I.path.length--,m=qp;continue}I.username=Z.username,I.password=Z.password,I.host=Z.host,I.port=Z.port,I.path=zh(Z.path),I.query=Z.query,I.fragment="",m=lg}break;case Ap:if(!I.isSpecial()||"/"!=i&&"\\"!=i){if("/"!=i){I.username=Z.username,I.password=Z.password,I.host=Z.host,I.port=Z.port,m=qp;continue}m=fp}else m=Qp;break;case xp:if(m=Qp,"/"!=i||"/"!=dp(a,n+1))continue;n++;break;case Qp:if("/"!=i&&"\\"!=i){m=fp;continue}break;case fp:if("@"==i){o&&(a="%40"+a),o=!0,b=Bh(a);for(var u=0;u<b.length;u++){var V=b[u];if(":"!=V||X){var W=Np(V,Kp);X?I.password+=W:I.username+=W}else X=!0}a=""}else if(i==Yh||"/"==i||"?"==i||"#"==i||"\\"==i&&I.isSpecial()){if(o&&""==a)return"Invalid authority";n-=Bh(a).length+1,a="",m=wp}else a+=i;break;case wp:case jp:if(d&&"file"==I.scheme){m=Dp;continue}if(":"!=i||e){if(i==Yh||"/"==i||"?"==i||"#"==i||"\\"==i&&I.isSpecial()){if(I.isSpecial()&&""==a)return"Invalid host";if(d&&""==a&&(I.includesCredentials()||null!==I.port))return;if(t=I.parseHost(a))return t;if(a="",m=Op,d)return;continue}"["==i?e=!0:"]"==i&&(e=!1),a+=i}else{if(""==a)return"Invalid host";if(t=I.parseHost(a))return t;if(a="",m=Mp,d==jp)return}break;case Mp:if(!Zp(up,i)){if(i==Yh||"/"==i||"?"==i||"#"==i||"\\"==i&&I.isSpecial()||d){if(""!=a){var h=_h(a,10);if(h>65535)return"Invalid port";I.port=I.isSpecial()&&h===Jp[I.scheme]?null:h,a=""}if(d)return;m=Op;continue}return"Invalid port"}a+=i;break;case Pp:if(I.scheme="file","/"==i||"\\"==i)m=Ep;else{if(!Z||"file"!=Z.scheme){m=qp;continue}if(i==Yh)I.host=Z.host,I.path=zh(Z.path),I.query=Z.query;else if("?"==i)I.host=Z.host,I.path=zh(Z.path),I.query="",m=$p;else{if("#"!=i){Lp(cp(zh(c,n),""))||(I.host=Z.host,I.path=zh(Z.path),I.shortenPath()),m=qp;continue}I.host=Z.host,I.path=zh(Z.path),I.query=Z.query,I.fragment="",m=lg}}break;case Ep:if("/"==i||"\\"==i){m=Dp;break}Z&&"file"==Z.scheme&&!Lp(cp(zh(c,n),""))&&(Hp(Z.path[0],!0)?tp(I.path,Z.path[0]):I.host=Z.host),m=qp;continue;case Dp:if(i==Yh||"/"==i||"\\"==i||"?"==i||"#"==i){if(!d&&Hp(a))m=qp;else if(""==a){if(I.host="",d)return;m=Op}else{if(t=I.parseHost(a))return t;if("localhost"==I.host&&(I.host=""),d)return;a="",m=Op}continue}a+=i;break;case Op:if(I.isSpecial()){if(m=qp,"/"!=i&&"\\"!=i)continue}else if(d||"?"!=i)if(d||"#"!=i){if(i!=Yh&&(m=qp,"/"!=i))continue}else I.fragment="",m=lg;else I.query="",m=$p;break;case qp:if(i==Yh||"/"==i||"\\"==i&&I.isSpecial()||!d&&("?"==i||"#"==i)){if(".."===(G=ap(G=a))||"%2e."===G||".%2e"===G||"%2e%2e"===G?(I.shortenPath(),"/"==i||"\\"==i&&I.isSpecial()||tp(I.path,"")):Up(a)?"/"==i||"\\"==i&&I.isSpecial()||tp(I.path,""):("file"==I.scheme&&!I.path.length&&Hp(a)&&(I.host&&(I.host=""),a=dp(a,0)+":"),tp(I.path,a)),a="","file"==I.scheme&&(i==Yh||"?"==i||"#"==i))for(;I.path.length>1&&""===I.path[0];)Ip(I.path);"?"==i?(I.query="",m=$p):"#"==i&&(I.fragment="",m=lg)}else a+=Np(i,rp);break;case _p:"?"==i?(I.query="",m=$p):"#"==i?(I.fragment="",m=lg):i!=Yh&&(I.path[0]+=Np(i,Yp));break;case $p:d||"#"!=i?i!=Yh&&("'"==i&&I.isSpecial()?I.query+="%27":I.query+="#"==i?"%23":Np(i,Yp)):(I.fragment="",m=lg);break;case lg:i!=Yh&&(I.fragment+=Np(i,Sp))}n++}},parseHost:function(l){var d,Z,c;if("["==dp(l,0)){if("]"!=dp(l,l.length-1))return"Invalid host";if(d=function(l){var d,Z,c,i,b,t,G,I=[0,0,0,0,0,0,0,0],m=0,n=null,a=0,o=function(){return dp(l,a)};if(":"==o()){if(":"!=dp(l,1))return;a+=2,n=++m}for(;o();){if(8==m)return;if(":"!=o()){for(d=Z=0;Z<4&&Zp(pp,o());)d=16*d+_h(o(),16),a++,Z++;if("."==o()){if(0==Z)return;if(a-=Z,m>6)return;for(c=0;o();){if(i=null,c>0){if(!("."==o()&&c<4))return;a++}if(!Zp(up,o()))return;for(;Zp(up,o());){if(b=_h(o(),10),null===i)i=b;else{if(0==i)return;i=10*i+b}if(i>255)return;a++}I[m]=256*I[m]+i,2!=++c&&4!=c||m++}if(4!=c)return;break}if(":"==o()){if(a++,!o())return}else if(o())return;I[m++]=d}else{if(null!==n)return;a++,n=++m}}if(null!==n)for(t=m-n,m=7;0!=m&&t>0;)G=I[m],I[m--]=I[n+t-1],I[n+--t]=G;else if(8!=m)return;return I}(np(l,1,-1)),!d)return"Invalid host";this.host=d}else if(this.isSpecial()){if(l=Ah(l),Zp(gp,l))return"Invalid host";if(d=function(l){var d,Z,c,i,b,t,G,I=mp(l,".");if(I.length&&""==I[I.length-1]&&I.length--,(d=I.length)>4)return l;for(Z=[],c=0;c<d;c++){if(""==(i=I[c]))return l;if(b=10,i.length>1&&"0"==dp(i,0)&&(b=Zp(Vp,i)?16:8,i=np(i,8==b?1:2)),""===i)t=0;else{if(!Zp(10==b?hp:8==b?Wp:pp,i))return l;t=_h(i,b)}tp(Z,t)}for(c=0;c<d;c++)if(t=Z[c],c==d-1){if(t>=lp(256,5-d))return null}else if(t>255)return null;for(G=bp(Z),c=0;c<Z.length;c++)G+=Z[c]*lp(256,3-c);return G}(l),null===d)return"Invalid host";this.host=d}else{if(Zp(sp,l))return"Invalid host";for(d="",Z=Bh(l),c=0;c<Z.length;c++)d+=Np(Z[c],Yp);this.host=d}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return Fh(Jp,this.scheme)},shortenPath:function(){var l=this.path,d=l.length;!d||"file"==this.scheme&&1==d&&Hp(l[0],!0)||l.length--},serialize:function(){var l=this,d=l.scheme,Z=l.username,c=l.password,i=l.host,b=l.port,t=l.path,G=l.query,I=l.fragment,m=d+":";return null!==i?(m+="//",l.includesCredentials()&&(m+=Z+(c?":"+c:"")+"@"),m+=Rp(i),null!==b&&(m+=":"+b)):"file"==d&&(m+="//"),m+=l.cannotBeABaseURL?t[0]:t.length?"/"+cp(t,"/"):"",null!==G&&(m+="?"+G),null!==I&&(m+="#"+I),m},setHref:function(l){var d=this.parse(l);if(d)throw qh(d);this.searchParams.update()},getOrigin:function(){var l=this.scheme,d=this.port;if("blob"==l)try{return new Zg(l.path[0]).origin}catch(l){return"null"}return"file"!=l&&this.isSpecial()?l+"://"+Rp(this.host)+(null!==d?":"+d:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(l){this.parse(xh(l)+":",vp)},getUsername:function(){return this.username},setUsername:function(l){var d=Bh(xh(l));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var Z=0;Z<d.length;Z++)this.username+=Np(d[Z],Kp)}},getPassword:function(){return this.password},setPassword:function(l){var d=Bh(xh(l));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var Z=0;Z<d.length;Z++)this.password+=Np(d[Z],Kp)}},getHost:function(){var l=this.host,d=this.port;return null===l?"":null===d?Rp(l):Rp(l)+":"+d},setHost:function(l){this.cannotBeABaseURL||this.parse(l,wp)},getHostname:function(){var l=this.host;return null===l?"":Rp(l)},setHostname:function(l){this.cannotBeABaseURL||this.parse(l,jp)},getPort:function(){var l=this.port;return null===l?"":xh(l)},setPort:function(l){this.cannotHaveUsernamePasswordPort()||(""==(l=xh(l))?this.port=null:this.parse(l,Mp))},getPathname:function(){var l=this.path;return this.cannotBeABaseURL?l[0]:l.length?"/"+cp(l,"/"):""},setPathname:function(l){this.cannotBeABaseURL||(this.path=[],this.parse(l,Op))},getSearch:function(){var l=this.query;return l?"?"+l:""},setSearch:function(l){""==(l=xh(l))?this.query=null:("?"==dp(l,0)&&(l=np(l,1)),this.query="",this.parse(l,$p)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var l=this.fragment;return l?"#"+l:""},setHash:function(l){""!=(l=xh(l))?("#"==dp(l,0)&&(l=np(l,1)),this.fragment="",this.parse(l,lg)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Zg=function(l){var d=vh(this,cg),Z=fh(arguments.length,1)>1?arguments[1]:void 0,c=Mh(d,new dg(l,!1,Z));rh||(d.href=c.serialize(),d.origin=c.getOrigin(),d.protocol=c.getProtocol(),d.username=c.getUsername(),d.password=c.getPassword(),d.host=c.getHost(),d.hostname=c.getHostname(),d.port=c.getPort(),d.pathname=c.getPathname(),d.search=c.getSearch(),d.searchParams=c.getSearchParams(),d.hash=c.getHash())},cg=Zg.prototype,ig=function(l,d){return{get:function(){return Ph(this)[l]()},set:d&&function(l){return Ph(this)[d](l)},configurable:!0,enumerable:!0}};if(rh&&(Uh(cg,"href",ig("serialize","setHref")),Uh(cg,"origin",ig("getOrigin")),Uh(cg,"protocol",ig("getProtocol","setProtocol")),Uh(cg,"username",ig("getUsername","setUsername")),Uh(cg,"password",ig("getPassword","setPassword")),Uh(cg,"host",ig("getHost","setHost")),Uh(cg,"hostname",ig("getHostname","setHostname")),Uh(cg,"port",ig("getPort","setPort")),Uh(cg,"pathname",ig("getPathname","setPathname")),Uh(cg,"search",ig("getSearch","setSearch")),Uh(cg,"searchParams",ig("getSearchParams")),Uh(cg,"hash",ig("getHash","setHash"))),Lh(cg,"toJSON",(function(){return Ph(this).serialize()}),{enumerable:!0}),Lh(cg,"toString",(function(){return Ph(this).serialize()}),{enumerable:!0}),Oh){var bg=Oh.createObjectURL,tg=Oh.revokeObjectURL;bg&&Lh(Zg,"createObjectURL",Jh(bg,Oh)),tg&&Lh(Zg,"revokeObjectURL",Jh(tg,Oh))}Qh(Zg,"URL"),Sh({global:!0,constructor:!0,forced:!Kh,sham:!rh},{URL:Zg});var Gg=rl;function Ig(l,d,Z,c){return new(Z||(Z=Promise))((function(i,b){function t(l){try{I(c.next(l))}catch(l){b(l)}}function G(l){try{I(c.throw(l))}catch(l){b(l)}}function I(l){var d;l.done?i(l.value):(d=l.value,d instanceof Z?d:new Z((function(l){l(d)}))).then(t,G)}I((c=c.apply(l,d||[])).next())}))}qc({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return Gg(URL.prototype.toString,this)}});var mg,ng="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function ag(l,d,Z,c){return new(Z||(Z=Promise))((function(i,b){function t(l){try{I(c.next(l))}catch(l){b(l)}}function G(l){try{I(c.throw(l))}catch(l){b(l)}}function I(l){var d;l.done?i(l.value):(d=l.value,d instanceof Z?d:new Z((function(l){l(d)}))).then(t,G)}I((c=c.apply(l,d||[])).next())}))}function og(l,d,Z,c){return new(Z||(Z=Promise))((function(i,b){function t(l){try{I(c.next(l))}catch(l){b(l)}}function G(l){try{I(c.throw(l))}catch(l){b(l)}}function I(l){var d;l.done?i(l.value):(d=l.value,d instanceof Z?d:new Z((function(l){l(d)}))).then(t,G)}I((c=c.apply(l,d||[])).next())}))}!function(l){l.formPost="form_post",l.query="query"}(mg||(mg={}));const eg="{{token}}",Xg="{{username}}",ug="{{scope}}",Vg="{{clientID}}",Wg="{{clientSecret}}";var hg;!function(l){l.ConfigData="config_data",l.OIDCProviderMetaData="oidc_provider_meta_data",l.SessionData="session_data",l.TemporaryData="temporary_data"}(hg||(hg={}));const pg="refresh_token_timer",gg="pkce_code_verifier",sg="#",yg=["RS256","RS512","RS384","PS256"],Cg="ERR_JWT_CLAIM_VALIDATION_FAILED",Rg="nbf",Yg="code",Sg="session_state",rg="sign_out_url",Kg="sign_out_success",Ng="state",Jg="openid";var Hg;!function(l){l.Include="include",l.SameOrigin="same-origin",l.Omit="omit"}(Hg||(Hg={}));class Lg{constructor(l,d,Z){this.message=Z,this.name=d,this.code=l,Object.setPrototypeOf(this,new.target.prototype)}}class Ug{constructor(){}static filterClaimsFromIDTokenPayload(l){const d=Object.assign({},l);null==d||delete d.iss,null==d||delete d.aud,null==d||delete d.exp,null==d||delete d.iat,null==d||delete d.acr,null==d||delete d.amr,null==d||delete d.azp,null==d||delete d.auth_time,null==d||delete d.nonce,null==d||delete d.c_hash,null==d||delete d.at_hash,null==d||delete d.nbf,null==d||delete d.isk,null==d||delete d.sid;const Z={};return Object.entries(d).forEach((l=>{let[d,c]=l;const i=d.split("_").map(((l,d)=>0===d?l:[l[0].toUpperCase(),...l.slice(1)].join(""))).join("");Z[i]=c})),Z}static getTokenRequestHeaders(){return{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"}}static generateStateParamForRequestCorrelation(l,d){const Z=parseInt(l.split("#")[1]);return d?"".concat(d,"_request_").concat(Z):"request_".concat(Z)}static extractPKCEKeyFromStateParam(l){return"pkce_code_verifier#".concat(parseInt(l.split("request_")[1]))}}Ug.getTenantDomainFromIdTokenPayload=function(l){let d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"@";const Z=l.sub.split(d);return Z.length>2?Z[Z.length-1]:""};class vg{constructor(l,d){this._dataLayer=l,this._config=()=>og(this,void 0,void 0,(function*(){return yield this._dataLayer.getConfigData()})),this._oidcProviderMetaData=()=>og(this,void 0,void 0,(function*(){return yield this._dataLayer.getOIDCProviderMetaData()})),this._cryptoHelper=d}resolveEndpoints(l){return og(this,void 0,void 0,(function*(){const d={},Z=yield this._config();return Z.endpoints&&Object.keys(Z.endpoints).forEach((l=>{const c=l.replace(/[A-Z]/g,(l=>"_".concat(l.toLowerCase())));d[c]=(null==Z?void 0:Z.endpoints)?Z.endpoints[l]:""})),Object.assign(Object.assign({},l),d)}))}resolveEndpointsExplicitly(){return og(this,void 0,void 0,(function*(){const l={},d=yield this._config(),Z=["authorization_endpoint","end_session_endpoint","jwks_uri","check_session_iframe","revocation_endpoint","token_endpoint","issuer","userinfo_endpoint"];if(!d.endpoints||!Object.keys(null==d?void 0:d.endpoints).every((l=>{const d=l.replace(/[A-Z]/g,(l=>"_".concat(l.toLowerCase())));return Z.includes(d)})))throw new Lg("JS-AUTH_HELPER-REE-NF01","No required endpoints.","Required oidc endpoints are not defined");return d.endpoints&&Object.keys(d.endpoints).forEach((Z=>{const c=Z.replace(/[A-Z]/g,(l=>"_".concat(l.toLowerCase())));l[c]=(null==d?void 0:d.endpoints)?d.endpoints[Z]:""})),Object.assign({},l)}))}resolveEndpointsByBaseURL(){return og(this,void 0,void 0,(function*(){const l={},d=yield this._config(),Z=d.baseUrl;if(!Z)throw new Lg("JS-AUTH_HELPER_REBO-NF01","Base URL not defined.","Base URL is not defined in AuthClient config.");d.endpoints&&Object.keys(d.endpoints).forEach((Z=>{const c=Z.replace(/[A-Z]/g,(l=>"_".concat(l.toLowerCase())));l[c]=(null==d?void 0:d.endpoints)?d.endpoints[Z]:""}));const c={authorization_endpoint:"".concat(Z,"/oauth2/authorize"),end_session_endpoint:"".concat(Z,"/oidc/logout"),issuer:"".concat(Z,"/oauth2/token"),jwks_uri:"".concat(Z,"/oauth2/jwks"),check_session_iframe:"".concat(Z,"/oidc/checksession"),revocation_endpoint:"".concat(Z,"/oauth2/revoke"),token_endpoint:"".concat(Z,"/oauth2/token"),userinfo_endpoint:"".concat(Z,"/oauth2/userinfo")};return Object.assign(Object.assign({},c),l)}))}validateIdToken(l){return og(this,void 0,void 0,(function*(){const d=(yield this._dataLayer.getOIDCProviderMetaData()).jwks_uri,Z=yield this._config();if(!d||0===d.trim().length)throw new Lg("JS_AUTH_HELPER-VIT-NF01","JWKS endpoint not found.","No JWKS endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the JWKS endpoint passed to the SDK is empty.");let c;try{c=yield fetch(d,{credentials:Z.sendCookiesInRequests?Hg.Include:Hg.SameOrigin})}catch(d){throw new Lg("JS-AUTH_HELPER-VIT-NE02","Request to jwks endpoint failed.",null!=d?d:"The request sent to get the jwks from the server failed.")}if(200!==c.status||!c.ok)throw new Lg("JS-AUTH_HELPER-VIT-HE03","Invalid response status received for jwks request (".concat(c.statusText,")."),yield c.json());const i=(yield this._oidcProviderMetaData()).issuer,{keys:b}=yield c.json(),t=yield this._cryptoHelper.getJWKForTheIdToken(l.split(".")[0],b);return this._cryptoHelper.isValidIdToken(l,t,(yield this._config()).clientID,null!=i?i:"",this._cryptoHelper.decodeIDToken(l).sub,(yield this._config()).clockTolerance)}))}getAuthenticatedUserInfo(l){var d,Z,c,i;const b=this._cryptoHelper.decodeIDToken(l),t=Ug.getTenantDomainFromIdTokenPayload(b),G=null!==(d=null==b?void 0:b.username)&&void 0!==d?d:"",I=null!==(Z=b.given_name)&&void 0!==Z?Z:"",m=null!==(c=b.family_name)&&void 0!==c?c:"",n=I&&m?"".concat(I," ").concat(m):I||m||"",a=null!==(i=b.preferred_username)&&void 0!==i?i:n;return Object.assign({displayName:a,tenantDomain:t,username:G},Ug.filterClaimsFromIDTokenPayload(b))}replaceCustomGrantTemplateTags(l,d){var Z;return og(this,void 0,void 0,(function*(){let c="openid";const i=yield this._config(),b=yield this._dataLayer.getSessionData(d);return i.scope&&i.scope.length>0&&(i.scope.includes("openid")||i.scope.push("openid"),c=i.scope.join(" ")),l.replace("{{token}}",b.access_token).replace("{{username}}",this.getAuthenticatedUserInfo(b.id_token).username).replace("{{scope}}",c).replace("{{clientID}}",i.clientID).replace("{{clientSecret}}",null!==(Z=i.clientSecret)&&void 0!==Z?Z:"")}))}clearUserSessionData(l){return og(this,void 0,void 0,(function*(){yield this._dataLayer.removeTemporaryData(l),yield this._dataLayer.removeSessionData(l)}))}handleTokenResponse(l,d){return og(this,void 0,void 0,(function*(){if(200!==l.status||!l.ok)throw new Lg("JS-AUTH_HELPER-HTR-NE01","Invalid response status received for token request (".concat(l.statusText,")."),yield l.json());const Z=yield l.json();if(Z.created_at=(new Date).getTime(),(yield this._config()).validateIDToken)return this.validateIdToken(Z.id_token).then((()=>og(this,void 0,void 0,(function*(){yield this._dataLayer.setSessionData(Z,d);const l={accessToken:Z.access_token,createdAt:Z.created_at,expiresIn:Z.expires_in,idToken:Z.id_token,refreshToken:Z.refresh_token,scope:Z.scope,tokenType:Z.token_type};return Promise.resolve(l)}))));{const l={accessToken:Z.access_token,createdAt:Z.created_at,expiresIn:Z.expires_in,idToken:Z.id_token,refreshToken:Z.refresh_token,scope:Z.scope,tokenType:Z.token_type};return yield this._dataLayer.setSessionData(Z,d),Promise.resolve(l)}}))}generatePKCEKey(l){var d;return og(this,void 0,void 0,(function*(){const Z=yield this._dataLayer.getTemporaryData(l),c=[];Object.keys(Z).forEach((l=>{l.startsWith("pkce_code_verifier")&&c.push(l)}));const i=c.sort().pop();return"pkce_code_verifier#".concat(parseInt(null!==(d=null==i?void 0:i.split("#")[1])&&void 0!==d?d:"-1")+1)}))}}class Fg{constructor(l){this._cryptoUtils=l}getCodeVerifier(){return this._cryptoUtils.base64URLEncode(this._cryptoUtils.generateRandomBytes(32))}getCodeChallenge(l){return this._cryptoUtils.base64URLEncode(this._cryptoUtils.hashSha256(l))}getJWKForTheIdToken(l,d){const Z=JSON.parse(this._cryptoUtils.base64URLDecode(l));for(const l of d)if(Z.kid===l.kid)return l;throw new Lg("JS-CRYPTO_UTIL-GJFTIT-IV01","kid not found.","Failed to find the 'kid' specified in the id_token. 'kid' found in the header : "+Z.kid+", Expected values: "+d.map((l=>l.kid)).join(", "))}isValidIdToken(l,d,Z,c,i,b){return this._cryptoUtils.verifyJwt(l,d,yg,Z,c,i,b).then((l=>l?Promise.resolve(!0):Promise.reject(new Lg("JS-CRYPTO_HELPER-IVIT-IV01","Invalid ID token.","ID token validation returned false")))).catch((l=>"ERR_JWT_CLAIM_VALIDATION_FAILED"===(null==l?void 0:l.code)&&"nbf"===(null==l?void 0:l.claim)?Promise.reject(new Lg("JS-CRYPTO_UTILS-IVIT-IV02","JWT NBF CLAIM VALIDATION FAILED","JWT NBF claim validation has been failed")):Promise.reject(new Lg("JS-CRYPTO_UTILS-IVIT-IV03","JWT VALIDATION FAILED","JWT validation has been failed"))))}decodeIDToken(l){try{const d=this._cryptoUtils.base64URLDecode(l.split(".")[1]);return JSON.parse(d)}catch(l){throw new Lg("JS-CRYPTO_UTIL-DIT-IV01","Decoding ID token failed.",l)}}}class kg{constructor(l,d){this._cryptoUtils=d,this._cryptoHelper=new Fg(d),this._authenticationHelper=new vg(l,this._cryptoHelper),this._dataLayer=l,this._config=()=>og(this,void 0,void 0,(function*(){return yield this._dataLayer.getConfigData()})),this._oidcProviderMetaData=()=>og(this,void 0,void 0,(function*(){return yield this._dataLayer.getOIDCProviderMetaData()}))}getAuthorizationURL(l,d){var Z,c,i;return og(this,void 0,void 0,(function*(){const b=yield this._dataLayer.getOIDCProviderMetaDataParameter("authorization_endpoint"),t=yield this._config();if(!b||0===b.trim().length)throw new Lg("JS-AUTH_CORE-GAU-NF01","No authorization endpoint found.","No authorization endpoint was found in the OIDC provider meta data from the well-known endpoint or the authorization endpoint passed to the SDK is empty.");const G=new URL(b),I=new Map;I.set("response_type","code"),I.set("client_id",t.clientID);let m="openid";t.scope&&t.scope.length>0&&(t.scope.includes("openid")||t.scope.push("openid"),m=t.scope.join(" ")),I.set("scope",m),I.set("redirect_uri",t.signInRedirectURL),t.responseMode&&I.set("response_mode",t.responseMode);const n=yield this._authenticationHelper.generatePKCEKey(d);if(t.enablePKCE){const l=null===(Z=this._cryptoHelper)||void 0===Z?void 0:Z.getCodeVerifier(),i=null===(c=this._cryptoHelper)||void 0===c?void 0:c.getCodeChallenge(l);yield this._dataLayer.setTemporaryDataParameter(n,l,d),I.set("code_challenge_method","S256"),I.set("code_challenge",i)}t.prompt&&I.set("prompt",t.prompt);const a=l;if(a)for(const[l,d]of Object.entries(a))if(""!=l&&""!=d&&"state"!==l){const Z=l.replace(/[A-Z]/g,(l=>"_".concat(l.toLowerCase())));I.set(Z,d.toString())}I.set("state",Ug.generateStateParamForRequestCorrelation(n,a?null===(i=a.state)||void 0===i?void 0:i.toString():""));for(const[l,d]of I.entries())G.searchParams.append(l,d);return G.toString()}))}requestAccessToken(l,d,Z,c){return og(this,void 0,void 0,(function*(){const i=(yield this._oidcProviderMetaData()).token_endpoint,b=yield this._config();if(!i||0===i.trim().length)throw new Lg("JS-AUTH_CORE-RAT1-NF01","Token endpoint not found.","No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the token endpoint passed to the SDK is empty.");d&&(yield this._dataLayer.setSessionDataParameter("session_state",d,c));const t=[];t.push("client_id=".concat(b.clientID)),b.clientSecret&&b.clientSecret.trim().length>0&&t.push("client_secret=".concat(b.clientSecret));const G=l;let I;t.push("code=".concat(G)),t.push("grant_type=authorization_code"),t.push("redirect_uri=".concat(b.signInRedirectURL)),b.enablePKCE&&(t.push("code_verifier=".concat(yield this._dataLayer.getTemporaryDataParameter(Ug.extractPKCEKeyFromStateParam(Z),c))),yield this._dataLayer.removeTemporaryDataParameter(Ug.extractPKCEKeyFromStateParam(Z),c));try{I=yield fetch(i,{body:t.join("&"),credentials:b.sendCookiesInRequests?Hg.Include:Hg.SameOrigin,headers:new Headers(Ug.getTokenRequestHeaders()),method:"POST"})}catch(i){throw new Lg("JS-AUTH_CORE-RAT1-NE02","Requesting access token failed",null!=i?i:"The request to get the access token from the server failed.")}if(!I.ok)throw new Lg("JS-AUTH_CORE-RAT1-HE03","Requesting access token failed with ".concat(I.statusText),yield I.json());return yield this._authenticationHelper.handleTokenResponse(I,c)}))}refreshAccessToken(l){return og(this,void 0,void 0,(function*(){const d=(yield this._oidcProviderMetaData()).token_endpoint,Z=yield this._config(),c=yield this._dataLayer.getSessionData(l);if(!c.refresh_token)throw new Lg("JS-AUTH_CORE-RAT2-NF01","No refresh token found.","There was no refresh token found. Asgardeo doesn't return a refresh token if the refresh token grant is not enabled.");if(!d||0===d.trim().length)throw new Lg("JS-AUTH_CORE-RAT2-NF02","No refresh token endpoint found.","No refresh token endpoint was in the OIDC provider meta data returned by the well-known endpoint or the refresh token endpoint passed to the SDK is empty.");const i=[];let b;i.push("client_id=".concat(Z.clientID)),i.push("refresh_token=".concat(c.refresh_token)),i.push("grant_type=refresh_token"),Z.clientSecret&&Z.clientSecret.trim().length>0&&i.push("client_secret=".concat(Z.clientSecret));try{b=yield fetch(d,{body:i.join("&"),credentials:Z.sendCookiesInRequests?Hg.Include:Hg.SameOrigin,headers:new Headers(Ug.getTokenRequestHeaders()),method:"POST"})}catch(d){throw new Lg("JS-AUTH_CORE-RAT2-NR03","Refresh access token request failed.",null!=d?d:"The request to refresh the access token failed.")}if(!b.ok)throw new Lg("JS-AUTH_CORE-RAT2-HE04","Refreshing access token failed with ".concat(b.statusText),yield b.json());return this._authenticationHelper.handleTokenResponse(b,l)}))}revokeAccessToken(l){return og(this,void 0,void 0,(function*(){const d=(yield this._oidcProviderMetaData()).revocation_endpoint,Z=yield this._config();if(!d||0===d.trim().length)throw new Lg("JS-AUTH_CORE-RAT3-NF01","No revoke access token endpoint found.","No revoke access token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the revoke access token endpoint passed to the SDK is empty.");const c=[];let i;c.push("client_id=".concat(Z.clientID)),c.push("token=".concat((yield this._dataLayer.getSessionData(l)).access_token)),c.push("token_type_hint=access_token");try{i=yield fetch(d,{body:c.join("&"),credentials:Z.sendCookiesInRequests?Hg.Include:Hg.SameOrigin,headers:new Headers(Ug.getTokenRequestHeaders()),method:"POST"})}catch(d){throw new Lg("JS-AUTH_CORE-RAT3-NE02","The request to revoke access token failed.",null!=d?d:"The request sent to revoke the access token failed.")}if(200!==i.status||!i.ok)throw new Lg("JS-AUTH_CORE-RAT3-HE03","Invalid response status received for revoke access token request (".concat(i.statusText,")."),yield i.json());return this._authenticationHelper.clearUserSessionData(l),Promise.resolve(i)}))}requestCustomGrant(l,d){return og(this,void 0,void 0,(function*(){const Z=yield this._oidcProviderMetaData(),c=yield this._config();let i;if(i=l.tokenEndpoint&&0!==l.tokenEndpoint.trim().length?l.tokenEndpoint:Z.token_endpoint,!i||0===i.trim().length)throw new Lg("JS-AUTH_CORE-RCG-NF01","Token endpoint not found.","No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the token endpoint passed to the SDK is empty.");const b=yield Promise.all(Object.entries(l.data).map((l=>{let[Z,c]=l;return og(this,void 0,void 0,(function*(){const l=yield this._authenticationHelper.replaceCustomGrantTemplateTags(c,d);return"".concat(Z,"=").concat(l)}))})));let t=Object.assign({},Ug.getTokenRequestHeaders());l.attachToken&&(t=Object.assign(Object.assign({},t),{Authorization:"Bearer ".concat((yield this._dataLayer.getSessionData(d)).access_token)}));const G={body:b.join("&"),credentials:c.sendCookiesInRequests?Hg.Include:Hg.SameOrigin,headers:new Headers(t),method:"POST"};let I;try{I=yield fetch(i,G)}catch(l){throw new Lg("JS-AUTH_CORE-RCG-NE02","The custom grant request failed.",null!=l?l:"The request sent to get the custom grant failed.")}if(200!==I.status||!I.ok)throw new Lg("JS-AUTH_CORE-RCG-HE03","Invalid response status received for the custom grant request. (".concat(I.statusText,")"),yield I.json());return l.returnsSession?this._authenticationHelper.handleTokenResponse(I,d):Promise.resolve(yield I.json())}))}getBasicUserInfo(l){return og(this,void 0,void 0,(function*(){const d=yield this._dataLayer.getSessionData(l),Z=this._authenticationHelper.getAuthenticatedUserInfo(null==d?void 0:d.id_token);let c={allowedScopes:d.scope,sessionState:d.session_state};return Object.keys(Z).forEach((l=>{void 0!==Z[l]&&""!==Z[l]&&null!==Z[l]||delete Z[l]})),c=Object.assign(Object.assign({},c),Z),c}))}getDecodedIDToken(l){return og(this,void 0,void 0,(function*(){const d=(yield this._dataLayer.getSessionData(l)).id_token;return this._cryptoHelper.decodeIDToken(d)}))}getCryptoHelper(){return og(this,void 0,void 0,(function*(){return this._cryptoHelper}))}getIDToken(l){return og(this,void 0,void 0,(function*(){return(yield this._dataLayer.getSessionData(l)).id_token}))}getOIDCProviderMetaData(l){return og(this,void 0,void 0,(function*(){const d=yield this._config();if(!l&&(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated")))return Promise.resolve();const Z=d.wellKnownEndpoint;if(Z){let l;try{if(l=yield fetch(Z),200!==l.status||!l.ok)throw new Error}catch(d){throw new Lg("JS-AUTH_CORE-GOPMD-HE01","Invalid well-known response","The well known endpoint response has been failed with an error.")}return yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpoints(yield l.json())),yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}if(d.baseUrl){try{yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpointsByBaseURL())}catch(d){throw new Lg("JS-AUTH_CORE-GOPMD-IV02","Resolving endpoints failed.",null!=d?d:"Resolving endpoints by base url failed.")}return yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}try{yield this._dataLayer.setOIDCProviderMetaData(yield this._authenticationHelper.resolveEndpointsExplicitly())}catch(d){throw new Lg("JS-AUTH_CORE-GOPMD-IV03","Resolving endpoints failed.",null!=d?d:"Resolving endpoints by explicitly failed.")}return yield this._dataLayer.setTemporaryDataParameter("op_config_initiated",!0),Promise.resolve()}))}getOIDCServiceEndpoints(){var l,d,Z,c,i,b,t,G,I,m;return og(this,void 0,void 0,(function*(){const n=yield this._oidcProviderMetaData();return{authorizationEndpoint:null!==(l=n.authorization_endpoint)&&void 0!==l?l:"",checkSessionIframe:null!==(d=n.check_session_iframe)&&void 0!==d?d:"",endSessionEndpoint:null!==(Z=n.end_session_endpoint)&&void 0!==Z?Z:"",introspectionEndpoint:null!==(c=n.introspection_endpoint)&&void 0!==c?c:"",issuer:null!==(i=n.issuer)&&void 0!==i?i:"",jwksUri:null!==(b=n.jwks_uri)&&void 0!==b?b:"",registrationEndpoint:null!==(t=n.registration_endpoint)&&void 0!==t?t:"",revocationEndpoint:null!==(G=n.revocation_endpoint)&&void 0!==G?G:"",tokenEndpoint:null!==(I=n.token_endpoint)&&void 0!==I?I:"",userinfoEndpoint:null!==(m=n.userinfo_endpoint)&&void 0!==m?m:""}}))}getSignOutURL(l){var d,Z,c;return og(this,void 0,void 0,(function*(){const i=null===(d=yield this._oidcProviderMetaData())||void 0===d?void 0:d.end_session_endpoint,b=yield this._config();if(!i||0===i.trim().length)throw new Lg("JS-AUTH_CORE-GSOU-NF01","Sign-out endpoint not found.","No sign-out endpoint was found in the OIDC provider meta data returned by the well-known endpoint or the sign-out endpoint passed to the SDK is empty.");const t=null===(Z=yield this._dataLayer.getSessionData(l))||void 0===Z?void 0:Z.id_token;if(!t||0===t.trim().length)throw new Lg("JS-AUTH_CORE-GSOU-NF02","ID token not found.","No ID token could be found. Either the session information is lost or you have not signed in.");const G=null!==(c=null==b?void 0:b.signOutRedirectURL)&&void 0!==c?c:null==b?void 0:b.signInRedirectURL;if(!G||0===G.trim().length)throw new Lg("JS-AUTH_CORE-GSOU-NF03","No sign-out redirect URL found.","The sign-out redirect URL cannot be found or the URL passed to the SDK is empty. No sign-in redirect URL has been found either. ");return"".concat(i,"?id_token_hint=").concat(t,"&post_logout_redirect_uri=").concat(G,"&state=sign_out_success")}))}signOut(l){return og(this,void 0,void 0,(function*(){return yield this.getSignOutURL(l)}))}clearUserSessionData(l){return og(this,void 0,void 0,(function*(){yield this._authenticationHelper.clearUserSessionData(l)}))}getAccessToken(l){var d;return og(this,void 0,void 0,(function*(){return null===(d=yield this._dataLayer.getSessionData(l))||void 0===d?void 0:d.access_token}))}isAuthenticated(l){return og(this,void 0,void 0,(function*(){return Boolean(yield this.getAccessToken(l))}))}getPKCECode(l,d){return og(this,void 0,void 0,(function*(){return yield this._dataLayer.getTemporaryDataParameter(Ug.extractPKCEKeyFromStateParam(l),d)}))}setPKCECode(l,d,Z){return og(this,void 0,void 0,(function*(){return yield this._dataLayer.setTemporaryDataParameter(Ug.extractPKCEKeyFromStateParam(d),l,Z)}))}updateConfig(l){return og(this,void 0,void 0,(function*(){yield this._dataLayer.setConfigData(l),yield this.getOIDCProviderMetaData(!0)}))}}class Bg{constructor(l,d){this._id=l,this._store=d}setDataInBulk(l,d){var Z;return og(this,void 0,void 0,(function*(){const c=null!==(Z=yield this._store.getData(l))&&void 0!==Z?Z:null,i=c&&JSON.parse(c),b=Object.assign(Object.assign({},i),d),t=JSON.stringify(b);yield this._store.setData(l,t)}))}setValue(l,d,Z){var c;return og(this,void 0,void 0,(function*(){const i=null!==(c=yield this._store.getData(l))&&void 0!==c?c:null,b=i&&JSON.parse(i),t=Object.assign(Object.assign({},b),{[d]:Z}),G=JSON.stringify(t);yield this._store.setData(l,G)}))}removeValue(l,d){var Z;return og(this,void 0,void 0,(function*(){const c=null!==(Z=yield this._store.getData(l))&&void 0!==Z?Z:null,i=c&&JSON.parse(c),b=Object.assign({},i);delete b[d];const t=JSON.stringify(b);yield this._store.setData(l,t)}))}_resolveKey(l,d){return d?"".concat(l,"-").concat(this._id,"-").concat(d):"".concat(l,"-").concat(this._id)}setConfigData(l){return og(this,void 0,void 0,(function*(){yield this.setDataInBulk(this._resolveKey(hg.ConfigData),l)}))}setOIDCProviderMetaData(l){return og(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(hg.OIDCProviderMetaData),l)}))}setTemporaryData(l,d){return og(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(hg.TemporaryData,d),l)}))}setSessionData(l,d){return og(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(hg.SessionData,d),l)}))}setCustomData(l,d,Z){return og(this,void 0,void 0,(function*(){this.setDataInBulk(this._resolveKey(l,Z),d)}))}getConfigData(){var l;return og(this,void 0,void 0,(function*(){return JSON.parse(null!==(l=yield this._store.getData(this._resolveKey(hg.ConfigData)))&&void 0!==l?l:null)}))}getOIDCProviderMetaData(){var l;return og(this,void 0,void 0,(function*(){return JSON.parse(null!==(l=yield this._store.getData(this._resolveKey(hg.OIDCProviderMetaData)))&&void 0!==l?l:null)}))}getTemporaryData(l){var d;return og(this,void 0,void 0,(function*(){return JSON.parse(null!==(d=yield this._store.getData(this._resolveKey(hg.TemporaryData,l)))&&void 0!==d?d:null)}))}getSessionData(l){var d;return og(this,void 0,void 0,(function*(){return JSON.parse(null!==(d=yield this._store.getData(this._resolveKey(hg.SessionData,l)))&&void 0!==d?d:null)}))}getCustomData(l,d){var Z;return og(this,void 0,void 0,(function*(){return JSON.parse(null!==(Z=yield this._store.getData(this._resolveKey(l,d)))&&void 0!==Z?Z:null)}))}removeConfigData(){return og(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(hg.ConfigData))}))}removeOIDCProviderMetaData(){return og(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(hg.OIDCProviderMetaData))}))}removeTemporaryData(l){return og(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(hg.TemporaryData,l))}))}removeSessionData(l){return og(this,void 0,void 0,(function*(){yield this._store.removeData(this._resolveKey(hg.SessionData,l))}))}getConfigDataParameter(l){return og(this,void 0,void 0,(function*(){const d=yield this._store.getData(this._resolveKey(hg.ConfigData));return d&&JSON.parse(d)[l]}))}getOIDCProviderMetaDataParameter(l){return og(this,void 0,void 0,(function*(){const d=yield this._store.getData(this._resolveKey(hg.OIDCProviderMetaData));return d&&JSON.parse(d)[l]}))}getTemporaryDataParameter(l,d){return og(this,void 0,void 0,(function*(){const Z=yield this._store.getData(this._resolveKey(hg.TemporaryData,d));return Z&&JSON.parse(Z)[l]}))}getSessionDataParameter(l,d){return og(this,void 0,void 0,(function*(){const Z=yield this._store.getData(this._resolveKey(hg.SessionData,d));return Z&&JSON.parse(Z)[l]}))}setConfigDataParameter(l,d){return og(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(hg.ConfigData),l,d)}))}setOIDCProviderMetaDataParameter(l,d){return og(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(hg.OIDCProviderMetaData),l,d)}))}setTemporaryDataParameter(l,d,Z){return og(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(hg.TemporaryData,Z),l,d)}))}setSessionDataParameter(l,d,Z){return og(this,void 0,void 0,(function*(){yield this.setValue(this._resolveKey(hg.SessionData,Z),l,d)}))}removeConfigDataParameter(l){return og(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(hg.ConfigData),l)}))}removeOIDCProviderMetaDataParameter(l){return og(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(hg.OIDCProviderMetaData),l)}))}removeTemporaryDataParameter(l,d){return og(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(hg.TemporaryData,d),l)}))}removeSessionDataParameter(l,d){return og(this,void 0,void 0,(function*(){yield this.removeValue(this._resolveKey(hg.SessionData,d),l)}))}}const zg={clockTolerance:300,enablePKCE:!0,responseMode:mg.query,scope:["openid"],sendCookiesInRequests:!0,validateIDToken:!0};class Tg{
/**
       * This is the constructor method that returns an instance of the .
       *
       * @param {Store} store - The store object.
       *
       * @example
       * ```
       * const _store: Store = new DataStore();
       * const auth = new AsgardeoAuthClient<CustomClientConfig>(_store);
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#constructor
       * @preserve
       */
constructor(l,d){Tg._instanceID?Tg._instanceID+=1:Tg._instanceID=0,this._dataLayer=new Bg("instance_".concat(Tg._instanceID),l),this._authenticationCore=new kg(this._dataLayer,d),Tg._authenticationCore=new kg(this._dataLayer,d);
/**
         *
         * This method initializes the SDK with the config data.
         *
         * @param {AuthClientConfig<T>} config - The config object to initialize with.
         *
         * @example
         * const config = {
         *     signInRedirectURL: "http://localhost:3000/sign-in",
         *     clientID: "client ID",
         *     baseUrl: "https://localhost:9443"
         * }
         *
         * await auth.initialize(config);
         *
         * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#initialize
         *
         * @preserve
         */}initialize(l){var d,Z,c;return og(this,void 0,void 0,(function*(){yield this._dataLayer.setConfigData(Object.assign(Object.assign(Object.assign({},zg),l),{scope:[...null!==(d=zg.scope)&&void 0!==d?d:[],...null!==(c=null===(Z=l.scope)||void 0===Z?void 0:Z.filter((l=>{var d;return!(null===(d=null==zg?void 0:zg.scope)||void 0===d?void 0:d.includes(l))})))&&void 0!==c?c:[]]}))}))}
/**
       * This method returns the `DataLayer` object that allows you to access authentication data.
       *
       * @return {DataLayer} - The `DataLayer` object.
       *
       * @example
       * ```
       * const data = auth.getDataLayer();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDataLayer
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getDataLayer(){return this._dataLayer}
/**
       * This is an async method that returns a Promise that resolves with the authorization URL.
       *
       * @param {GetAuthURLConfig} config - (Optional) A config object to force initialization and pass
       * custom path parameters such as the fidp parameter.
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<string>} - A promise that resolves with the authorization URL.
       *
       * @example
       * ```
       * auth.getAuthorizationURL().then((url)=>{
       *  // console.log(url);
       * }).catch((error)=>{
       *  // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAuthorizationURL
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getAuthorizationURL(l,d){return og(this,void 0,void 0,(function*(){const Z=Object.assign({},l);return null==Z||delete Z.forceInit,(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated"))?this._authenticationCore.getAuthorizationURL(Z,d):this._authenticationCore.getOIDCProviderMetaData(null==l?void 0:l.forceInit).then((()=>this._authenticationCore.getAuthorizationURL(Z,d)))}))}
/**
       * This is an async method that sends a request to obtain the access token and returns a Promise
       * that resolves with the token and other relevant data.
       *
       * @param {string} authorizationCode - The authorization code.
       * @param {string} sessionState - The session state.
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<TokenResponse>} - A Promise that resolves with the token response.
       *
       * @example
       * ```
       * auth.requestAccessToken(authCode, sessionState).then((token)=>{
       *  // console.log(token);
       * }).catch((error)=>{
       *  // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestAccessToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */requestAccessToken(l,d,Z,c){return og(this,void 0,void 0,(function*(){return(yield this._dataLayer.getTemporaryDataParameter("op_config_initiated"))?this._authenticationCore.requestAccessToken(l,d,Z,c):this._authenticationCore.getOIDCProviderMetaData(!1).then((()=>this._authenticationCore.requestAccessToken(l,d,Z,c)))}))}
/**
       * This method clears all authentication data and returns the sign-out URL.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<string>} - A Promise that resolves with the sign-out URL.
       *
       * @example
       * ```
       * const signOutUrl = await auth.signOut();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#signOut
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */signOut(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.signOut(l)}))}
/**
       * This method returns the sign-out URL.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * **This doesn't clear the authentication data.**
       *
       * @return {Promise<string>} - A Promise that resolves with the sign-out URL.
       *
       * @example
       * ```
       * const signOutUrl = await auth.getSignOutURL();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getSignOutURL
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getSignOutURL(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getSignOutURL(l)}))}
/**
       * This method returns OIDC service endpoints that are fetched from the `.well-known` endpoint.
       *
       * @return {Promise<OIDCEndpoints>} - A Promise that resolves with an object containing the OIDC service endpoints.
       *
       * @example
       * ```
       * const endpoints = await auth.getOIDCServiceEndpoints();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getOIDCServiceEndpoints
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getOIDCServiceEndpoints(){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getOIDCServiceEndpoints()}))}
/**
       * This method decodes the payload of the ID token and returns it.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<DecodedIDTokenPayload>} - A Promise that resolves with the decoded ID token payload.
       *
       * @example
       * ```
       * const decodedIdToken = await auth.getDecodedIDToken();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDecodedIDToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getDecodedIDToken(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getDecodedIDToken(l)}))}
/**
       * This method returns the ID token.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<string>} - A Promise that resolves with the ID token.
       *
       * @example
       * ```
       * const idToken = await auth.getIDToken();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIDToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getIDToken(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getIDToken(l)}))}
/**
       * This method returns the basic user information obtained from the ID token.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<BasicUserInfo>} - A Promise that resolves with an object containing the basic user information.
       *
       * @example
       * ```
       * const userInfo = await auth.getBasicUserInfo();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getBasicUserInfo
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getBasicUserInfo(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getBasicUserInfo(l)}))}
/**
       * This method returns the crypto helper object.
       *
       * @return {Promise<CryptoHelper>} - A Promise that resolves with a CryptoHelper object.
       *
       * @example
       * ```
       * const cryptoHelper = await auth.CryptoHelper();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getCryptoHelper
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getCryptoHelper(){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getCryptoHelper()}))}
/**
       * This method revokes the access token.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * **This method also clears the authentication data.**
       *
       * @return {Promise<FetchResponse>} - A Promise that returns the response of the revoke-access-token request.
       *
       * @example
       * ```
       * auth.revokeAccessToken().then((response)=>{
       *  // console.log(response);
       * }).catch((error)=>{
       *  // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#revokeAccessToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */revokeAccessToken(l){return this._authenticationCore.revokeAccessToken(l)}
/**
       * This method refreshes the access token and returns a Promise that resolves with the new access
       * token and other relevant data.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<TokenResponse>} - A Promise that resolves with the token response.
       *
       * @example
       * ```
       * auth.refreshAccessToken().then((response)=>{
       *  // console.log(response);
       * }).catch((error)=>{
       *  // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#refreshAccessToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */refreshAccessToken(l){return this._authenticationCore.refreshAccessToken(l)}
/**
       * This method returns the access token.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<string>} - A Promise that resolves with the access token.
       *
       * @example
       * ```
       * const accessToken = await auth.getAccessToken();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAccessToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getAccessToken(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getAccessToken(l)}))}
/**
       * This method sends a custom-grant request and returns a Promise that resolves with the response
       * depending on the config passed.
       *
       * @param {CustomGrantConfig} config - A config object containing the custom grant configurations.
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<TokenResponse | FetchResponse>} - A Promise that resolves with the response depending
       * on your configurations.
       *
       * @example
       * ```
       * const config = {
       *   attachToken: false,
       *   data: {
       *       client_id: "{{clientID}}",
       *       grant_type: "account_switch",
       *       scope: "{{scope}}",
       *       token: "{{token}}",
       *   },
       *   id: "account-switch",
       *   returnResponse: true,
       *   returnsSession: true,
       *   signInRequired: true
       * }
       *
       * auth.requestCustomGrant(config).then((response)=>{
       *  // console.log(response);
       * }).catch((error)=>{
       *  // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestCustomGrant
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */requestCustomGrant(l,d){return this._authenticationCore.requestCustomGrant(l,d)}
/**
       * This method returns if the user is authenticated or not.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @return {Promise<boolean>} - A Promise that resolves with `true` if the user is authenticated, `false` otherwise.
       *
       * @example
       * ```
       * await auth.isAuthenticated();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isAuthenticated
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */isAuthenticated(l){return og(this,void 0,void 0,(function*(){return this._authenticationCore.isAuthenticated(l)}))}
/**
       * This method returns the PKCE code generated during the generation of the authentication URL.
       *
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       * @param {string} state - The state parameter that was passed in the authentication URL.
       *
       * @return {Promise<string>} - A Promise that resolves with the PKCE code.
       *
       * @example
       * ```
       * const pkce = await getPKCECode();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getPKCECode
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getPKCECode(l,d){return og(this,void 0,void 0,(function*(){return this._authenticationCore.getPKCECode(l,d)}))}
/**
       * This method sets the PKCE code to the data store.
       *
       * @param {string} pkce - The PKCE code.
       * @param {string} state - The state parameter that was passed in the authentication URL.
       * @param {string} userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user
       * scenarios where each user should be uniquely identified.
       *
       * @example
       * ```
       * await auth.setPKCECode("pkce_code")
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#setPKCECode
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */setPKCECode(l,d,Z){return og(this,void 0,void 0,(function*(){yield this._authenticationCore.setPKCECode(l,d,Z)}))}
/**
       * This method returns if the sign-out is successful or not.
       *
       * @param {string} signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.
       *
       * **The server appends path parameters to the `signOutRedirectURL` and these path parameters
       *  are required for this method to function.**
       *
       * @return {boolean} - `true` if successful, `false` otherwise.
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isSignOutSuccessful
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */static isSignOutSuccessful(l){const d=new URL(l),Z=d.searchParams.get("state"),c=Boolean(d.searchParams.get("error"));return!!Z&&"sign_out_success"===Z&&!c}
/**
       * This method returns if the sign-out has failed or not.
       *
       * @param {string} signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.
       *
       * **The server appends path parameters to the `signOutRedirectURL` and these path parameters
       *  are required for this method to function.**
       *
       * @return {boolean} - `true` if successful, `false` otherwise.
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#didSignOutFail
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */static didSignOutFail(l){const d=new URL(l),Z=d.searchParams.get("state"),c=Boolean(d.searchParams.get("error"));return!!Z&&"sign_out_success"===Z&&c}
/**
       * This method updates the configuration that was passed into the constructor when instantiating this class.
       *
       * @param {Partial<AuthClientConfig<T>>} config - A config object to update the SDK configurations with.
       *
       * @example
       * ```
       * const config = {
       *     signInRedirectURL: "http://localhost:3000/sign-in",
       *     clientID: "client ID",
       *     baseUrl: "https://localhost:9443"
       * }
       *
       * await auth.updateConfig(config);
       * ```
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#updateConfig
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */updateConfig(l){return og(this,void 0,void 0,(function*(){yield this._authenticationCore.updateConfig(l)}))}static clearUserSessionData(l){return og(this,void 0,void 0,(function*(){yield this._authenticationCore.clearUserSessionData(l)}))}}var Ag,xg,Qg,fg=("",null,!1,function(l){return Ag=Ag||function(l,d,Z){var c=void 0===d?null:d,i=function(l,d){var Z=atob(l);if(d){for(var c=new Uint8Array(Z.length),i=0,b=Z.length;i<b;++i)c[i]=Z.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(c.buffer))}return Z}(l,void 0!==Z&&Z),b=i.indexOf("\n",10)+1,t=i.substring(b)+(c?"//# sourceMappingURL="+c:""),G=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(G)}("",null,false),new Worker(Ag,l)});!function(l){l.LocalStorage="localStorage",l.SessionStorage="sessionStorage",l.WebWorker="webWorker",l.BrowserMemory="browserMemory"}(xg||(xg={})),function(l){l.SignIn="sign-in",l.SignOut="sign-out",l.Initialize="initialize",l.HttpRequestStart="http-request-start",l.HttpRequestFinish="http-request-finish",l.HttpRequestError="http-request-error",l.HttpRequestSuccess="http-request-success",l.RevokeAccessToken="revoke-access-token",l.CustomGrant="custom-grant",l.SignOutFailed="sign-out-failed"}(Qg||(Qg={}));const wg="Y2hlY2tTZXNzaW9u";class jg{constructor(l,d){this._authenticationClient=l,this._dataLayer=this._authenticationClient.getDataLayer(),this._spaHelper=d}enableHttpHandler(l){(null==l?void 0:l.enableHandler)&&l.enableHandler()}disableHttpHandler(l){(null==l?void 0:l.disableHandler)&&l.disableHandler()}initializeSessionManger(l,d,Z,c,i){var b,t,G;i.initialize(l.clientID,null!==(b=d.checkSessionIframe)&&void 0!==b?b:"",Z,null!==(t=l.checkSessionInterval)&&void 0!==t?t:3,null!==(G=l.sessionRefreshInterval)&&void 0!==G?G:300,l.signInRedirectURL,c)}requestCustomGrant(l,d){var Z,c,i;return ag(this,void 0,void 0,(function*(){let b=!0,t=!1;if(null==l?void 0:l.tokenEndpoint){b=!1;for(const d of[...null!==(c=null===(Z=yield this._dataLayer.getConfigData())||void 0===Z?void 0:Z.resourceServerURLs)&&void 0!==c?c:[],l.baseUrl])if(d&&(null===(i=l.tokenEndpoint)||void 0===i?void 0:i.startsWith(d))){t=!0;break}}return l.shouldReplayAfterRefresh&&this._dataLayer.setTemporaryDataParameter("custom_grant_config",JSON.stringify(l)),b||t?this._authenticationClient.requestCustomGrant(l).then((Z=>ag(this,void 0,void 0,(function*(){return d&&"function"==typeof d&&d(l),l.returnsSession?(this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()):Z})))).catch((l=>Promise.reject(l))):Promise.reject(new Lg("SPA-MAIN_THREAD_CLIENT-RCG-IV01","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified token endpoint in this request cannot be found among the `resourceServerURLs`"))}))}getCustomGrantConfigData(){return ag(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getTemporaryDataParameter("custom_grant_config");return l?JSON.parse(l):null}))}refreshAccessToken(l){return ag(this,void 0,void 0,(function*(){try{yield this._authenticationClient.refreshAccessToken();const d=yield this.getCustomGrantConfigData();return d&&(yield this.requestCustomGrant(d,l)),this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()}catch(l){return Promise.reject(l)}}))}httpRequest(l,d,Z,c,i,b){var t,G;return ag(this,void 0,void 0,(function*(){let I=!1;const m=yield this._dataLayer.getConfigData();for(const l of[...null!==(t=yield null==m?void 0:m.resourceServerURLs)&&void 0!==t?t:[],m.baseUrl])if(l&&(null===(G=null==d?void 0:d.url)||void 0===G?void 0:G.startsWith(l))){I=!0;break}return I?l.request(d).then((l=>Promise.resolve(l))).catch((t=>ag(this,void 0,void 0,(function*(){var G,I,m;if(401===(null===(G=null==t?void 0:t.response)||void 0===G?void 0:G.status)||!(null==t?void 0:t.response)){let n;try{n=yield this.refreshAccessToken(b)}catch(G){throw Z&&("function"==typeof c&&(yield c(Object.assign(Object.assign({},t),{code:"Access token is invalid"}))),"function"==typeof i&&i()),new Lg("SPA-AUTH_HELPER-HR-SE01",null!==(I=null==G?void 0:G.name)&&void 0!==I?I:"Refresh token request failed.",null!==(m=null==G?void 0:G.message)&&void 0!==m?m:"An error occurred while trying to refresh the access token following a 401 response from the server.")}if(n)try{const Z=yield l.request(d);return Promise.resolve(Z)}catch(G){return Z&&("function"==typeof c&&(yield c(G)),"function"==typeof i&&i()),Promise.reject(G)}}return Z&&("function"==typeof c&&(yield c(t)),"function"==typeof i&&i()),Promise.reject(t)})))):Promise.reject(new Lg("SPA-AUTH_HELPER-HR-IV02","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified endpoint in this request cannot be found among the `resourceServerURLs`"))}))}httpRequestAll(l,d,Z,c,i){var b,t,G;return ag(this,void 0,void 0,(function*(){let I=!0;const m=yield this._dataLayer.getConfigData();for(const d of l){let l=!1;for(const Z of[...null!==(t=null===(b=yield m)||void 0===b?void 0:b.resourceServerURLs)&&void 0!==t?t:[],m.baseUrl])if(Z&&(null===(G=d.url)||void 0===G?void 0:G.startsWith(Z))){l=!0;break}if(!l){I=!1;break}}const n=[];if(I)return l.forEach((l=>{n.push(d.request(l))})),(null==d?void 0:d.all)&&d.all(n).then((l=>Promise.resolve(l))).catch((l=>ag(this,void 0,void 0,(function*(){var b,t,G;if(401===(null===(b=null==l?void 0:l.response)||void 0===b?void 0:b.status)||!(null==l?void 0:l.response)){let b;try{b=yield this._authenticationClient.refreshAccessToken()}catch(d){throw Z&&("function"==typeof c&&(yield c(Object.assign(Object.assign({},l),{code:"Access token is invalid"}))),"function"==typeof i&&i()),new Lg("SPA-AUTH_HELPER-HRA-SE01",null!==(t=null==d?void 0:d.name)&&void 0!==t?t:"Refresh token request failed.",null!==(G=null==d?void 0:d.message)&&void 0!==G?G:"An error occurred while trying to refresh the access token following a 401 response from the server.")}if(b)return d.all&&d.all(n).then((l=>Promise.resolve(l))).catch((l=>ag(this,void 0,void 0,(function*(){return Z&&("function"==typeof c&&(yield c(l)),"function"==typeof i&&i()),Promise.reject(l)}))))}return Z&&("function"==typeof c&&(yield c(l)),"function"==typeof i&&i()),Promise.reject(l)}))));throw new Lg("SPA-AUTH_HELPER-HRA-IV02","Request to the provided endpoint is prohibited.","Requests can only be sent to resource servers specified by the `resourceServerURLs` attribute while initializing the SDK. The specified endpoint in this request cannot be found among the `resourceServerURLs`")}))}requestAccessToken(l,d,Z,c,i){return ag(this,void 0,void 0,(function*(){const b=yield this._dataLayer.getConfigData();if(b.storage===xg.BrowserMemory&&b.enablePKCE&&d){const l=Eg.getPKCE(Ug.extractPKCEKeyFromStateParam(d));yield this._authenticationClient.setPKCECode(Ug.extractPKCEKeyFromStateParam(d),l)}else b.storage===xg.WebWorker&&c&&(yield this._authenticationClient.setPKCECode(c,null!=i?i:""));return l?this._authenticationClient.requestAccessToken(l,null!=d?d:"",null!=i?i:"").then((()=>ag(this,void 0,void 0,(function*(){return b.storage!==xg.WebWorker?(Eg.setSignOutURL(yield this._authenticationClient.getSignOutURL()),this._spaHelper&&(this._spaHelper.clearRefreshTokenTimeout(),this._spaHelper.refreshAccessTokenAutomatically(this)),Z&&"function"==typeof Z&&b.enableOIDCSessionManagement&&Z()):this._spaHelper&&this._spaHelper.refreshAccessTokenAutomatically(this),this._authenticationClient.getBasicUserInfo()})))).catch((l=>Promise.reject(l))):Promise.reject(new Lg("SPA-AUTH_HELPER-RAT1-NF01","No authorization code.","No authorization code was found."))}))}trySignInSilently(l,d,Z){var c;return ag(this,void 0,void 0,(function*(){if(Eg.isInitializedSilentSignIn())return yield Z.receivePromptNoneResponse(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""});const i=document.getElementById("rpIFrame"),b=null===(c=null==i?void 0:i.contentDocument)||void 0===c?void 0:c.getElementById("promptNoneIFrame");try{const d=yield l();b.src=d}catch(l){return Promise.reject(l)}return new Promise(((l,Z)=>{const c=setTimeout((()=>{l(!1)}),1e4),i=b=>ag(this,void 0,void 0,(function*(){var t,G,I,m;const n=b.data;"check_session_signed_out"==(null==n?void 0:n.type)&&(window.removeEventListener("message",i),clearTimeout(c),l(!1)),"check_session_signed_in"==(null==n?void 0:n.type)&&(null===(t=null==n?void 0:n.data)||void 0===t?void 0:t.code)&&d(null===(G=null==n?void 0:n.data)||void 0===G?void 0:G.code,null===(I=null==n?void 0:n.data)||void 0===I?void 0:I.sessionState,null===(m=null==n?void 0:n.data)||void 0===m?void 0:m.state).then((d=>{window.removeEventListener("message",i),l(d)})).catch((l=>{window.removeEventListener("message",i),Z(l)})).finally((()=>{clearTimeout(c)}))}));window.addEventListener("message",i)}))}))}handleSignIn(l,d,Z){return ag(this,void 0,void 0,(function*(){const c=yield this._dataLayer.getConfigData();if(yield l())return Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""});if(c.storage!==xg.WebWorker&&(yield this._authenticationClient.isAuthenticated()))return this._spaHelper.clearRefreshTokenTimeout(),this._spaHelper.refreshAccessTokenAutomatically(this),c.enableOIDCSessionManagement&&d(),Promise.resolve(yield this._authenticationClient.getBasicUserInfo());const i=new URL(window.location.href).searchParams.get("error"),b=new URL(window.location.href).searchParams.get("error_description");if(i){const l=new URL(window.location.href);throw l.searchParams.delete("error"),l.searchParams.delete("error_description"),history.pushState(null,document.title,l.toString()),new Lg("SPA-AUTH_HELPER-SI-SE01",i,null!=b?b:"")}if(c.storage===xg.WebWorker&&Z){const l=yield Z();if(l)return l}}))}getBasicUserInfo(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getBasicUserInfo()}))}getDecodedIDToken(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getDecodedIDToken()}))}getDecodedIDPIDToken(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getDecodedIDToken()}))}getCryptoHelper(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getCryptoHelper()}))}getIDToken(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getIDToken()}))}getOIDCServiceEndpoints(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getOIDCServiceEndpoints()}))}getAccessToken(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.getAccessToken()}))}getIDPAccessToken(){var l;return ag(this,void 0,void 0,(function*(){return null===(l=yield this._dataLayer.getSessionData())||void 0===l?void 0:l.access_token}))}getDataLayer(){return this._dataLayer}isAuthenticated(){return ag(this,void 0,void 0,(function*(){return this._authenticationClient.isAuthenticated()}))}}class Mg{constructor(l){this._authenticationClient=l,this._dataLayer=this._authenticationClient.getDataLayer()}refreshAccessTokenAutomatically(l){return ag(this,void 0,void 0,(function*(){const d=yield this._dataLayer.getSessionData();if(d.refresh_token){const Z=parseInt(d.expires_in),c=setTimeout((()=>ag(this,void 0,void 0,(function*(){yield l.refreshAccessToken()}))),1e3*(Z<=10?Z:Z-10));yield this._dataLayer.setTemporaryDataParameter(pg,JSON.stringify(c))}}))}clearRefreshTokenTimeout(){return ag(this,void 0,void 0,(function*(){if(yield this._dataLayer.getTemporaryDataParameter(pg)){const l=JSON.parse(yield this._dataLayer.getTemporaryDataParameter(pg));clearTimeout(l)}}))}}class Pg{constructor(){}static generateSuccessMessage(l){return{blob:(null==l?void 0:l.data)instanceof Blob?null==l?void 0:l.data:null,data:JSON.stringify(null!=l?l:""),success:!0}}static generateFailureMessage(l){return(null==l?void 0:l.toJSON)&&delete l.toJSON,{error:JSON.stringify(null!=l?l:""),success:!1}}}class Eg{constructor(){}static removeAuthorizationCode(){const l=location.href;history.pushState({},document.title,l.replace(/\?code=.*$/,""))}static getPKCE(l){var d;return null!==(d=sessionStorage.getItem(l))&&void 0!==d?d:""}static setPKCE(l,d){sessionStorage.setItem(l,d)}static setSignOutURL(l){sessionStorage.setItem(rg,l)}static getSignOutURL(){var l;return null!==(l=sessionStorage.getItem(rg))&&void 0!==l?l:""}static removePKCE(l){sessionStorage.removeItem(l)}static canContinueSignIn(l,d){return!(l&&!Eg.hasErrorInURL()&&!Eg.hasAuthSearchParamsInURL()&&!d)}static isInitializedSilentSignIn(){return Eg.isSilentStatePresentInURL()}static wasSignInCalled(){return!(!Eg.hasErrorInURL()&&!Eg.hasAuthSearchParamsInURL()||this.isSilentStatePresentInURL())}static wasSilentSignInCalled(){const l=sessionStorage.getItem("initialized-silent-sign-in"),d=l?JSON.parse(l):null;return Boolean(d)}static isSignOutSuccessful(){return ag(this,void 0,void 0,(function*(){if(Tg.isSignOutSuccessful(window.location.href)){const l=window.location.href.split("?")[0];return history.pushState({},document.title,l),yield Tg.clearUserSessionData(),!0}return!1}))}static didSignOutFail(){if(Tg.didSignOutFail(window.location.href)){const l=new URL(window.location.href),d=l.searchParams.get("error"),Z=l.searchParams.get("error_description"),c=window.location.href.split("?")[0];return history.pushState({},document.title,c),{description:null!=Z?Z:"",error:null!=d?d:""}}return!1}static isSilentStatePresentInURL(){var l;const d=new URL(window.location.href).searchParams.get("state");return null!==(l=null==d?void 0:d.includes("sign-in-silently"))&&void 0!==l&&l}static hasAuthSearchParamsInURL(){let l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location.search;return/[?&]code=[^&]+/.test(l)}static hasErrorInURL(){let l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location.href;const d=new URL(l);return!!d.searchParams.get("error")&&d.searchParams.get("state")!==Kg}static canSendPromptNoneRequest(){const l=sessionStorage.getItem("promptNoneRequestSent");return!(l&&JSON.parse(l))}static setPromptNoneRequestSent(l){sessionStorage.setItem("promptNoneRequestSent",JSON.stringify(l))}static waitTillPageRedirect(l){return ag(this,void 0,void 0,(function*(){const d=null!=l?l:3e3;yield new Promise((l=>setTimeout(l,1e3*d)))}))}}const Dg=(()=>{let l,d,Z,c,i,b,t,G,I,m,n;const a=(t,G,I,m,a,e,X)=>{l=t,d=G,Z=I,c=m,i=e,b=a,n=X,c>-1&&o(),b>-1&&(a=setInterval((()=>{u()}),1e3*b))},o=()=>ag(void 0,void 0,void 0,(function*(){var b;if(!d||!l||!i)return;const t="opIFrame",I=document.getElementById("rpIFrame");(null===(b=null==I?void 0:I.contentDocument)||void 0===b?void 0:b.getElementById(t)).src=d+"?client_id="+l+"&redirect_uri="+i,G=setInterval((function(){var c;return ag(this,void 0,void 0,(function*(){const i=yield Z();if(Boolean(l)&&Boolean(i)){const Z="".concat(l," ").concat(i),b=document.getElementById("rpIFrame"),G=(null===(c=null==b?void 0:b.contentDocument)||void 0===c?void 0:c.getElementById(t)).contentWindow;null==G||G.postMessage(Z,d)}}))}),1e3*c),X()})),e=()=>{clearInterval(G),clearInterval(void 0)},X=()=>{null===window||void 0===window||window.addEventListener("message",(function(l){var Z;return ag(this,void 0,void 0,(function*(){!d||(null==d?void 0:d.indexOf(l.origin))<0||"set_session_state_from_iframe"===(null===(Z=null==l?void 0:l.data)||void 0===Z?void 0:Z.type)||"unchanged"===l.data||("error"===l.data?window.location.href=yield t():"changed"===l.data&&u())}))}),!1)},u=()=>ag(void 0,void 0,void 0,(function*(){var l;const d=document.getElementById("rpIFrame"),Z=null===(l=null==d?void 0:d.contentDocument)||void 0===l?void 0:l.getElementById("promptNoneIFrame");if(Eg.canSendPromptNoneRequest()){Eg.setPromptNoneRequestSent(!0);const l=d=>{var Z,c,i;"set_session_state_from_iframe"===(null===(Z=null==d?void 0:d.data)||void 0===Z?void 0:Z.type)&&(m(null!==(i=null===(c=null==d?void 0:d.data)||void 0===c?void 0:c.data)&&void 0!==i?i:""),null===window||void 0===window||window.removeEventListener("message",l))};I!==xg.BrowserMemory&&I!==xg.WebWorker||null===window||void 0===window||window.addEventListener("message",l);const d=yield n({prompt:"none",responseMode:"query",state:wg});Z.src=d}})),V=l=>ag(void 0,void 0,void 0,(function*(){var d,Z;const c=new URL(window.location.href).searchParams.get("state"),i=new URL(window.location.href).searchParams.get(Sg),b=window.parent.parent;if(null!==c&&(c.includes(wg)||c.includes("sign-in-silently"))){const G=new URL(window.location.href).searchParams.get("code");if(null!==G&&0!==G.length){if(c.includes("sign-in-silently")){const l={data:{code:G,sessionState:null!=i?i:"",state:c},type:"check_session_signed_in"};return sessionStorage.setItem("initialized-silent-sign-in","false"),b.postMessage(l,b.origin),Eg.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield Eg.waitTillPageRedirect(),!0}const t=new URL(window.location.href).searchParams.get("session_state");if(I===xg.LocalStorage||I===xg.SessionStorage)l&&(yield l(t));else{const l={data:null!=t?t:"",type:"set_session_state_from_iframe"};null===(Z=null===(d=null===window||void 0===window?void 0:window.parent)||void 0===d?void 0:d.parent)||void 0===Z||Z.postMessage(l)}return Eg.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield Eg.waitTillPageRedirect(),!0}if(c.includes("sign-in-silently")){const l={type:"check_session_signed_out"};return window.parent.parent.postMessage(l,b.origin),Eg.setPromptNoneRequestSent(!1),window.location.href="about:blank",yield Eg.waitTillPageRedirect(),!0}return Eg.setPromptNoneRequestSent(!1),b.location.href=yield t(),window.location.href="about:blank",yield Eg.waitTillPageRedirect(),!0}return!1}));return(l,d,Z)=>ag(void 0,void 0,void 0,(function*(){var c;let i=document.createElement("iframe");i.setAttribute("id","rpIFrame"),i.style.display="none";let b=!1;for(i.onload=()=>{var l,d,Z,c;i=document.getElementById("rpIFrame");const t=null==i?void 0:i.contentDocument,G=null==t?void 0:t.createElement("iframe");G&&(G.setAttribute("id","opIFrame"),G.style.display="none");const I=null==t?void 0:t.createElement("iframe");I&&(I.setAttribute("id","promptNoneIFrame"),I.style.display="none"),G&&(null===(d=null===(l=null==i?void 0:i.contentDocument)||void 0===l?void 0:l.body)||void 0===d||d.appendChild(G)),I&&(null===(c=null===(Z=null==i?void 0:i.contentDocument)||void 0===Z?void 0:Z.body)||void 0===c||c.appendChild(I)),b=!0},null===(c=null===document||void 0===document?void 0:document.body)||void 0===c||c.appendChild(i),t=l,I=d,m=Z;!1===b;)yield new Promise((l=>setTimeout(l,1)));return{initialize:a,receivePromptNoneResponse:V,reset:e}}))})();var Og="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==ng?ng:"undefined"!=typeof self?self:{};var qg={exports:{}},_g=function(l,d){return function(){for(var Z=new Array(arguments.length),c=0;c<Z.length;c++)Z[c]=arguments[c];return l.apply(d,Z)}},$g=_g,ls=Object.prototype.toString;function ds(l){return Array.isArray(l)}function Zs(l){return void 0===l}function cs(l){return"[object ArrayBuffer]"===ls.call(l)}function is(l){return null!==l&&"object"==typeof l}function bs(l){if("[object Object]"!==ls.call(l))return!1;var d=Object.getPrototypeOf(l);return null===d||d===Object.prototype}function ts(l){return"[object Function]"===ls.call(l)}function Gs(l,d){if(null!=l)if("object"!=typeof l&&(l=[l]),ds(l))for(var Z=0,c=l.length;Z<c;Z++)d.call(null,l[Z],Z,l);else for(var i in l)Object.prototype.hasOwnProperty.call(l,i)&&d.call(null,l[i],i,l)}var Is={isArray:ds,isArrayBuffer:cs,isBuffer:function(l){return null!==l&&!Zs(l)&&null!==l.constructor&&!Zs(l.constructor)&&"function"==typeof l.constructor.isBuffer&&l.constructor.isBuffer(l)},isFormData:function(l){return"[object FormData]"===ls.call(l)},isArrayBufferView:function(l){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(l):l&&l.buffer&&cs(l.buffer)},isString:function(l){return"string"==typeof l},isNumber:function(l){return"number"==typeof l},isObject:is,isPlainObject:bs,isUndefined:Zs,isDate:function(l){return"[object Date]"===ls.call(l)},isFile:function(l){return"[object File]"===ls.call(l)},isBlob:function(l){return"[object Blob]"===ls.call(l)},isFunction:ts,isStream:function(l){return is(l)&&ts(l.pipe)},isURLSearchParams:function(l){return"[object URLSearchParams]"===ls.call(l)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:Gs,merge:function l(){var d={};function Z(Z,c){bs(d[c])&&bs(Z)?d[c]=l(d[c],Z):bs(Z)?d[c]=l({},Z):ds(Z)?d[c]=Z.slice():d[c]=Z}for(var c=0,i=arguments.length;c<i;c++)Gs(arguments[c],Z);return d},extend:function(l,d,Z){return Gs(d,(function(d,c){l[c]=Z&&"function"==typeof d?$g(d,Z):d})),l},trim:function(l){return l.trim?l.trim():l.replace(/^\s+|\s+$/g,"")},stripBOM:function(l){return 65279===l.charCodeAt(0)&&(l=l.slice(1)),l}},ms=Is;function ns(l){return encodeURIComponent(l).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var as=function(l,d,Z){if(!d)return l;var c;if(Z)c=Z(d);else if(ms.isURLSearchParams(d))c=d.toString();else{var i=[];ms.forEach(d,(function(l,d){null!=l&&(ms.isArray(l)?d+="[]":l=[l],ms.forEach(l,(function(l){ms.isDate(l)?l=l.toISOString():ms.isObject(l)&&(l=JSON.stringify(l)),i.push(ns(d)+"="+ns(l))})))})),c=i.join("&")}if(c){var b=l.indexOf("#");-1!==b&&(l=l.slice(0,b)),l+=(-1===l.indexOf("?")?"?":"&")+c}return l},os=Is;function es(){this.handlers=[]}es.prototype.use=function(l,d,Z){return this.handlers.push({fulfilled:l,rejected:d,synchronous:!!Z&&Z.synchronous,runWhen:Z?Z.runWhen:null}),this.handlers.length-1},es.prototype.eject=function(l){this.handlers[l]&&(this.handlers[l]=null)},es.prototype.forEach=function(l){os.forEach(this.handlers,(function(d){null!==d&&l(d)}))};var Xs=es,us=void 0!==ng?ng:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function Vs(){throw new Error("setTimeout has not been defined")}function Ws(){throw new Error("clearTimeout has not been defined")}var hs=Vs,ps=Ws;function gs(l){if(hs===setTimeout)return setTimeout(l,0);if((hs===Vs||!hs)&&setTimeout)return hs=setTimeout,setTimeout(l,0);try{return hs(l,0)}catch(d){try{return hs.call(null,l,0)}catch(d){return hs.call(this,l,0)}}}"function"==typeof us.setTimeout&&(hs=setTimeout),"function"==typeof us.clearTimeout&&(ps=clearTimeout);var ss,ys=[],Cs=!1,Rs=-1;function Ys(){Cs&&ss&&(Cs=!1,ss.length?ys=ss.concat(ys):Rs=-1,ys.length&&Ss())}function Ss(){if(!Cs){var l=gs(Ys);Cs=!0;for(var d=ys.length;d;){for(ss=ys,ys=[];++Rs<d;)ss&&ss[Rs].run();Rs=-1,d=ys.length}ss=null,Cs=!1,function(l){if(ps===clearTimeout)return clearTimeout(l);if((ps===Ws||!ps)&&clearTimeout)return ps=clearTimeout,clearTimeout(l);try{ps(l)}catch(d){try{return ps.call(null,l)}catch(d){return ps.call(this,l)}}}(l)}}function rs(l,d){this.fun=l,this.array=d}function Ks(){}rs.prototype.run=function(){this.fun.apply(null,this.array)};var Ns=Ks,Js=Ks,Hs=Ks,Ls=Ks,Us=Ks,vs=Ks,Fs=Ks,ks=us.performance||{},Bs=ks.now||ks.mozNow||ks.msNow||ks.oNow||ks.webkitNow||function(){return(new Date).getTime()},zs=new Date,Ts={nextTick:function(l){var d=new Array(arguments.length-1);if(arguments.length>1)for(var Z=1;Z<arguments.length;Z++)d[Z-1]=arguments[Z];ys.push(new rs(l,d)),1!==ys.length||Cs||gs(Ss)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:Ns,addListener:Js,once:Hs,off:Ls,removeListener:Us,removeAllListeners:vs,emit:Fs,binding:function(l){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(l){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(l){var d=.001*Bs.call(ks),Z=Math.floor(d),c=Math.floor(d%1*1e9);return l&&(Z-=l[0],(c-=l[1])<0&&(Z--,c+=1e9)),[Z,c]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-zs)/1e3}},As=Ts,xs=Is,Qs=function(l,d,Z,c,i){return l.config=d,Z&&(l.code=Z),l.request=c,l.response=i,l.isAxiosError=!0,l.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},l},fs={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ws=Qs,js=function(l,d,Z,c,i){var b=new Error(l);return ws(b,d,Z,c,i)},Ms=js,Ps=Is,Es=Ps.isStandardBrowserEnv()?{write:function(l,d,Z,c,i,b){var t=[];t.push(l+"="+encodeURIComponent(d)),Ps.isNumber(Z)&&t.push("expires="+new Date(Z).toGMTString()),Ps.isString(c)&&t.push("path="+c),Ps.isString(i)&&t.push("domain="+i),!0===b&&t.push("secure"),document.cookie=t.join("; ")},read:function(l){var d=document.cookie.match(new RegExp("(^|;\\s*)("+l+")=([^;]*)"));return d?decodeURIComponent(d[3]):null},remove:function(l){this.write(l,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},Ds=Is,Os=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],qs=Is,_s=qs.isStandardBrowserEnv()?function(){var l,d=/(msie|trident)/i.test(navigator.userAgent),Z=document.createElement("a");function c(l){var c=l;return d&&(Z.setAttribute("href",c),c=Z.href),Z.setAttribute("href",c),{href:Z.href,protocol:Z.protocol?Z.protocol.replace(/:$/,""):"",host:Z.host,search:Z.search?Z.search.replace(/^\?/,""):"",hash:Z.hash?Z.hash.replace(/^#/,""):"",hostname:Z.hostname,port:Z.port,pathname:"/"===Z.pathname.charAt(0)?Z.pathname:"/"+Z.pathname}}return l=c(window.location.href),function(d){var Z=qs.isString(d)?c(d):d;return Z.protocol===l.protocol&&Z.host===l.host}}():function(){return!0};function $s(l){this.message=l}$s.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},$s.prototype.__CANCEL__=!0;var ly=$s,dy=Is,Zy=Es,cy=as,iy=_s,by=js,ty=fs,Gy=ly,Iy=Is,my=function(l,d){xs.forEach(l,(function(Z,c){c!==d&&c.toUpperCase()===d.toUpperCase()&&(l[d]=Z,delete l[c])}))},ny=Qs,ay={"Content-Type":"application/x-www-form-urlencoded"};function oy(l,d){!Iy.isUndefined(l)&&Iy.isUndefined(l["Content-Type"])&&(l["Content-Type"]=d)}var ey,Xy={transitional:fs,adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==As&&"[object process]"===Object.prototype.toString.call(As))&&(ey=function(l){return new Promise((function(d,Z){var c,i=l.data,b=l.headers,t=l.responseType;function G(){l.cancelToken&&l.cancelToken.unsubscribe(c),l.signal&&l.signal.removeEventListener("abort",c)}dy.isFormData(i)&&delete b["Content-Type"];var I=new XMLHttpRequest;if(l.auth){var m=l.auth.username||"",n=l.auth.password?unescape(encodeURIComponent(l.auth.password)):"";b.Authorization="Basic "+btoa(m+":"+n)}var a=function(l,d){return l&&!function(l){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(l)}(d)?function(l,d){return d?l.replace(/\/+$/,"")+"/"+d.replace(/^\/+/,""):l}(l,d):d}(l.baseURL,l.url);function o(){if(I){var c="getAllResponseHeaders"in I?function(l){var d,Z,c,i={};return l?(Ds.forEach(l.split("\n"),(function(l){if(c=l.indexOf(":"),d=Ds.trim(l.substr(0,c)).toLowerCase(),Z=Ds.trim(l.substr(c+1)),d){if(i[d]&&Os.indexOf(d)>=0)return;i[d]="set-cookie"===d?(i[d]?i[d]:[]).concat([Z]):i[d]?i[d]+", "+Z:Z}})),i):i}(I.getAllResponseHeaders()):null;(function(l,d,Z){var c=Z.config.validateStatus;Z.status&&c&&!c(Z.status)?d(Ms("Request failed with status code "+Z.status,Z.config,null,Z.request,Z)):l(Z)})((function(l){d(l),G()}),(function(l){Z(l),G()}),{data:t&&"text"!==t&&"json"!==t?I.response:I.responseText,status:I.status,statusText:I.statusText,headers:c,config:l,request:I}),I=null}}if(I.open(l.method.toUpperCase(),cy(a,l.params,l.paramsSerializer),!0),I.timeout=l.timeout,"onloadend"in I?I.onloadend=o:I.onreadystatechange=function(){I&&4===I.readyState&&(0!==I.status||I.responseURL&&0===I.responseURL.indexOf("file:"))&&setTimeout(o)},I.onabort=function(){I&&(Z(by("Request aborted",l,"ECONNABORTED",I)),I=null)},I.onerror=function(){Z(by("Network Error",l,null,I)),I=null},I.ontimeout=function(){var d=l.timeout?"timeout of "+l.timeout+"ms exceeded":"timeout exceeded",c=l.transitional||ty;l.timeoutErrorMessage&&(d=l.timeoutErrorMessage),Z(by(d,l,c.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",I)),I=null},dy.isStandardBrowserEnv()){var e=(l.withCredentials||iy(a))&&l.xsrfCookieName?Zy.read(l.xsrfCookieName):void 0;e&&(b[l.xsrfHeaderName]=e)}"setRequestHeader"in I&&dy.forEach(b,(function(l,d){void 0===i&&"content-type"===d.toLowerCase()?delete b[d]:I.setRequestHeader(d,l)})),dy.isUndefined(l.withCredentials)||(I.withCredentials=!!l.withCredentials),t&&"json"!==t&&(I.responseType=l.responseType),"function"==typeof l.onDownloadProgress&&I.addEventListener("progress",l.onDownloadProgress),"function"==typeof l.onUploadProgress&&I.upload&&I.upload.addEventListener("progress",l.onUploadProgress),(l.cancelToken||l.signal)&&(c=function(l){I&&(Z(!l||l&&l.type?new Gy("canceled"):l),I.abort(),I=null)},l.cancelToken&&l.cancelToken.subscribe(c),l.signal&&(l.signal.aborted?c():l.signal.addEventListener("abort",c))),i||(i=null),I.send(i)}))}),ey),transformRequest:[function(l,d){return my(d,"Accept"),my(d,"Content-Type"),Iy.isFormData(l)||Iy.isArrayBuffer(l)||Iy.isBuffer(l)||Iy.isStream(l)||Iy.isFile(l)||Iy.isBlob(l)?l:Iy.isArrayBufferView(l)?l.buffer:Iy.isURLSearchParams(l)?(oy(d,"application/x-www-form-urlencoded;charset=utf-8"),l.toString()):Iy.isObject(l)||d&&"application/json"===d["Content-Type"]?(oy(d,"application/json"),function(l,d,Z){if(Iy.isString(l))try{return(0,JSON.parse)(l),Iy.trim(l)}catch(l){if("SyntaxError"!==l.name)throw l}return(0,JSON.stringify)(l)}(l)):l}],transformResponse:[function(l){var d=this.transitional||Xy.transitional,Z=d&&d.silentJSONParsing,c=d&&d.forcedJSONParsing,i=!Z&&"json"===this.responseType;if(i||c&&Iy.isString(l)&&l.length)try{return JSON.parse(l)}catch(l){if(i){if("SyntaxError"===l.name)throw ny(l,this,"E_JSON_PARSE");throw l}}return l}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(l){return l>=200&&l<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};Iy.forEach(["delete","get","head"],(function(l){Xy.headers[l]={}})),Iy.forEach(["post","put","patch"],(function(l){Xy.headers[l]=Iy.merge(ay)}));var uy=Xy,Vy=Is,Wy=uy,hy=function(l){return!(!l||!l.__CANCEL__)},py=Is,gy=function(l,d,Z){var c=this||Wy;return Vy.forEach(Z,(function(Z){l=Z.call(c,l,d)})),l},sy=hy,yy=uy,Cy=ly;function Ry(l){if(l.cancelToken&&l.cancelToken.throwIfRequested(),l.signal&&l.signal.aborted)throw new Cy("canceled")}var Yy=Is,Sy=function(l,d){d=d||{};var Z={};function c(l,d){return Yy.isPlainObject(l)&&Yy.isPlainObject(d)?Yy.merge(l,d):Yy.isPlainObject(d)?Yy.merge({},d):Yy.isArray(d)?d.slice():d}function i(Z){return Yy.isUndefined(d[Z])?Yy.isUndefined(l[Z])?void 0:c(void 0,l[Z]):c(l[Z],d[Z])}function b(l){if(!Yy.isUndefined(d[l]))return c(void 0,d[l])}function t(Z){return Yy.isUndefined(d[Z])?Yy.isUndefined(l[Z])?void 0:c(void 0,l[Z]):c(void 0,d[Z])}function G(Z){return Z in d?c(l[Z],d[Z]):Z in l?c(void 0,l[Z]):void 0}var I={url:b,method:b,data:b,baseURL:t,transformRequest:t,transformResponse:t,paramsSerializer:t,timeout:t,timeoutMessage:t,withCredentials:t,adapter:t,responseType:t,xsrfCookieName:t,xsrfHeaderName:t,onUploadProgress:t,onDownloadProgress:t,decompress:t,maxContentLength:t,maxBodyLength:t,transport:t,httpAgent:t,httpsAgent:t,cancelToken:t,socketPath:t,responseEncoding:t,validateStatus:G};return Yy.forEach(Object.keys(l).concat(Object.keys(d)),(function(l){var d=I[l]||i,c=d(l);Yy.isUndefined(c)&&d!==G||(Z[l]=c)})),Z},ry={};["object","boolean","number","function","string","symbol"].forEach((function(l,d){ry[l]=function(Z){return typeof Z===l||"a"+(d<1?"n ":" ")+l}}));var Ky={};ry.transitional=function(l,d,Z){function c(l,d){return"[Axios v0.26.1] Transitional option '"+l+"'"+d+(Z?". "+Z:"")}return function(Z,i,b){if(!1===l)throw new Error(c(i," has been removed"+(d?" in "+d:"")));return d&&!Ky[i]&&(Ky[i]=!0,console.warn(c(i," has been deprecated since v"+d+" and will be removed in the near future"))),!l||l(Z,i,b)}};var Ny={assertOptions:function(l,d,Z){if("object"!=typeof l)throw new TypeError("options must be an object");for(var c=Object.keys(l),i=c.length;i-- >0;){var b=c[i],t=d[b];if(t){var G=l[b],I=void 0===G||t(G,b,l);if(!0!==I)throw new TypeError("option "+b+" must be "+I)}else if(!0!==Z)throw Error("Unknown option "+b)}},validators:ry},Jy=Is,Hy=as,Ly=Xs,Uy=function(l){return Ry(l),l.headers=l.headers||{},l.data=gy.call(l,l.data,l.headers,l.transformRequest),l.headers=py.merge(l.headers.common||{},l.headers[l.method]||{},l.headers),py.forEach(["delete","get","head","post","put","patch","common"],(function(d){delete l.headers[d]})),(l.adapter||yy.adapter)(l).then((function(d){return Ry(l),d.data=gy.call(l,d.data,d.headers,l.transformResponse),d}),(function(d){return sy(d)||(Ry(l),d&&d.response&&(d.response.data=gy.call(l,d.response.data,d.response.headers,l.transformResponse))),Promise.reject(d)}))},vy=Sy,Fy=Ny,ky=Fy.validators;function By(l){this.defaults=l,this.interceptors={request:new Ly,response:new Ly}}By.prototype.request=function(l,d){"string"==typeof l?(d=d||{}).url=l:d=l||{},(d=vy(this.defaults,d)).method?d.method=d.method.toLowerCase():this.defaults.method?d.method=this.defaults.method.toLowerCase():d.method="get";var Z=d.transitional;void 0!==Z&&Fy.assertOptions(Z,{silentJSONParsing:ky.transitional(ky.boolean),forcedJSONParsing:ky.transitional(ky.boolean),clarifyTimeoutError:ky.transitional(ky.boolean)},!1);var c=[],i=!0;this.interceptors.request.forEach((function(l){"function"==typeof l.runWhen&&!1===l.runWhen(d)||(i=i&&l.synchronous,c.unshift(l.fulfilled,l.rejected))}));var b,t=[];if(this.interceptors.response.forEach((function(l){t.push(l.fulfilled,l.rejected)})),!i){var G=[Uy,void 0];for(Array.prototype.unshift.apply(G,c),G=G.concat(t),b=Promise.resolve(d);G.length;)b=b.then(G.shift(),G.shift());return b}for(var I=d;c.length;){var m=c.shift(),n=c.shift();try{I=m(I)}catch(l){n(l);break}}try{b=Uy(I)}catch(l){return Promise.reject(l)}for(;t.length;)b=b.then(t.shift(),t.shift());return b},By.prototype.getUri=function(l){return l=vy(this.defaults,l),Hy(l.url,l.params,l.paramsSerializer).replace(/^\?/,"")},Jy.forEach(["delete","get","head","options"],(function(l){By.prototype[l]=function(d,Z){return this.request(vy(Z||{},{method:l,url:d,data:(Z||{}).data}))}})),Jy.forEach(["post","put","patch"],(function(l){By.prototype[l]=function(d,Z,c){return this.request(vy(c||{},{method:l,url:d,data:Z}))}}));var zy=By,Ty=ly;function Ay(l){if("function"!=typeof l)throw new TypeError("executor must be a function.");var d;this.promise=new Promise((function(l){d=l}));var Z=this;this.promise.then((function(l){if(Z._listeners){var d,c=Z._listeners.length;for(d=0;d<c;d++)Z._listeners[d](l);Z._listeners=null}})),this.promise.then=function(l){var d,c=new Promise((function(l){Z.subscribe(l),d=l})).then(l);return c.cancel=function(){Z.unsubscribe(d)},c},l((function(l){Z.reason||(Z.reason=new Ty(l),d(Z.reason))}))}Ay.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},Ay.prototype.subscribe=function(l){this.reason?l(this.reason):this._listeners?this._listeners.push(l):this._listeners=[l]},Ay.prototype.unsubscribe=function(l){if(this._listeners){var d=this._listeners.indexOf(l);-1!==d&&this._listeners.splice(d,1)}},Ay.source=function(){var l;return{token:new Ay((function(d){l=d})),cancel:l}};var xy=Ay,Qy=Is,fy=Is,wy=_g,jy=zy,My=Sy,Py=function l(d){var Z=new jy(d),c=wy(jy.prototype.request,Z);return fy.extend(c,jy.prototype,Z),fy.extend(c,Z),c.create=function(Z){return l(My(d,Z))},c}(uy);Py.Axios=jy,Py.Cancel=ly,Py.CancelToken=xy,Py.isCancel=hy,Py.VERSION="0.26.1",Py.all=function(l){return Promise.all(l)},Py.spread=function(l){return function(d){return l.apply(null,d)}},Py.isAxiosError=function(l){return Qy.isObject(l)&&!0===l.isAxiosError},qg.exports=Py,qg.exports.default=Py;var Ey,Dy=qg.exports;let Oy=Ey=class{constructor(){this.attachToken=()=>Promise.resolve(),this.requestStartCallback=()=>null,this.requestSuccessCallback=()=>null,this.requestErrorCallback=()=>null,this.requestFinishCallback=()=>null,this.init=this.init.bind(this),this.setHttpRequestErrorCallback=this.setHttpRequestErrorCallback.bind(this),this.setHttpRequestFinishCallback=this.setHttpRequestFinishCallback.bind(this),this.setHttpRequestStartCallback=this.setHttpRequestStartCallback.bind(this),this.setHttpRequestSuccessCallback=this.setHttpRequestSuccessCallback.bind(this)}static getInstance(){return this.axiosInstance||(this.axiosInstance=Dy.create({withCredentials:!0}),this.clientInstance||(this.clientInstance=new Ey),this.axiosInstance.interceptors.request.use((l=>ag(this,void 0,void 0,(function*(){return yield this.clientInstance.requestHandler(l)})))),this.axiosInstance.interceptors.response.use((l=>this.clientInstance.successHandler(l)),(l=>this.clientInstance.errorHandler(l))),this.axiosInstance.all=Dy.all,this.axiosInstance.spread=Dy.spread,this.axiosInstance.init=this.clientInstance.init,this.axiosInstance.enableHandler=this.clientInstance.enableHandler,this.axiosInstance.disableHandler=this.clientInstance.disableHandler,this.axiosInstance.disableHandlerWithTimeout=this.clientInstance.disableHandlerWithTimeout,this.axiosInstance.setHttpRequestStartCallback=this.clientInstance.setHttpRequestStartCallback,this.axiosInstance.setHttpRequestSuccessCallback=this.clientInstance.setHttpRequestSuccessCallback,this.axiosInstance.setHttpRequestErrorCallback=this.clientInstance.setHttpRequestErrorCallback,this.axiosInstance.setHttpRequestFinishCallback=this.clientInstance.setHttpRequestFinishCallback),this.axiosInstance}requestHandler(l){return ag(this,void 0,void 0,(function*(){if(yield this.attachToken(l),null==l?void 0:l.shouldEncodeToFormData){const d=null==l?void 0:l.data,Z=new FormData;Object.keys(d).forEach((l=>{Z.append(l,d[l])})),l.data=Z}return l.startTimeInMs=(new Date).getTime(),Ey.isHandlerEnabled&&this.requestStartCallback&&"function"==typeof this.requestStartCallback&&this.requestStartCallback(l),l}))}errorHandler(l){throw Ey.isHandlerEnabled&&(this.requestErrorCallback&&"function"==typeof this.requestErrorCallback&&this.requestErrorCallback(l),this.requestFinishCallback&&"function"==typeof this.requestFinishCallback&&this.requestFinishCallback()),l}successHandler(l){return Ey.isHandlerEnabled&&(this.requestSuccessCallback&&"function"==typeof this.requestSuccessCallback&&this.requestSuccessCallback(l),this.requestFinishCallback&&"function"==typeof this.requestFinishCallback&&this.requestFinishCallback()),l}init(){let l=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],d=arguments.length>1?arguments[1]:void 0;return ag(this,void 0,void 0,(function*(){Ey.isHandlerEnabled=l,this.attachToken=d}))}enableHandler(){Ey.isHandlerEnabled=!0}disableHandler(){Ey.isHandlerEnabled=!1}disableHandlerWithTimeout(){let l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ey.DEFAULT_HANDLER_DISABLE_TIMEOUT;Ey.isHandlerEnabled=!1,setTimeout((()=>{Ey.isHandlerEnabled=!0}),l)}setHttpRequestStartCallback(l){this.requestStartCallback=l}setHttpRequestSuccessCallback(l){this.requestSuccessCallback=l}setHttpRequestErrorCallback(l){this.requestErrorCallback=l}setHttpRequestFinishCallback(l){this.requestFinishCallback=l}};Oy.DEFAULT_HANDLER_DISABLE_TIMEOUT=1e3,Oy=Ey=function(l,d,Z,c){var i,b=arguments.length,t=b<3?d:null===c?c=Object.getOwnPropertyDescriptor(d,Z):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)t=Reflect.decorate(l,d,Z,c);else for(var G=l.length-1;G>=0;G--)(i=l[G])&&(t=(b<3?i(t):b>3?i(d,Z,t):i(d,Z))||t);return b>3&&t&&Object.defineProperty(d,Z,t),t}([l=>{}],Oy);class qy{setData(l,d){return ag(this,void 0,void 0,(function*(){localStorage.setItem(l,d)}))}getData(l){var d;return ag(this,void 0,void 0,(function*(){return null!==(d=localStorage.getItem(l))&&void 0!==d?d:"{}"}))}removeData(l){return ag(this,void 0,void 0,(function*(){localStorage.removeItem(l)}))}}class _y{constructor(){this._data=new Map}setData(l,d){return ag(this,void 0,void 0,(function*(){this._data.set(l,d)}))}getData(l){var d,Z;return ag(this,void 0,void 0,(function*(){return null!==(Z=null===(d=this._data)||void 0===d?void 0:d.get(l))&&void 0!==Z?Z:"{}"}))}removeData(l){return ag(this,void 0,void 0,(function*(){this._data.delete(l)}))}}class $y{setData(l,d){return ag(this,void 0,void 0,(function*(){sessionStorage.setItem(l,d)}))}getData(l){var d;return ag(this,void 0,void 0,(function*(){return null!==(d=sessionStorage.getItem(l))&&void 0!==d?d:"{}"}))}removeData(l){return ag(this,void 0,void 0,(function*(){sessionStorage.removeItem(l)}))}}var lC=[],dC=[],ZC="undefined"!=typeof Uint8Array?Uint8Array:Array,cC=!1;function iC(){cC=!0;for(var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",d=0,Z=l.length;d<Z;++d)lC[d]=l[d],dC[l.charCodeAt(d)]=d;dC["-".charCodeAt(0)]=62,dC["_".charCodeAt(0)]=63}function bC(l,d,Z){for(var c,i,b=[],t=d;t<Z;t+=3)c=(l[t]<<16)+(l[t+1]<<8)+l[t+2],b.push(lC[(i=c)>>18&63]+lC[i>>12&63]+lC[i>>6&63]+lC[63&i]);return b.join("")}function tC(l){var d;cC||iC();for(var Z=l.length,c=Z%3,i="",b=[],t=16383,G=0,I=Z-c;G<I;G+=t)b.push(bC(l,G,G+t>I?I:G+t));return 1===c?(d=l[Z-1],i+=lC[d>>2],i+=lC[d<<4&63],i+="=="):2===c&&(d=(l[Z-2]<<8)+l[Z-1],i+=lC[d>>10],i+=lC[d>>4&63],i+=lC[d<<2&63],i+="="),b.push(i),b.join("")}function GC(l,d,Z,c,i){var b,t,G=8*i-c-1,I=(1<<G)-1,m=I>>1,n=-7,a=Z?i-1:0,o=Z?-1:1,e=l[d+a];for(a+=o,b=e&(1<<-n)-1,e>>=-n,n+=G;n>0;b=256*b+l[d+a],a+=o,n-=8);for(t=b&(1<<-n)-1,b>>=-n,n+=c;n>0;t=256*t+l[d+a],a+=o,n-=8);if(0===b)b=1-m;else{if(b===I)return t?NaN:1/0*(e?-1:1);t+=Math.pow(2,c),b-=m}return(e?-1:1)*t*Math.pow(2,b-c)}function IC(l,d,Z,c,i,b){var t,G,I,m=8*b-i-1,n=(1<<m)-1,a=n>>1,o=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,e=c?0:b-1,X=c?1:-1,u=d<0||0===d&&1/d<0?1:0;for(d=Math.abs(d),isNaN(d)||d===1/0?(G=isNaN(d)?1:0,t=n):(t=Math.floor(Math.log(d)/Math.LN2),d*(I=Math.pow(2,-t))<1&&(t--,I*=2),(d+=t+a>=1?o/I:o*Math.pow(2,1-a))*I>=2&&(t++,I/=2),t+a>=n?(G=0,t=n):t+a>=1?(G=(d*I-1)*Math.pow(2,i),t+=a):(G=d*Math.pow(2,a-1)*Math.pow(2,i),t=0));i>=8;l[Z+e]=255&G,e+=X,G/=256,i-=8);for(t=t<<i|G,m+=i;m>0;l[Z+e]=255&t,e+=X,t/=256,m-=8);l[Z+e-X]|=128*u}var mC={}.toString,nC=Array.isArray||function(l){return"[object Array]"==mC.call(l)};XC.TYPED_ARRAY_SUPPORT=void 0===us.TYPED_ARRAY_SUPPORT||us.TYPED_ARRAY_SUPPORT;var aC=oC();function oC(){return XC.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function eC(l,d){if(oC()<d)throw new RangeError("Invalid typed array length");return XC.TYPED_ARRAY_SUPPORT?(l=new Uint8Array(d)).__proto__=XC.prototype:(null===l&&(l=new XC(d)),l.length=d),l}function XC(l,d,Z){if(!(XC.TYPED_ARRAY_SUPPORT||this instanceof XC))return new XC(l,d,Z);if("number"==typeof l){if("string"==typeof d)throw new Error("If encoding is specified then the first argument must be a string");return WC(this,l)}return uC(this,l,d,Z)}function uC(l,d,Z,c){if("number"==typeof d)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&d instanceof ArrayBuffer?function(l,d,Z,c){if(d.byteLength,Z<0||d.byteLength<Z)throw new RangeError("'offset' is out of bounds");if(d.byteLength<Z+(c||0))throw new RangeError("'length' is out of bounds");return d=void 0===Z&&void 0===c?new Uint8Array(d):void 0===c?new Uint8Array(d,Z):new Uint8Array(d,Z,c),XC.TYPED_ARRAY_SUPPORT?(l=d).__proto__=XC.prototype:l=hC(l,d),l}(l,d,Z,c):"string"==typeof d?function(l,d,Z){if("string"==typeof Z&&""!==Z||(Z="utf8"),!XC.isEncoding(Z))throw new TypeError('"encoding" must be a valid string encoding');var c=0|sC(d,Z),i=(l=eC(l,c)).write(d,Z);return i!==c&&(l=l.slice(0,i)),l}(l,d,Z):function(l,d){if(gC(d)){var Z=0|pC(d.length);return 0===(l=eC(l,Z)).length||d.copy(l,0,0,Z),l}if(d){if("undefined"!=typeof ArrayBuffer&&d.buffer instanceof ArrayBuffer||"length"in d)return"number"!=typeof d.length||(c=d.length)!=c?eC(l,0):hC(l,d);if("Buffer"===d.type&&nC(d.data))return hC(l,d.data)}var c;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(l,d)}function VC(l){if("number"!=typeof l)throw new TypeError('"size" argument must be a number');if(l<0)throw new RangeError('"size" argument must not be negative')}function WC(l,d){if(VC(d),l=eC(l,d<0?0:0|pC(d)),!XC.TYPED_ARRAY_SUPPORT)for(var Z=0;Z<d;++Z)l[Z]=0;return l}function hC(l,d){var Z=d.length<0?0:0|pC(d.length);l=eC(l,Z);for(var c=0;c<Z;c+=1)l[c]=255&d[c];return l}function pC(l){if(l>=oC())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+oC().toString(16)+" bytes");return 0|l}function gC(l){return!(null==l||!l._isBuffer)}function sC(l,d){if(gC(l))return l.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(l)||l instanceof ArrayBuffer))return l.byteLength;"string"!=typeof l&&(l=""+l);var Z=l.length;if(0===Z)return 0;for(var c=!1;;)switch(d){case"ascii":case"latin1":case"binary":return Z;case"utf8":case"utf-8":case void 0:return PC(l).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*Z;case"hex":return Z>>>1;case"base64":return EC(l).length;default:if(c)return PC(l).length;d=(""+d).toLowerCase(),c=!0}}function yC(l,d,Z){var c=!1;if((void 0===d||d<0)&&(d=0),d>this.length)return"";if((void 0===Z||Z>this.length)&&(Z=this.length),Z<=0)return"";if((Z>>>=0)<=(d>>>=0))return"";for(l||(l="utf8");;)switch(l){case"hex":return kC(this,d,Z);case"utf8":case"utf-8":return UC(this,d,Z);case"ascii":return vC(this,d,Z);case"latin1":case"binary":return FC(this,d,Z);case"base64":return LC(this,d,Z);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return BC(this,d,Z);default:if(c)throw new TypeError("Unknown encoding: "+l);l=(l+"").toLowerCase(),c=!0}}function CC(l,d,Z){var c=l[d];l[d]=l[Z],l[Z]=c}function RC(l,d,Z,c,i){if(0===l.length)return-1;if("string"==typeof Z?(c=Z,Z=0):Z>2147483647?Z=2147483647:Z<-2147483648&&(Z=-2147483648),Z=+Z,isNaN(Z)&&(Z=i?0:l.length-1),Z<0&&(Z=l.length+Z),Z>=l.length){if(i)return-1;Z=l.length-1}else if(Z<0){if(!i)return-1;Z=0}if("string"==typeof d&&(d=XC.from(d,c)),gC(d))return 0===d.length?-1:YC(l,d,Z,c,i);if("number"==typeof d)return d&=255,XC.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(l,d,Z):Uint8Array.prototype.lastIndexOf.call(l,d,Z):YC(l,[d],Z,c,i);throw new TypeError("val must be string, number or Buffer")}function YC(l,d,Z,c,i){var b,t=1,G=l.length,I=d.length;if(void 0!==c&&("ucs2"===(c=String(c).toLowerCase())||"ucs-2"===c||"utf16le"===c||"utf-16le"===c)){if(l.length<2||d.length<2)return-1;t=2,G/=2,I/=2,Z/=2}function m(l,d){return 1===t?l[d]:l.readUInt16BE(d*t)}if(i){var n=-1;for(b=Z;b<G;b++)if(m(l,b)===m(d,-1===n?0:b-n)){if(-1===n&&(n=b),b-n+1===I)return n*t}else-1!==n&&(b-=b-n),n=-1}else for(Z+I>G&&(Z=G-I),b=Z;b>=0;b--){for(var a=!0,o=0;o<I;o++)if(m(l,b+o)!==m(d,o)){a=!1;break}if(a)return b}return-1}function SC(l,d,Z,c){Z=Number(Z)||0;var i=l.length-Z;c?(c=Number(c))>i&&(c=i):c=i;var b=d.length;if(b%2!=0)throw new TypeError("Invalid hex string");c>b/2&&(c=b/2);for(var t=0;t<c;++t){var G=parseInt(d.substr(2*t,2),16);if(isNaN(G))return t;l[Z+t]=G}return t}function rC(l,d,Z,c){return DC(PC(d,l.length-Z),l,Z,c)}function KC(l,d,Z,c){return DC(function(l){for(var d=[],Z=0;Z<l.length;++Z)d.push(255&l.charCodeAt(Z));return d}(d),l,Z,c)}function NC(l,d,Z,c){return KC(l,d,Z,c)}function JC(l,d,Z,c){return DC(EC(d),l,Z,c)}function HC(l,d,Z,c){return DC(function(l,d){for(var Z,c,i,b=[],t=0;t<l.length&&!((d-=2)<0);++t)c=(Z=l.charCodeAt(t))>>8,i=Z%256,b.push(i),b.push(c);return b}(d,l.length-Z),l,Z,c)}function LC(l,d,Z){return 0===d&&Z===l.length?tC(l):tC(l.slice(d,Z))}function UC(l,d,Z){Z=Math.min(l.length,Z);for(var c=[],i=d;i<Z;){var b,t,G,I,m=l[i],n=null,a=m>239?4:m>223?3:m>191?2:1;if(i+a<=Z)switch(a){case 1:m<128&&(n=m);break;case 2:128==(192&(b=l[i+1]))&&(I=(31&m)<<6|63&b)>127&&(n=I);break;case 3:b=l[i+1],t=l[i+2],128==(192&b)&&128==(192&t)&&(I=(15&m)<<12|(63&b)<<6|63&t)>2047&&(I<55296||I>57343)&&(n=I);break;case 4:b=l[i+1],t=l[i+2],G=l[i+3],128==(192&b)&&128==(192&t)&&128==(192&G)&&(I=(15&m)<<18|(63&b)<<12|(63&t)<<6|63&G)>65535&&I<1114112&&(n=I)}null===n?(n=65533,a=1):n>65535&&(n-=65536,c.push(n>>>10&1023|55296),n=56320|1023&n),c.push(n),i+=a}return function(l){var d=l.length;if(d<=4096)return String.fromCharCode.apply(String,l);for(var Z="",c=0;c<d;)Z+=String.fromCharCode.apply(String,l.slice(c,c+=4096));return Z}(c)}function vC(l,d,Z){var c="";Z=Math.min(l.length,Z);for(var i=d;i<Z;++i)c+=String.fromCharCode(127&l[i]);return c}function FC(l,d,Z){var c="";Z=Math.min(l.length,Z);for(var i=d;i<Z;++i)c+=String.fromCharCode(l[i]);return c}function kC(l,d,Z){var c=l.length;(!d||d<0)&&(d=0),(!Z||Z<0||Z>c)&&(Z=c);for(var i="",b=d;b<Z;++b)i+=MC(l[b]);return i}function BC(l,d,Z){for(var c=l.slice(d,Z),i="",b=0;b<c.length;b+=2)i+=String.fromCharCode(c[b]+256*c[b+1]);return i}function zC(l,d,Z){if(l%1!=0||l<0)throw new RangeError("offset is not uint");if(l+d>Z)throw new RangeError("Trying to access beyond buffer length")}function TC(l,d,Z,c,i,b){if(!gC(l))throw new TypeError('"buffer" argument must be a Buffer instance');if(d>i||d<b)throw new RangeError('"value" argument is out of bounds');if(Z+c>l.length)throw new RangeError("Index out of range")}function AC(l,d,Z,c){d<0&&(d=65535+d+1);for(var i=0,b=Math.min(l.length-Z,2);i<b;++i)l[Z+i]=(d&255<<8*(c?i:1-i))>>>8*(c?i:1-i)}function xC(l,d,Z,c){d<0&&(d=4294967295+d+1);for(var i=0,b=Math.min(l.length-Z,4);i<b;++i)l[Z+i]=d>>>8*(c?i:3-i)&255}function QC(l,d,Z,c,i,b){if(Z+c>l.length)throw new RangeError("Index out of range");if(Z<0)throw new RangeError("Index out of range")}function fC(l,d,Z,c,i){return i||QC(l,0,Z,4),IC(l,d,Z,c,23,4),Z+4}function wC(l,d,Z,c,i){return i||QC(l,0,Z,8),IC(l,d,Z,c,52,8),Z+8}XC.poolSize=8192,XC._augment=function(l){return l.__proto__=XC.prototype,l},XC.from=function(l,d,Z){return uC(null,l,d,Z)},XC.TYPED_ARRAY_SUPPORT&&(XC.prototype.__proto__=Uint8Array.prototype,XC.__proto__=Uint8Array),XC.alloc=function(l,d,Z){return function(l,d,Z,c){return VC(d),d<=0?eC(l,d):void 0!==Z?"string"==typeof c?eC(l,d).fill(Z,c):eC(l,d).fill(Z):eC(l,d)}(null,l,d,Z)},XC.allocUnsafe=function(l){return WC(null,l)},XC.allocUnsafeSlow=function(l){return WC(null,l)},XC.isBuffer=OC,XC.compare=function(l,d){if(!gC(l)||!gC(d))throw new TypeError("Arguments must be Buffers");if(l===d)return 0;for(var Z=l.length,c=d.length,i=0,b=Math.min(Z,c);i<b;++i)if(l[i]!==d[i]){Z=l[i],c=d[i];break}return Z<c?-1:c<Z?1:0},XC.isEncoding=function(l){switch(String(l).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},XC.concat=function(l,d){if(!nC(l))throw new TypeError('"list" argument must be an Array of Buffers');if(0===l.length)return XC.alloc(0);var Z;if(void 0===d)for(d=0,Z=0;Z<l.length;++Z)d+=l[Z].length;var c=XC.allocUnsafe(d),i=0;for(Z=0;Z<l.length;++Z){var b=l[Z];if(!gC(b))throw new TypeError('"list" argument must be an Array of Buffers');b.copy(c,i),i+=b.length}return c},XC.byteLength=sC,XC.prototype._isBuffer=!0,XC.prototype.swap16=function(){var l=this.length;if(l%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var d=0;d<l;d+=2)CC(this,d,d+1);return this},XC.prototype.swap32=function(){var l=this.length;if(l%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var d=0;d<l;d+=4)CC(this,d,d+3),CC(this,d+1,d+2);return this},XC.prototype.swap64=function(){var l=this.length;if(l%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var d=0;d<l;d+=8)CC(this,d,d+7),CC(this,d+1,d+6),CC(this,d+2,d+5),CC(this,d+3,d+4);return this},XC.prototype.toString=function(){var l=0|this.length;return 0===l?"":0===arguments.length?UC(this,0,l):yC.apply(this,arguments)},XC.prototype.equals=function(l){if(!gC(l))throw new TypeError("Argument must be a Buffer");return this===l||0===XC.compare(this,l)},XC.prototype.inspect=function(){var l="";return this.length>0&&(l=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(l+=" ... ")),"<Buffer "+l+">"},XC.prototype.compare=function(l,d,Z,c,i){if(!gC(l))throw new TypeError("Argument must be a Buffer");if(void 0===d&&(d=0),void 0===Z&&(Z=l?l.length:0),void 0===c&&(c=0),void 0===i&&(i=this.length),d<0||Z>l.length||c<0||i>this.length)throw new RangeError("out of range index");if(c>=i&&d>=Z)return 0;if(c>=i)return-1;if(d>=Z)return 1;if(this===l)return 0;for(var b=(i>>>=0)-(c>>>=0),t=(Z>>>=0)-(d>>>=0),G=Math.min(b,t),I=this.slice(c,i),m=l.slice(d,Z),n=0;n<G;++n)if(I[n]!==m[n]){b=I[n],t=m[n];break}return b<t?-1:t<b?1:0},XC.prototype.includes=function(l,d,Z){return-1!==this.indexOf(l,d,Z)},XC.prototype.indexOf=function(l,d,Z){return RC(this,l,d,Z,!0)},XC.prototype.lastIndexOf=function(l,d,Z){return RC(this,l,d,Z,!1)},XC.prototype.write=function(l,d,Z,c){if(void 0===d)c="utf8",Z=this.length,d=0;else if(void 0===Z&&"string"==typeof d)c=d,Z=this.length,d=0;else{if(!isFinite(d))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");d|=0,isFinite(Z)?(Z|=0,void 0===c&&(c="utf8")):(c=Z,Z=void 0)}var i=this.length-d;if((void 0===Z||Z>i)&&(Z=i),l.length>0&&(Z<0||d<0)||d>this.length)throw new RangeError("Attempt to write outside buffer bounds");c||(c="utf8");for(var b=!1;;)switch(c){case"hex":return SC(this,l,d,Z);case"utf8":case"utf-8":return rC(this,l,d,Z);case"ascii":return KC(this,l,d,Z);case"latin1":case"binary":return NC(this,l,d,Z);case"base64":return JC(this,l,d,Z);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return HC(this,l,d,Z);default:if(b)throw new TypeError("Unknown encoding: "+c);c=(""+c).toLowerCase(),b=!0}},XC.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},XC.prototype.slice=function(l,d){var Z,c=this.length;if((l=~~l)<0?(l+=c)<0&&(l=0):l>c&&(l=c),(d=void 0===d?c:~~d)<0?(d+=c)<0&&(d=0):d>c&&(d=c),d<l&&(d=l),XC.TYPED_ARRAY_SUPPORT)(Z=this.subarray(l,d)).__proto__=XC.prototype;else{var i=d-l;Z=new XC(i,void 0);for(var b=0;b<i;++b)Z[b]=this[b+l]}return Z},XC.prototype.readUIntLE=function(l,d,Z){l|=0,d|=0,Z||zC(l,d,this.length);for(var c=this[l],i=1,b=0;++b<d&&(i*=256);)c+=this[l+b]*i;return c},XC.prototype.readUIntBE=function(l,d,Z){l|=0,d|=0,Z||zC(l,d,this.length);for(var c=this[l+--d],i=1;d>0&&(i*=256);)c+=this[l+--d]*i;return c},XC.prototype.readUInt8=function(l,d){return d||zC(l,1,this.length),this[l]},XC.prototype.readUInt16LE=function(l,d){return d||zC(l,2,this.length),this[l]|this[l+1]<<8},XC.prototype.readUInt16BE=function(l,d){return d||zC(l,2,this.length),this[l]<<8|this[l+1]},XC.prototype.readUInt32LE=function(l,d){return d||zC(l,4,this.length),(this[l]|this[l+1]<<8|this[l+2]<<16)+16777216*this[l+3]},XC.prototype.readUInt32BE=function(l,d){return d||zC(l,4,this.length),16777216*this[l]+(this[l+1]<<16|this[l+2]<<8|this[l+3])},XC.prototype.readIntLE=function(l,d,Z){l|=0,d|=0,Z||zC(l,d,this.length);for(var c=this[l],i=1,b=0;++b<d&&(i*=256);)c+=this[l+b]*i;return c>=(i*=128)&&(c-=Math.pow(2,8*d)),c},XC.prototype.readIntBE=function(l,d,Z){l|=0,d|=0,Z||zC(l,d,this.length);for(var c=d,i=1,b=this[l+--c];c>0&&(i*=256);)b+=this[l+--c]*i;return b>=(i*=128)&&(b-=Math.pow(2,8*d)),b},XC.prototype.readInt8=function(l,d){return d||zC(l,1,this.length),128&this[l]?-1*(255-this[l]+1):this[l]},XC.prototype.readInt16LE=function(l,d){d||zC(l,2,this.length);var Z=this[l]|this[l+1]<<8;return 32768&Z?4294901760|Z:Z},XC.prototype.readInt16BE=function(l,d){d||zC(l,2,this.length);var Z=this[l+1]|this[l]<<8;return 32768&Z?4294901760|Z:Z},XC.prototype.readInt32LE=function(l,d){return d||zC(l,4,this.length),this[l]|this[l+1]<<8|this[l+2]<<16|this[l+3]<<24},XC.prototype.readInt32BE=function(l,d){return d||zC(l,4,this.length),this[l]<<24|this[l+1]<<16|this[l+2]<<8|this[l+3]},XC.prototype.readFloatLE=function(l,d){return d||zC(l,4,this.length),GC(this,l,!0,23,4)},XC.prototype.readFloatBE=function(l,d){return d||zC(l,4,this.length),GC(this,l,!1,23,4)},XC.prototype.readDoubleLE=function(l,d){return d||zC(l,8,this.length),GC(this,l,!0,52,8)},XC.prototype.readDoubleBE=function(l,d){return d||zC(l,8,this.length),GC(this,l,!1,52,8)},XC.prototype.writeUIntLE=function(l,d,Z,c){l=+l,d|=0,Z|=0,c||TC(this,l,d,Z,Math.pow(2,8*Z)-1,0);var i=1,b=0;for(this[d]=255&l;++b<Z&&(i*=256);)this[d+b]=l/i&255;return d+Z},XC.prototype.writeUIntBE=function(l,d,Z,c){l=+l,d|=0,Z|=0,c||TC(this,l,d,Z,Math.pow(2,8*Z)-1,0);var i=Z-1,b=1;for(this[d+i]=255&l;--i>=0&&(b*=256);)this[d+i]=l/b&255;return d+Z},XC.prototype.writeUInt8=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,1,255,0),XC.TYPED_ARRAY_SUPPORT||(l=Math.floor(l)),this[d]=255&l,d+1},XC.prototype.writeUInt16LE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,2,65535,0),XC.TYPED_ARRAY_SUPPORT?(this[d]=255&l,this[d+1]=l>>>8):AC(this,l,d,!0),d+2},XC.prototype.writeUInt16BE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,2,65535,0),XC.TYPED_ARRAY_SUPPORT?(this[d]=l>>>8,this[d+1]=255&l):AC(this,l,d,!1),d+2},XC.prototype.writeUInt32LE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,4,4294967295,0),XC.TYPED_ARRAY_SUPPORT?(this[d+3]=l>>>24,this[d+2]=l>>>16,this[d+1]=l>>>8,this[d]=255&l):xC(this,l,d,!0),d+4},XC.prototype.writeUInt32BE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,4,4294967295,0),XC.TYPED_ARRAY_SUPPORT?(this[d]=l>>>24,this[d+1]=l>>>16,this[d+2]=l>>>8,this[d+3]=255&l):xC(this,l,d,!1),d+4},XC.prototype.writeIntLE=function(l,d,Z,c){if(l=+l,d|=0,!c){var i=Math.pow(2,8*Z-1);TC(this,l,d,Z,i-1,-i)}var b=0,t=1,G=0;for(this[d]=255&l;++b<Z&&(t*=256);)l<0&&0===G&&0!==this[d+b-1]&&(G=1),this[d+b]=(l/t>>0)-G&255;return d+Z},XC.prototype.writeIntBE=function(l,d,Z,c){if(l=+l,d|=0,!c){var i=Math.pow(2,8*Z-1);TC(this,l,d,Z,i-1,-i)}var b=Z-1,t=1,G=0;for(this[d+b]=255&l;--b>=0&&(t*=256);)l<0&&0===G&&0!==this[d+b+1]&&(G=1),this[d+b]=(l/t>>0)-G&255;return d+Z},XC.prototype.writeInt8=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,1,127,-128),XC.TYPED_ARRAY_SUPPORT||(l=Math.floor(l)),l<0&&(l=255+l+1),this[d]=255&l,d+1},XC.prototype.writeInt16LE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,2,32767,-32768),XC.TYPED_ARRAY_SUPPORT?(this[d]=255&l,this[d+1]=l>>>8):AC(this,l,d,!0),d+2},XC.prototype.writeInt16BE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,2,32767,-32768),XC.TYPED_ARRAY_SUPPORT?(this[d]=l>>>8,this[d+1]=255&l):AC(this,l,d,!1),d+2},XC.prototype.writeInt32LE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,4,2147483647,-2147483648),XC.TYPED_ARRAY_SUPPORT?(this[d]=255&l,this[d+1]=l>>>8,this[d+2]=l>>>16,this[d+3]=l>>>24):xC(this,l,d,!0),d+4},XC.prototype.writeInt32BE=function(l,d,Z){return l=+l,d|=0,Z||TC(this,l,d,4,2147483647,-2147483648),l<0&&(l=4294967295+l+1),XC.TYPED_ARRAY_SUPPORT?(this[d]=l>>>24,this[d+1]=l>>>16,this[d+2]=l>>>8,this[d+3]=255&l):xC(this,l,d,!1),d+4},XC.prototype.writeFloatLE=function(l,d,Z){return fC(this,l,d,!0,Z)},XC.prototype.writeFloatBE=function(l,d,Z){return fC(this,l,d,!1,Z)},XC.prototype.writeDoubleLE=function(l,d,Z){return wC(this,l,d,!0,Z)},XC.prototype.writeDoubleBE=function(l,d,Z){return wC(this,l,d,!1,Z)},XC.prototype.copy=function(l,d,Z,c){if(Z||(Z=0),c||0===c||(c=this.length),d>=l.length&&(d=l.length),d||(d=0),c>0&&c<Z&&(c=Z),c===Z)return 0;if(0===l.length||0===this.length)return 0;if(d<0)throw new RangeError("targetStart out of bounds");if(Z<0||Z>=this.length)throw new RangeError("sourceStart out of bounds");if(c<0)throw new RangeError("sourceEnd out of bounds");c>this.length&&(c=this.length),l.length-d<c-Z&&(c=l.length-d+Z);var i,b=c-Z;if(this===l&&Z<d&&d<c)for(i=b-1;i>=0;--i)l[i+d]=this[i+Z];else if(b<1e3||!XC.TYPED_ARRAY_SUPPORT)for(i=0;i<b;++i)l[i+d]=this[i+Z];else Uint8Array.prototype.set.call(l,this.subarray(Z,Z+b),d);return b},XC.prototype.fill=function(l,d,Z,c){if("string"==typeof l){if("string"==typeof d?(c=d,d=0,Z=this.length):"string"==typeof Z&&(c=Z,Z=this.length),1===l.length){var i=l.charCodeAt(0);i<256&&(l=i)}if(void 0!==c&&"string"!=typeof c)throw new TypeError("encoding must be a string");if("string"==typeof c&&!XC.isEncoding(c))throw new TypeError("Unknown encoding: "+c)}else"number"==typeof l&&(l&=255);if(d<0||this.length<d||this.length<Z)throw new RangeError("Out of range index");if(Z<=d)return this;var b;if(d>>>=0,Z=void 0===Z?this.length:Z>>>0,l||(l=0),"number"==typeof l)for(b=d;b<Z;++b)this[b]=l;else{var t=gC(l)?l:PC(new XC(l,c).toString()),G=t.length;for(b=0;b<Z-d;++b)this[b+d]=t[b%G]}return this};var jC=/[^+\/0-9A-Za-z-_]/g;function MC(l){return l<16?"0"+l.toString(16):l.toString(16)}function PC(l,d){var Z;d=d||1/0;for(var c=l.length,i=null,b=[],t=0;t<c;++t){if((Z=l.charCodeAt(t))>55295&&Z<57344){if(!i){if(Z>56319){(d-=3)>-1&&b.push(239,191,189);continue}if(t+1===c){(d-=3)>-1&&b.push(239,191,189);continue}i=Z;continue}if(Z<56320){(d-=3)>-1&&b.push(239,191,189),i=Z;continue}Z=65536+(i-55296<<10|Z-56320)}else i&&(d-=3)>-1&&b.push(239,191,189);if(i=null,Z<128){if((d-=1)<0)break;b.push(Z)}else if(Z<2048){if((d-=2)<0)break;b.push(Z>>6|192,63&Z|128)}else if(Z<65536){if((d-=3)<0)break;b.push(Z>>12|224,Z>>6&63|128,63&Z|128)}else{if(!(Z<1114112))throw new Error("Invalid code point");if((d-=4)<0)break;b.push(Z>>18|240,Z>>12&63|128,Z>>6&63|128,63&Z|128)}}return b}function EC(l){return function(l){var d,Z,c,i,b,t;cC||iC();var G=l.length;if(G%4>0)throw new Error("Invalid string. Length must be a multiple of 4");b="="===l[G-2]?2:"="===l[G-1]?1:0,t=new ZC(3*G/4-b),c=b>0?G-4:G;var I=0;for(d=0,Z=0;d<c;d+=4,Z+=3)i=dC[l.charCodeAt(d)]<<18|dC[l.charCodeAt(d+1)]<<12|dC[l.charCodeAt(d+2)]<<6|dC[l.charCodeAt(d+3)],t[I++]=i>>16&255,t[I++]=i>>8&255,t[I++]=255&i;return 2===b?(i=dC[l.charCodeAt(d)]<<2|dC[l.charCodeAt(d+1)]>>4,t[I++]=255&i):1===b&&(i=dC[l.charCodeAt(d)]<<10|dC[l.charCodeAt(d+1)]<<4|dC[l.charCodeAt(d+2)]>>2,t[I++]=i>>8&255,t[I++]=255&i),t}(function(l){if((l=function(l){return l.trim?l.trim():l.replace(/^\s+|\s+$/g,"")}(l).replace(jC,"")).length<2)return"";for(;l.length%4!=0;)l+="=";return l}(l))}function DC(l,d,Z,c){for(var i=0;i<c&&!(i+Z>=d.length||i>=l.length);++i)d[i+Z]=l[i];return i}function OC(l){return null!=l&&(!!l._isBuffer||qC(l)||function(l){return"function"==typeof l.readFloatLE&&"function"==typeof l.slice&&qC(l.slice(0,0))}(l))}function qC(l){return!!l.constructor&&"function"==typeof l.constructor.isBuffer&&l.constructor.isBuffer(l)}var _C=Object.freeze({__proto__:null,Buffer:XC,INSPECT_MAX_BYTES:50,SlowBuffer:function(l){return+l!=l&&(l=0),XC.alloc(+l)},isBuffer:OC,kMaxLength:aC}),$C={exports:{}},lR={},dR={};Object.defineProperty(dR,"__esModule",{value:!0}),dR.default=function(l){var d=l.length,Z=d%4;if(!Z)return l;var c=d,i=4-Z,b=d+i,t=XC.alloc(b);for(t.write(l);i--;)t.write("=",c++);return t.toString()},Object.defineProperty(lR,"__esModule",{value:!0});var ZR=dR;function cR(l,d){return void 0===d&&(d="utf8"),XC.isBuffer(l)?bR(l.toString("base64")):bR(XC.from(l,d).toString("base64"))}function iR(l){return l=l.toString(),ZR.default(l).replace(/\-/g,"+").replace(/_/g,"/")}function bR(l){return l.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}var tR,GR=cR;GR.encode=cR,GR.decode=function(l,d){return void 0===d&&(d="utf8"),XC.from(iR(l),"base64").toString(d)},GR.toBase64=iR,GR.fromBase64=bR,GR.toBuffer=function(l){return XC.from(iR(l),"base64")},lR.default=GR,(tR=$C).exports=lR.default,tR.exports.default=tR.exports;var IR=$C.exports,mR={exports:{}};!function(l){!function(d,Z){var c={};!function(l){l.__esModule=!0,l.digestLength=32,l.blockSize=64;var d=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function Z(l,Z,c,i,b){for(var t,G,I,m,n,a,o,e,X,u,V,W,h;b>=64;){for(t=Z[0],G=Z[1],I=Z[2],m=Z[3],n=Z[4],a=Z[5],o=Z[6],e=Z[7],u=0;u<16;u++)V=i+4*u,l[u]=(255&c[V])<<24|(255&c[V+1])<<16|(255&c[V+2])<<8|255&c[V+3];for(u=16;u<64;u++)W=((X=l[u-2])>>>17|X<<15)^(X>>>19|X<<13)^X>>>10,h=((X=l[u-15])>>>7|X<<25)^(X>>>18|X<<14)^X>>>3,l[u]=(W+l[u-7]|0)+(h+l[u-16]|0);for(u=0;u<64;u++)W=(((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+(n&a^~n&o)|0)+(e+(d[u]+l[u]|0)|0)|0,h=((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+(t&G^t&I^G&I)|0,e=o,o=a,a=n,n=m+W|0,m=I,I=G,G=t,t=W+h|0;Z[0]+=t,Z[1]+=G,Z[2]+=I,Z[3]+=m,Z[4]+=n,Z[5]+=a,Z[6]+=o,Z[7]+=e,i+=64,b-=64}return i}var c=function(){function d(){this.digestLength=l.digestLength,this.blockSize=l.blockSize,this.state=new Int32Array(8),this.temp=new Int32Array(64),this.buffer=new Uint8Array(128),this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this.reset()}return d.prototype.reset=function(){return this.state[0]=1779033703,this.state[1]=3144134277,this.state[2]=1013904242,this.state[3]=2773480762,this.state[4]=1359893119,this.state[5]=2600822924,this.state[6]=528734635,this.state[7]=1541459225,this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this},d.prototype.clean=function(){for(var l=0;l<this.buffer.length;l++)this.buffer[l]=0;for(l=0;l<this.temp.length;l++)this.temp[l]=0;this.reset()},d.prototype.update=function(l,d){if(void 0===d&&(d=l.length),this.finished)throw new Error("SHA256: can't update because hash was finished.");var c=0;if(this.bytesHashed+=d,this.bufferLength>0){for(;this.bufferLength<64&&d>0;)this.buffer[this.bufferLength++]=l[c++],d--;64===this.bufferLength&&(Z(this.temp,this.state,this.buffer,0,64),this.bufferLength=0)}for(d>=64&&(c=Z(this.temp,this.state,l,c,d),d%=64);d>0;)this.buffer[this.bufferLength++]=l[c++],d--;return this},d.prototype.finish=function(l){if(!this.finished){var d=this.bytesHashed,c=this.bufferLength,i=d/536870912|0,b=d<<3,t=d%64<56?64:128;this.buffer[c]=128;for(var G=c+1;G<t-8;G++)this.buffer[G]=0;this.buffer[t-8]=i>>>24&255,this.buffer[t-7]=i>>>16&255,this.buffer[t-6]=i>>>8&255,this.buffer[t-5]=i>>>0&255,this.buffer[t-4]=b>>>24&255,this.buffer[t-3]=b>>>16&255,this.buffer[t-2]=b>>>8&255,this.buffer[t-1]=b>>>0&255,Z(this.temp,this.state,this.buffer,0,t),this.finished=!0}for(G=0;G<8;G++)l[4*G+0]=this.state[G]>>>24&255,l[4*G+1]=this.state[G]>>>16&255,l[4*G+2]=this.state[G]>>>8&255,l[4*G+3]=this.state[G]>>>0&255;return this},d.prototype.digest=function(){var l=new Uint8Array(this.digestLength);return this.finish(l),l},d.prototype._saveState=function(l){for(var d=0;d<this.state.length;d++)l[d]=this.state[d]},d.prototype._restoreState=function(l,d){for(var Z=0;Z<this.state.length;Z++)this.state[Z]=l[Z];this.bytesHashed=d,this.finished=!1,this.bufferLength=0},d}();l.Hash=c;var i=function(){function l(l){this.inner=new c,this.outer=new c,this.blockSize=this.inner.blockSize,this.digestLength=this.inner.digestLength;var d=new Uint8Array(this.blockSize);if(l.length>this.blockSize)(new c).update(l).finish(d).clean();else for(var Z=0;Z<l.length;Z++)d[Z]=l[Z];for(Z=0;Z<d.length;Z++)d[Z]^=54;for(this.inner.update(d),Z=0;Z<d.length;Z++)d[Z]^=106;for(this.outer.update(d),this.istate=new Uint32Array(8),this.ostate=new Uint32Array(8),this.inner._saveState(this.istate),this.outer._saveState(this.ostate),Z=0;Z<d.length;Z++)d[Z]=0}return l.prototype.reset=function(){return this.inner._restoreState(this.istate,this.inner.blockSize),this.outer._restoreState(this.ostate,this.outer.blockSize),this},l.prototype.clean=function(){for(var l=0;l<this.istate.length;l++)this.ostate[l]=this.istate[l]=0;this.inner.clean(),this.outer.clean()},l.prototype.update=function(l){return this.inner.update(l),this},l.prototype.finish=function(l){return this.outer.finished?this.outer.finish(l):(this.inner.finish(l),this.outer.update(l,this.digestLength).finish(l)),this},l.prototype.digest=function(){var l=new Uint8Array(this.digestLength);return this.finish(l),l},l}();function b(l){var d=(new c).update(l),Z=d.digest();return d.clean(),Z}function t(l,d){var Z=new i(l).update(d),c=Z.digest();return Z.clean(),c}function G(l,d,Z,c){var i=c[0];if(0===i)throw new Error("hkdf: cannot expand more");d.reset(),i>1&&d.update(l),Z&&d.update(Z),d.update(c),d.finish(l),c[0]++}l.HMAC=i,l.hash=b,l.default=b,l.hmac=t;var I=new Uint8Array(l.digestLength);l.hkdf=function(l,d,Z,c){void 0===d&&(d=I),void 0===c&&(c=32);for(var b=new Uint8Array([1]),m=t(d,l),n=new i(m),a=new Uint8Array(n.digestLength),o=a.length,e=new Uint8Array(c),X=0;X<c;X++)o===a.length&&(G(a,n,Z,b),o=0),e[X]=a[o++];return n.clean(),a.fill(0),b.fill(0),e},l.pbkdf2=function(l,d,Z,c){for(var b=new i(l),t=b.digestLength,G=new Uint8Array(4),I=new Uint8Array(t),m=new Uint8Array(t),n=new Uint8Array(c),a=0;a*t<c;a++){var o=a+1;G[0]=o>>>24&255,G[1]=o>>>16&255,G[2]=o>>>8&255,G[3]=o>>>0&255,b.reset(),b.update(d),b.update(G),b.finish(m);for(var e=0;e<t;e++)I[e]=m[e];for(e=2;e<=Z;e++){b.reset(),b.update(m).finish(m);for(var X=0;X<t;X++)I[X]^=m[X]}for(e=0;e<t&&a*t+e<c;e++)n[a*t+e]=I[e]}for(a=0;a<t;a++)I[a]=m[a]=0;for(a=0;a<4;a++)G[a]=0;return b.clean(),n}}(c);var i=c.default;for(var b in c)i[b]=c[b];l.exports=i}()}(mR);var nR=function(l){return l&&l.__esModule&&Object.prototype.hasOwnProperty.call(l,"default")?l.default:l}(mR.exports),aR=crypto;const oR=l=>l instanceof CryptoKey,eR=new TextEncoder,XR=new TextDecoder,uR=l=>{let d=l;d instanceof Uint8Array&&(d=XR.decode(d)),d=d.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return(l=>{const d=atob(l),Z=new Uint8Array(d.length);for(let l=0;l<d.length;l++)Z[l]=d.charCodeAt(l);return Z})(d)}catch(l){throw new TypeError("The input to be decoded is not correctly encoded.")}};class VR extends Error{constructor(l){var d;super(l),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,null===(d=Error.captureStackTrace)||void 0===d||d.call(Error,this,this.constructor)}static get code(){return"ERR_JOSE_GENERIC"}}class WR extends VR{constructor(l){let d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"unspecified",Z=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"unspecified";super(l),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=d,this.reason=Z}static get code(){return"ERR_JWT_CLAIM_VALIDATION_FAILED"}}class hR extends VR{constructor(l){let d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"unspecified",Z=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"unspecified";super(l),this.code="ERR_JWT_EXPIRED",this.claim=d,this.reason=Z}static get code(){return"ERR_JWT_EXPIRED"}}class pR extends VR{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}static get code(){return"ERR_JOSE_ALG_NOT_ALLOWED"}}class gR extends VR{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}static get code(){return"ERR_JOSE_NOT_SUPPORTED"}}class sR extends VR{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}static get code(){return"ERR_JWS_INVALID"}}class yR extends VR{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}class CR extends VR{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}static get code(){return"ERR_JWKS_INVALID"}}class RR extends VR{constructor(){super(...arguments),this.code="ERR_JWKS_NO_MATCHING_KEY",this.message="no applicable key found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_NO_MATCHING_KEY"}}class YR extends VR{constructor(){super(...arguments),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS",this.message="multiple matching keys found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}class SR extends VR{constructor(){super(...arguments),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED",this.message="signature verification failed"}static get code(){return"ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}function rR(){return"function"==typeof WebSocketPair}function KR(){try{return void 0!==As.versions.node}catch(l){return!1}}function NR(l){let d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"algorithm.name";return new TypeError("CryptoKey does not support this operation, its ".concat(d," must be ").concat(l))}function JR(l,d){return l.name===d}function HR(l){return parseInt(l.name.slice(4),10)}var LR=function(l){let d="Key must be ";for(var Z=arguments.length,c=new Array(Z>1?Z-1:0),i=1;i<Z;i++)c[i-1]=arguments[i];if(c.length>2){const l=c.pop();d+="one of type ".concat(c.join(", "),", or ").concat(l,".")}else 2===c.length?d+="one of type ".concat(c[0]," or ").concat(c[1],"."):d+="of type ".concat(c[0],".");return null==l?d+=" Received ".concat(l):"function"==typeof l&&l.name?d+=" Received function ".concat(l.name):"object"==typeof l&&null!=l&&l.constructor&&l.constructor.name&&(d+=" Received an instance of ".concat(l.constructor.name)),d},UR=l=>oR(l);const vR=["CryptoKey"];function FR(l){if("object"!=typeof(d=l)||null===d||"[object Object]"!==Object.prototype.toString.call(l))return!1;var d;if(null===Object.getPrototypeOf(l))return!0;let Z=l;for(;null!==Object.getPrototypeOf(Z);)Z=Object.getPrototypeOf(Z);return Object.getPrototypeOf(l)===Z}const kR=async l=>{var d,Z;const{algorithm:c,keyUsages:i}=function(l){let d,Z;switch(l.kty){case"oct":switch(l.alg){case"HS256":case"HS384":case"HS512":d={name:"HMAC",hash:"SHA-".concat(l.alg.slice(-3))},Z=["sign","verify"];break;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":throw new gR("".concat(l.alg," keys cannot be imported as CryptoKey instances"));case"A128GCM":case"A192GCM":case"A256GCM":case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":d={name:"AES-GCM"},Z=["encrypt","decrypt"];break;case"A128KW":case"A192KW":case"A256KW":d={name:"AES-KW"},Z=["wrapKey","unwrapKey"];break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":d={name:"PBKDF2"},Z=["deriveBits"];break;default:throw new gR('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"RSA":switch(l.alg){case"PS256":case"PS384":case"PS512":d={name:"RSA-PSS",hash:"SHA-".concat(l.alg.slice(-3))},Z=l.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":d={name:"RSASSA-PKCS1-v1_5",hash:"SHA-".concat(l.alg.slice(-3))},Z=l.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":d={name:"RSA-OAEP",hash:"SHA-".concat(parseInt(l.alg.slice(-3),10)||1)},Z=l.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new gR('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(l.alg){case"ES256":d={name:"ECDSA",namedCurve:"P-256"},Z=l.d?["sign"]:["verify"];break;case"ES384":d={name:"ECDSA",namedCurve:"P-384"},Z=l.d?["sign"]:["verify"];break;case"ES512":d={name:"ECDSA",namedCurve:"P-521"},Z=l.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":d={name:"ECDH",namedCurve:l.crv},Z=l.d?["deriveBits"]:[];break;default:throw new gR('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case(rR()||KR())&&"OKP":if("EdDSA"!==l.alg)throw new gR('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');switch(l.crv){case"Ed25519":d={name:"NODE-ED25519",namedCurve:"NODE-ED25519"},Z=l.d?["sign"]:["verify"];break;case KR()&&"Ed448":d={name:"NODE-ED448",namedCurve:"NODE-ED448"},Z=l.d?["sign"]:["verify"];break;default:throw new gR('Invalid or unsupported JWK "crv" (Subtype of Key Pair) Parameter value')}break;default:throw new gR('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:d,keyUsages:Z}}(l),b=[c,null!==(d=l.ext)&&void 0!==d&&d,null!==(Z=l.key_ops)&&void 0!==Z?Z:i];if("PBKDF2"===c.name)return aR.subtle.importKey("raw",uR(l.k),...b);const t={...l};return delete t.alg,aR.subtle.importKey("jwk",t,...b)},BR=async(l,d,Z,c)=>{const i=await function(l,d,Z){if(oR(d))return function(l,d){switch(d){case"HS256":case"HS384":case"HS512":{if(!JR(l.algorithm,"HMAC"))throw NR("HMAC");const Z=parseInt(d.slice(2),10);if(HR(l.algorithm.hash)!==Z)throw NR("SHA-".concat(Z),"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!JR(l.algorithm,"RSASSA-PKCS1-v1_5"))throw NR("RSASSA-PKCS1-v1_5");const Z=parseInt(d.slice(2),10);if(HR(l.algorithm.hash)!==Z)throw NR("SHA-".concat(Z),"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!JR(l.algorithm,"RSA-PSS"))throw NR("RSA-PSS");const Z=parseInt(d.slice(2),10);if(HR(l.algorithm.hash)!==Z)throw NR("SHA-".concat(Z),"algorithm.hash");break}case KR()&&"EdDSA":if("NODE-ED25519"!==l.algorithm.name&&"NODE-ED448"!==l.algorithm.name)throw NR("NODE-ED25519 or NODE-ED448");break;case rR()&&"EdDSA":if(!JR(l.algorithm,"NODE-ED25519"))throw NR("NODE-ED25519");break;case"ES256":case"ES384":case"ES512":{if(!JR(l.algorithm,"ECDSA"))throw NR("ECDSA");const Z=function(l){switch(l){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(d);if(l.algorithm.namedCurve!==Z)throw NR(Z,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}for(var Z=arguments.length,c=new Array(Z>2?Z-2:0),i=2;i<Z;i++)c[i-2]=arguments[i];!function(l,d){if(d.length&&!d.some((d=>l.usages.includes(d)))){let l="CryptoKey does not support this operation, its usages must include ";if(d.length>2){const Z=d.pop();l+="one of ".concat(d.join(", "),", or ").concat(Z,".")}else 2===d.length?l+="one of ".concat(d[0]," or ").concat(d[1],"."):l+="".concat(d[0],".");throw new TypeError(l)}}(l,c)}(d,l,Z),d;if(d instanceof Uint8Array){if(!l.startsWith("HS"))throw new TypeError(LR(d,...vR));return aR.subtle.importKey("raw",d,{hash:"SHA-".concat(l.slice(-3)),name:"HMAC"},!1,[Z])}throw new TypeError(LR(d,...vR,"Uint8Array"))}(l,d,"verify");((l,d)=>{if(l.startsWith("RS")||l.startsWith("PS")){const{modulusLength:Z}=d.algorithm;if("number"!=typeof Z||Z<2048)throw new TypeError("".concat(l," requires key modulusLength to be 2048 bits or larger"))}})(l,i);const b=function(l,d){const Z="SHA-".concat(l.slice(-3));switch(l){case"HS256":case"HS384":case"HS512":return{hash:Z,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:Z,name:"RSA-PSS",saltLength:l.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:Z,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:Z,name:"ECDSA",namedCurve:d.namedCurve};case(rR()||KR())&&"EdDSA":const{namedCurve:c}=d;return{name:c,namedCurve:c};default:throw new gR("alg ".concat(l," is not supported either by JOSE or your javascript runtime"))}}(l,i.algorithm);try{return await aR.subtle.verify(b,i,Z,c)}catch(l){return!1}};async function zR(l,d,Z){var c;if(!FR(l))throw new sR("Flattened JWS must be an object");if(void 0===l.protected&&void 0===l.header)throw new sR('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==l.protected&&"string"!=typeof l.protected)throw new sR("JWS Protected Header incorrect type");if(void 0===l.payload)throw new sR("JWS Payload missing");if("string"!=typeof l.signature)throw new sR("JWS Signature missing or incorrect type");if(void 0!==l.header&&!FR(l.header))throw new sR("JWS Unprotected Header incorrect type");let i={};if(l.protected){const d=uR(l.protected);try{i=JSON.parse(XR.decode(d))}catch(l){throw new sR("JWS Protected Header is invalid")}}if(!function(){for(var l=arguments.length,d=new Array(l),Z=0;Z<l;Z++)d[Z]=arguments[Z];const c=d.filter(Boolean);if(0===c.length||1===c.length)return!0;let i;for(const l of c){const d=Object.keys(l);if(i&&0!==i.size)for(const l of d){if(i.has(l))return!1;i.add(l)}else i=new Set(d)}return!0}(i,l.header))throw new sR("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const b={...i,...l.header},t=function(l,d,Z,c,i){if(void 0!==i.crit&&void 0===c.crit)throw new l('"crit" (Critical) Header Parameter MUST be integrity protected');if(!c||void 0===c.crit)return new Set;if(!Array.isArray(c.crit)||0===c.crit.length||c.crit.some((l=>"string"!=typeof l||0===l.length)))throw new l('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let b;b=void 0!==Z?new Map([...Object.entries(Z),...d.entries()]):d;for(const d of c.crit){if(!b.has(d))throw new gR('Extension Header Parameter "'.concat(d,'" is not recognized'));if(void 0===i[d])throw new l('Extension Header Parameter "'.concat(d,'" is missing'));if(b.get(d)&&void 0===c[d])throw new l('Extension Header Parameter "'.concat(d,'" MUST be integrity protected'))}return new Set(c.crit)}(sR,new Map([["b64",!0]]),null==Z?void 0:Z.crit,i,b);let G=!0;if(t.has("b64")&&(G=i.b64,"boolean"!=typeof G))throw new sR('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:I}=b;if("string"!=typeof I||!I)throw new sR('JWS "alg" (Algorithm) Header Parameter missing or invalid');const m=Z&&((l,d)=>{if(void 0!==d&&(!Array.isArray(d)||d.some((l=>"string"!=typeof l))))throw new TypeError('"'.concat("algorithms",'" option must be an array of strings'));if(d)return new Set(d)})(0,Z.algorithms);if(m&&!m.has(I))throw new pR('"alg" (Algorithm) Header Parameter not allowed');if(G){if("string"!=typeof l.payload)throw new sR("JWS Payload must be a string")}else if("string"!=typeof l.payload&&!(l.payload instanceof Uint8Array))throw new sR("JWS Payload must be a string or an Uint8Array instance");let n=!1;"function"==typeof d&&(d=await d(i,l),n=!0),((l,d,Z)=>{l.startsWith("HS")||"dir"===l||l.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(l)?(l=>{if(!(l instanceof Uint8Array)){if(!UR(l))throw new TypeError(LR(l,...vR,"Uint8Array"));if("secret"!==l.type)throw new TypeError("".concat(vR.join(" or "),' instances for symmetric algorithms must be of type "secret"'))}})(d):((l,d)=>{if(!UR(l))throw new TypeError(LR(l,...vR));if("secret"===l.type)throw new TypeError("".concat(vR.join(" or "),' instances for asymmetric algorithms must not be of type "secret"'));if("sign"===d&&"public"===l.type)throw new TypeError("".concat(vR.join(" or "),' instances for asymmetric algorithm signing must be of type "private"'));if("decrypt"===d&&"public"===l.type)throw new TypeError("".concat(vR.join(" or "),' instances for asymmetric algorithm decryption must be of type "private"'));if(l.algorithm&&"verify"===d&&"private"===l.type)throw new TypeError("".concat(vR.join(" or "),' instances for asymmetric algorithm verifying must be of type "public"'));if(l.algorithm&&"encrypt"===d&&"private"===l.type)throw new TypeError("".concat(vR.join(" or "),' instances for asymmetric algorithm encryption must be of type "public"'))})(d,Z)})(I,d,"verify");const a=function(){for(var l=arguments.length,d=new Array(l),Z=0;Z<l;Z++)d[Z]=arguments[Z];const c=d.reduce(((l,d)=>{let{length:Z}=d;return l+Z}),0),i=new Uint8Array(c);let b=0;return d.forEach((l=>{i.set(l,b),b+=l.length})),i}(eR.encode(null!==(c=l.protected)&&void 0!==c?c:""),eR.encode("."),"string"==typeof l.payload?eR.encode(l.payload):l.payload),o=uR(l.signature);if(!await BR(I,d,o,a))throw new SR;let e;e=G?uR(l.payload):"string"==typeof l.payload?eR.encode(l.payload):l.payload;const X={payload:e};return void 0!==l.protected&&(X.protectedHeader=i),void 0!==l.header&&(X.unprotectedHeader=l.header),n?{...X,key:d}:X}const TR=/^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;var AR=l=>{const d=TR.exec(l);if(!d)throw new TypeError("Invalid time period format");const Z=parseFloat(d[1]);switch(d[2].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":return Math.round(Z);case"minute":case"minutes":case"min":case"mins":case"m":return Math.round(60*Z);case"hour":case"hours":case"hr":case"hrs":case"h":return Math.round(3600*Z);case"day":case"days":case"d":return Math.round(86400*Z);case"week":case"weeks":case"w":return Math.round(604800*Z);default:return Math.round(31557600*Z)}};const xR=l=>l.toLowerCase().replace(/^application\//,"");var QR=function(l,d){let Z=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{typ:c}=Z;if(c&&("string"!=typeof l.typ||xR(l.typ)!==xR(c)))throw new WR('unexpected "typ" JWT header value',"typ","check_failed");let i;try{i=JSON.parse(XR.decode(d))}catch(l){}if(!FR(i))throw new yR("JWT Claims Set must be a top-level JSON object");const{issuer:b}=Z;if(b&&!(Array.isArray(b)?b:[b]).includes(i.iss))throw new WR('unexpected "iss" claim value',"iss","check_failed");const{subject:t}=Z;if(t&&i.sub!==t)throw new WR('unexpected "sub" claim value',"sub","check_failed");const{audience:G}=Z;if(G&&(m="string"==typeof G?[G]:G,!("string"==typeof(I=i.aud)?m.includes(I):Array.isArray(I)&&m.some(Set.prototype.has.bind(new Set(I))))))throw new WR('unexpected "aud" claim value',"aud","check_failed");var I,m;let n;switch(typeof Z.clockTolerance){case"string":n=AR(Z.clockTolerance);break;case"number":n=Z.clockTolerance;break;case"undefined":n=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:a}=Z,o=(e=a||new Date,Math.floor(e.getTime()/1e3));var e;if((void 0!==i.iat||Z.maxTokenAge)&&"number"!=typeof i.iat)throw new WR('"iat" claim must be a number',"iat","invalid");if(void 0!==i.nbf){if("number"!=typeof i.nbf)throw new WR('"nbf" claim must be a number',"nbf","invalid");if(i.nbf>o+n)throw new WR('"nbf" claim timestamp check failed',"nbf","check_failed")}if(void 0!==i.exp){if("number"!=typeof i.exp)throw new WR('"exp" claim must be a number',"exp","invalid");if(i.exp<=o-n)throw new hR('"exp" claim timestamp check failed',"exp","check_failed")}if(Z.maxTokenAge){const l=o-i.iat;if(l-n>("number"==typeof Z.maxTokenAge?Z.maxTokenAge:AR(Z.maxTokenAge)))throw new hR('"iat" claim timestamp check failed (too far in the past)',"iat","check_failed");if(l<0-n)throw new WR('"iat" claim timestamp check failed (it should be in the past)',"iat","check_failed")}return i};function fR(l){return FR(l)}class wR{constructor(l){if(this._cached=new WeakMap,!function(l){return l&&"object"==typeof l&&Array.isArray(l.keys)&&l.keys.every(fR)}(l))throw new CR("JSON Web Key Set malformed");var d;this._jwks=(d=l,"function"==typeof structuredClone?structuredClone(d):JSON.parse(JSON.stringify(d)))}async getKey(l,d){const{alg:Z,kid:c}={...l,...d.header},i=function(l){switch("string"==typeof l&&l.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new gR('Unsupported "alg" value for a JSON Web Key Set')}}(Z),b=this._jwks.keys.filter((l=>{let d=i===l.kty;if(d&&"string"==typeof c&&(d=c===l.kid),d&&"string"==typeof l.alg&&(d=Z===l.alg),d&&"string"==typeof l.use&&(d="sig"===l.use),d&&Array.isArray(l.key_ops)&&(d=l.key_ops.includes("verify")),d&&"EdDSA"===Z&&(d="Ed25519"===l.crv||"Ed448"===l.crv),d)switch(Z){case"ES256":d="P-256"===l.crv;break;case"ES256K":d="secp256k1"===l.crv;break;case"ES384":d="P-384"===l.crv;break;case"ES512":d="P-521"===l.crv}return d})),{0:t,length:G}=b;if(0===G)throw new RR;if(1!==G)throw new YR;const I=this._cached.get(t)||this._cached.set(t,{}).get(t);if(void 0===I[Z]){const l=await async function(l,d,Z){if(!FR(l))throw new TypeError("JWK must be an object");if(d||(d=l.alg),"string"!=typeof d||!d)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');switch(l.kty){case"oct":if("string"!=typeof l.k||!l.k)throw new TypeError('missing "k" (Key Value) Parameter value');return null!=Z||(Z=!0!==l.ext),Z?kR({...l,alg:d,ext:!1}):uR(l.k);case"RSA":if(void 0!==l.oth)throw new gR('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return kR({...l,alg:d});default:throw new gR('Unsupported "kty" (Key Type) Parameter value')}}({...t,ext:!0},Z);if(l instanceof Uint8Array||"public"!==l.type)throw new CR("JSON Web Key Set members must be public keys");I[Z]=l}return I[Z]}}var jR={exports:{}},MR={exports:{}},PR=function(l){if(l.__esModule)return l;var d=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(l).forEach((function(Z){var c=Object.getOwnPropertyDescriptor(l,Z);Object.defineProperty(d,Z,c.get?c:{enumerable:!0,get:function(){return l[Z]}})})),d}(_C);
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */!function(l,d){var Z=PR,c=Z.Buffer;function i(l,d){for(var Z in l)d[Z]=l[Z]}function b(l,d,Z){return c(l,d,Z)}c.from&&c.alloc&&c.allocUnsafe&&c.allocUnsafeSlow?l.exports=Z:(i(Z,d),d.Buffer=b),b.prototype=Object.create(c.prototype),i(c,b),b.from=function(l,d,Z){if("number"==typeof l)throw new TypeError("Argument must not be a number");return c(l,d,Z)},b.alloc=function(l,d,Z){if("number"!=typeof l)throw new TypeError("Argument must be a number");var i=c(l);return void 0!==d?"string"==typeof Z?i.fill(d,Z):i.fill(d):i.fill(0),i},b.allocUnsafe=function(l){if("number"!=typeof l)throw new TypeError("Argument must be a number");return c(l)},b.allocUnsafeSlow=function(l){if("number"!=typeof l)throw new TypeError("Argument must be a number");return Z.SlowBuffer(l)}}(MR,MR.exports);var ER=MR.exports.Buffer,DR=Og.crypto||Og.msCrypto;DR&&DR.getRandomValues?jR.exports=function(l,d){if(l>4294967295)throw new RangeError("requested too many random bytes");var Z=ER.allocUnsafe(l);if(l>0)if(l>65536)for(var c=0;c<l;c+=65536)DR.getRandomValues(Z.slice(c,c+65536));else DR.getRandomValues(Z);return"function"==typeof d?As.nextTick((function(){d(null,Z)})):Z}:jR.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")};var OR=jR.exports;class qR{base64URLEncode(l){return IR.encode(l).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLDecode(l){return IR.decode(l).toString()}hashSha256(l){return XC.from(nR((new TextEncoder).encode(l)))}generateRandomBytes(l){return OR(l)}verifyJwt(l,d,Z,c,i,b,t){return async function(l,d,Z){var c;const i=await async function(l,d,Z){if(l instanceof Uint8Array&&(l=XR.decode(l)),"string"!=typeof l)throw new sR("Compact JWS must be a string or Uint8Array");const{0:c,1:i,2:b,length:t}=l.split(".");if(3!==t)throw new sR("Invalid Compact JWS");const G=await zR({payload:i,protected:c,signature:b},d,Z),I={payload:G.payload,protectedHeader:G.protectedHeader};return"function"==typeof d?{...I,key:G.key}:I}(l,d,Z);if((null===(c=i.protectedHeader.crit)||void 0===c?void 0:c.includes("b64"))&&!1===i.protectedHeader.b64)throw new yR("JWTs MUST NOT use unencoded payload");const b={payload:QR(i.protectedHeader,i.payload,Z),protectedHeader:i.protectedHeader};return"function"==typeof d?{...b,key:i.key}:b}(l,(G={keys:[d]},wR.prototype.getKey.bind(new wR(G))),{algorithms:Z,audience:c,clockTolerance:t,issuer:i,subject:b}).then((()=>Promise.resolve(!0)));var G}}const _R=(l,d)=>ag(void 0,void 0,void 0,(function*(){var Z;const c=(l=>{switch(l){case xg.LocalStorage:return new qy;case xg.SessionStorage:return new $y;case xg.BrowserMemory:return new _y;default:return new $y}})(l.storage),i=new qR,b=new Tg(c,i);yield b.initialize(l);const t=new Mg(b),G=b.getDataLayer(),I=yield Dg((()=>ag(void 0,void 0,void 0,(function*(){return b.getSignOutURL()}))),null!==(Z=l.storage)&&void 0!==Z?Z:xg.SessionStorage,(l=>G.setSessionDataParameter(Sg,null!=l?l:""))),m=d(b,t);let n=!1;const a=Oy.getInstance();let o,e,X=!0;(null==a?void 0:a.init)&&(yield a.init(!0,(l=>ag(void 0,void 0,void 0,(function*(){const d=Object.assign({attachToken:!0},l);d.attachToken&&(d.shouldAttachIDPAccessToken?l.headers=Object.assign(Object.assign({},l.headers),{Authorization:"Bearer ".concat(yield m.getIDPAccessToken())}):l.headers=Object.assign(Object.assign({},l.headers),{Authorization:"Bearer ".concat(yield m.getAccessToken())}))})))));const u=()=>ag(void 0,void 0,void 0,(function*(){const l=yield b.getOIDCServiceEndpoints(),d=yield G.getConfigData();m.initializeSessionManger(d,l,(()=>ag(void 0,void 0,void 0,(function*(){return(yield b.getBasicUserInfo()).sessionState}))),(l=>ag(void 0,void 0,void 0,(function*(){return b.getAuthorizationURL(l)}))),I)})),V=()=>ag(void 0,void 0,void 0,(function*(){return yield I.receivePromptNoneResponse((l=>ag(void 0,void 0,void 0,(function*(){yield G.setSessionDataParameter(Sg,null!=l?l:"")}))))})),W=l=>{l.preventSignOutURLUpdate&&(n=!0)},h=(l,d,Z)=>ag(void 0,void 0,void 0,(function*(){return yield m.requestAccessToken(l,d,u,void 0,Z)})),p=()=>ag(void 0,void 0,void 0,(function*(){const l=yield G.getConfigData(),d=yield b.getAuthorizationURL({prompt:"none",state:"sign-in-silently"}),Z=new URL(d);Z.searchParams.set("response_mode","query");const c=Z.toString();if(l.storage===xg.BrowserMemory&&l.enablePKCE){const l=Z.searchParams.get(Ng);Eg.setPKCE(Ug.extractPKCEKeyFromStateParam(null!=l?l:""),yield b.getPKCECode(null!=l?l:""))}return c}));return{disableHttpHandler:()=>(m.disableHttpHandler(a),X=!1,!0),enableHttpHandler:()=>(m.enableHttpHandler(a),X=!0,!0),getAccessToken:()=>ag(void 0,void 0,void 0,(function*(){return m.getAccessToken()})),getBasicUserInfo:()=>ag(void 0,void 0,void 0,(function*(){return m.getBasicUserInfo()})),getCryptoHelper:()=>ag(void 0,void 0,void 0,(function*(){return m.getCryptoHelper()})),getDataLayer:()=>ag(void 0,void 0,void 0,(function*(){return m.getDataLayer()})),getDecodedIDToken:()=>ag(void 0,void 0,void 0,(function*(){return m.getDecodedIDToken()})),getHttpClient:()=>a,getIDToken:()=>ag(void 0,void 0,void 0,(function*(){return m.getIDToken()})),getOIDCServiceEndpoints:()=>ag(void 0,void 0,void 0,(function*(){return m.getOIDCServiceEndpoints()})),httpRequest:l=>ag(void 0,void 0,void 0,(function*(){return yield m.httpRequest(a,l,X,o,e)})),httpRequestAll:l=>ag(void 0,void 0,void 0,(function*(){return yield m.httpRequestAll(l,a,X,o,e)})),isAuthenticated:()=>ag(void 0,void 0,void 0,(function*(){return m.isAuthenticated()})),refreshAccessToken:()=>ag(void 0,void 0,void 0,(function*(){try{return yield m.refreshAccessToken(W)}catch(l){return Promise.reject(l)}})),requestCustomGrant:l=>ag(void 0,void 0,void 0,(function*(){return yield m.requestCustomGrant(l,W)})),revokeAccessToken:()=>b.revokeAccessToken().then((()=>(I.reset(),t.clearRefreshTokenTimeout(),Promise.resolve(!0)))).catch((l=>Promise.reject(l))),setHttpRequestErrorCallback:l=>{o=l},setHttpRequestFinishCallback:l=>{(null==a?void 0:a.setHttpRequestFinishCallback)&&a.setHttpRequestFinishCallback(l)},setHttpRequestStartCallback:l=>{(null==a?void 0:a.setHttpRequestStartCallback)&&a.setHttpRequestStartCallback(l)},setHttpRequestSuccessCallback:l=>{(null==a?void 0:a.setHttpRequestSuccessCallback)&&a.setHttpRequestSuccessCallback(l)},signIn:(d,Z,c,i)=>ag(void 0,void 0,void 0,(function*(){var t,G,I;const n=yield m.handleSignIn(V,u);if(n)return n;{let m,n,a;return(null==l?void 0:l.responseMode)===mg.formPost&&Z?(m=Z,n=null!=c?c:"",a=null!=i?i:""):(m=null!==(t=new URL(window.location.href).searchParams.get(Yg))&&void 0!==t?t:"",n=null!==(G=new URL(window.location.href).searchParams.get(Sg))&&void 0!==G?G:"",a=null!==(I=new URL(window.location.href).searchParams.get(Ng))&&void 0!==I?I:"",Eg.removeAuthorizationCode()),m&&a?h(m,n,a):b.getAuthorizationURL(d).then((d=>ag(void 0,void 0,void 0,(function*(){if(l.storage===xg.BrowserMemory&&l.enablePKCE){const l=Ug.extractPKCEKeyFromStateParam(a);Eg.setPKCE(l,yield b.getPKCECode(a))}return location.href=d,yield Eg.waitTillPageRedirect(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""})}))))}})),signOut:()=>ag(void 0,void 0,void 0,(function*(){return(yield b.isAuthenticated())&&!n?location.href=yield b.getSignOutURL():(location.href=Eg.getSignOutURL(),yield G.removeOIDCProviderMetaData(),yield G.removeTemporaryData(),yield G.removeSessionData()),t.clearRefreshTokenTimeout(),yield Eg.waitTillPageRedirect(),!0})),trySignInSilently:()=>ag(void 0,void 0,void 0,(function*(){return yield m.trySignInSilently(p,h,I)})),updateConfig:l=>ag(void 0,void 0,void 0,(function*(){const d=yield G.getConfigData(),Z=!(d&&d.endpoints&&d.endpoints.checkSessionIframe&&l&&l.endpoints&&l.endpoints.checkSessionIframe&&d.endpoints.checkSessionIframe===l.endpoints.checkSessionIframe),c=Object.assign(Object.assign({},d),l);yield b.updateConfig(c),c.enableOIDCSessionManagement&&Z&&(I.reset(),u())}))}})),$R=(l,d,Z)=>ag(void 0,void 0,void 0,(function*(){var c;let i;const b=null!==(c=null==l?void 0:l.requestTimeout)&&void 0!==c?c:6e4;let t=!0,G=!1;const I=(l=>{switch(l){case xg.LocalStorage:return new qy;case xg.SessionStorage:return new $y;case xg.BrowserMemory:return new _y;default:return new $y}})(l.storage),m=new qR,n=new Tg(I,m);yield n.initialize(l);const a=new Mg(n),o=yield Dg((()=>ag(void 0,void 0,void 0,(function*(){const l={type:"sign-out"};try{return yield u(l)}catch(l){return Eg.getSignOutURL()}}))),l.storage,(l=>V(l))),e=Z(n,a),X=new d,u=l=>{const d=new MessageChannel;return X.postMessage(l,[d.port2]),new Promise(((l,Z)=>{const c=setTimeout((()=>{Z(new Lg("SPA-WEB_WORKER_CLIENT-COM-TO01","Operation timed out.","No response was received from the web worker for "+b/1e3+" since dispatching the request"))}),b);return d.port1.onmessage=d=>{let{data:i}=d;if(clearTimeout(c),null==i?void 0:i.success){const d=(null==i?void 0:i.data)?JSON.parse(null==i?void 0:i.data):null;(null==i?void 0:i.blob)&&(d.data=null==i?void 0:i.blob),l(d)}else Z(i.error?JSON.parse(i.error):null)}}))},V=l=>u({data:l,type:"set_session_state"}),W=()=>u({type:"start_auto_refresh_token"}),h=()=>ag(void 0,void 0,void 0,(function*(){const l=yield R(),d=yield Y();e.initializeSessionManger(d,l,(()=>ag(void 0,void 0,void 0,(function*(){return(yield S()).sessionState}))),(l=>ag(void 0,void 0,void 0,(function*(){return(yield g(l)).authorizationURL}))),o)})),p=()=>ag(void 0,void 0,void 0,(function*(){var l;const d=yield Y(),Z=yield u({data:{prompt:"none",state:"sign-in-silently"},type:"get_auth_url"}),c=Ug.extractPKCEKeyFromStateParam(null!==(l=new URL(Z.authorizationURL).searchParams.get(Ng))&&void 0!==l?l:"");Z.pkce&&d.enablePKCE&&Eg.setPKCE(c,Z.pkce);const i=Z.authorizationURL,b=new URL(i);return b.searchParams.set("response_mode","query"),b.toString()})),g=l=>ag(void 0,void 0,void 0,(function*(){const d=yield Y();return u({data:l,type:"get_auth_url"}).then((l=>ag(void 0,void 0,void 0,(function*(){var Z;if(l.pkce&&d.enablePKCE){const d=Ug.extractPKCEKeyFromStateParam(null!==(Z=new URL(l.authorizationURL).searchParams.get(Ng))&&void 0!==Z?Z:"");Eg.setPKCE(d,l.pkce)}return Promise.resolve(l)}))))})),s=(l,d,Z)=>ag(void 0,void 0,void 0,(function*(){const c=yield Y(),i=Ug.extractPKCEKeyFromStateParam(Z),b={data:{code:l,pkce:c.enablePKCE?Eg.getPKCE(i):void 0,sessionState:d,state:Z},type:"request_get_token"};return c.enablePKCE&&Eg.removePKCE(i),u(b).then((l=>u({type:"get_sign_out_url"}).then((d=>(Eg.setSignOutURL(d),c.enableOIDCSessionManagement&&h(),W(),Promise.resolve(l)))).catch((l=>Promise.reject(l))))).catch((l=>Promise.reject(l)))})),y=()=>ag(void 0,void 0,void 0,(function*(){return yield o.receivePromptNoneResponse((l=>ag(void 0,void 0,void 0,(function*(){return V(l)}))))})),C=()=>ag(void 0,void 0,void 0,(function*(){if(yield r())return yield W(),l.enableOIDCSessionManagement&&h(),S()})),R=()=>u({type:"get-oidc-service-endpoints"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),Y=()=>u({type:"get_config_data"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),S=()=>u({type:"get-basic-user-info"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),r=()=>u({type:"is_authenticated"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l)));return{disableHttpHandler:()=>u({type:"disable_http_handler"}).then((()=>(t=!1,Promise.resolve(!0)))).catch((l=>Promise.reject(l))),enableHttpHandler:()=>u({type:"enable_http_handler"}).then((()=>(t=!0,Promise.resolve(!0)))).catch((l=>Promise.reject(l))),getBasicUserInfo:S,getCryptoHelper:()=>u({type:"get-crypto-helper"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getDecodedIDPIDToken:()=>u({type:"get-decoded-idp-id-token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getDecodedIDToken:()=>u({type:"get-decoded-id-token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getIDToken:()=>u({type:"get_id_token"}).then((l=>Promise.resolve(l))).catch((l=>Promise.reject(l))),getOIDCServiceEndpoints:R,httpRequest:l=>u({data:l,type:"http-request"}).then((l=>Promise.resolve(l))).catch((l=>ag(void 0,void 0,void 0,(function*(){return t&&("function"==typeof i.requestErrorCallback&&(yield i.requestErrorCallback(l)),"function"==typeof i.requestFinishCallback&&i.requestFinishCallback()),Promise.reject(l)})))),httpRequestAll:l=>u({data:l,type:"http-request-all"}).then((l=>Promise.resolve(l))).catch((l=>ag(void 0,void 0,void 0,(function*(){return t&&("function"==typeof i.requestErrorCallback&&(yield i.requestErrorCallback(l)),"function"==typeof i.requestFinishCallback&&i.requestFinishCallback()),Promise.reject(l)})))),initialize:()=>(i||(i={requestErrorCallback:()=>Promise.resolve(),requestFinishCallback:()=>null,requestStartCallback:()=>null,requestSuccessCallback:()=>null}),X.onmessage=l=>{let{data:d}=l;switch(d.type){case"request-finish":(null==i?void 0:i.requestFinishCallback)&&(null==i||i.requestFinishCallback());break;case"request-start":(null==i?void 0:i.requestStartCallback)&&(null==i||i.requestStartCallback());break;case"request-success":(null==i?void 0:i.requestSuccessCallback)&&(null==i||i.requestSuccessCallback(d.data?JSON.parse(d.data):null))}},u({data:l,type:"init"}).then((()=>Promise.resolve(!0))).catch((l=>Promise.reject(l)))),isAuthenticated:r,refreshAccessToken:()=>u({type:"refresh_access-token"}),requestCustomGrant:l=>u({data:l,type:"request-custom-grant"}).then((d=>(l.preventSignOutURLUpdate&&(G=!0),Promise.resolve(d)))).catch((l=>Promise.reject(l))),revokeAccessToken:()=>u({type:"revoke-access-token"}).then((l=>(o.reset(),Promise.resolve(l)))).catch((l=>Promise.reject(l))),setHttpRequestErrorCallback:l=>{l&&"function"==typeof l&&(i.requestErrorCallback=l)},setHttpRequestFinishCallback:l=>{l&&"function"==typeof l&&(i.requestFinishCallback=l)},setHttpRequestStartCallback:l=>{l&&"function"==typeof l&&(i.requestStartCallback=l)},setHttpRequestSuccessCallback:l=>{l&&"function"==typeof l&&(i.requestSuccessCallback=l)},signIn:(d,Z,c,i)=>ag(void 0,void 0,void 0,(function*(){var b,t,G;const I=yield e.handleSignIn(y,h,C);if(I)return I;{let I,m,n;return(null==l?void 0:l.responseMode)===mg.formPost&&Z?(I=Z,m=null!=c?c:"",n=null!=i?i:""):(I=null!==(b=new URL(window.location.href).searchParams.get(Yg))&&void 0!==b?b:"",m=null!==(t=new URL(window.location.href).searchParams.get(Sg))&&void 0!==t?t:"",n=null!==(G=new URL(window.location.href).searchParams.get(Ng))&&void 0!==G?G:"",Eg.removeAuthorizationCode()),I&&n?s(I,m,n):g(d).then((l=>ag(void 0,void 0,void 0,(function*(){return location.href=l.authorizationURL,yield Eg.waitTillPageRedirect(),Promise.resolve({allowedScopes:"",displayName:"",email:"",sessionState:"",sub:"",tenantDomain:"",username:""})})))).catch((l=>Promise.reject(l)))}})),signOut:()=>r().then((l=>ag(void 0,void 0,void 0,(function*(){return l&&!G?u({type:"sign-out"}).then((l=>ag(void 0,void 0,void 0,(function*(){return window.location.href=l,yield Eg.waitTillPageRedirect(),Promise.resolve(!0)})))).catch((l=>Promise.reject(l))):(window.location.href=Eg.getSignOutURL(),yield Eg.waitTillPageRedirect(),Promise.resolve(!0))})))).catch((l=>Promise.reject(l))),trySignInSilently:()=>ag(void 0,void 0,void 0,(function*(){return yield e.trySignInSilently(p,s,o)})),updateConfig:l=>ag(void 0,void 0,void 0,(function*(){const d=yield Y(),Z=!(d&&d.endpoints&&d.endpoints.checkSessionIframe&&l&&l.endpoints&&l.endpoints.checkSessionIframe&&d.endpoints.checkSessionIframe===l.endpoints.checkSessionIframe),c=Object.assign(Object.assign({},d),l),i={data:c,type:"update_config"};yield u(i),c.enableOIDCSessionManagement&&Z&&(o.reset(),h())}))}})),lY={checkSessionInterval:3,clientHost:origin,enableOIDCSessionManagement:!1,sessionRefreshInterval:300,storage:xg.SessionStorage};class dY{constructor(l){this._authHelper=jg,this._worker=fg,this._initialized=!1,this._startedInitialize=!1,this._onSignInCallback=()=>null,this._onSignOutCallback=()=>null,this._onSignOutFailedCallback=()=>null,this._onEndUserSession=()=>null,this._onInitialize=()=>null,this._onCustomGrant=new Map,this._instanceID=l}instantiateAuthHelper(l){this._authHelper=l||jg}instantiateWorker(l){this._worker=l||fg}_isInitialized(){return ag(this,void 0,void 0,(function*(){if(!this._startedInitialize)return!1;let l=0;for(;!this._initialized;)1e4===l&&console.warn("It is taking longer than usual for the object to be initialized"),yield new Promise((l=>setTimeout(l,1))),l++;return!0}))}_validateMethod(){return ag(this,void 0,void 0,(function*(){return(yield this._isInitialized())&&!!(yield this.isAuthenticated())||Promise.reject()}))}
/**
       * This method returns the instance of the singleton class.
       *
       * @return {AsgardeoSPAClient} - Returns the instance of the singleton class.
       *
       * @example
       * ```
       * const auth = AsgardeoSPAClient.getInstance();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getinstance
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */static getInstance(l){var d,Z;return l&&(null===(d=this._instances)||void 0===d?void 0:d.get(l))?this._instances.get(l):!l&&(null===(Z=this._instances)||void 0===Z?void 0:Z.get("primaryInstance"))?this._instances.get("primaryInstance"):l?(this._instances.set(l,new dY(l)),this._instances.get(l)):(this._instances.set("primaryInstance",new dY("primaryInstance")),this._instances.get("primaryInstance"))}
/**
       * This method initializes the `AsgardeoSPAClient` instance.
       *
       * @param {ConfigInterface} config The config object to initialize with.
       *
       * @return {Promise<boolean>} - Resolves to `true` if initialization is successful.
       *
       * @example
       * ```
       * auth.initialize({
       *     signInRedirectURL: "http://localhost:3000/sign-in",
       *     clientID: "client ID",
       *     baseUrl: "https://api.asgardeo.io"
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#initialize
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */initialize(l,d,Z){var c;return ag(this,void 0,void 0,(function*(){if(this._storage=null!==(c=l.storage)&&void 0!==c?c:xg.SessionStorage,this._initialized=!1,this._startedInitialize=!0,d&&this.instantiateAuthHelper(d),Z&&this.instantiateWorker(Z),this._storage!==xg.WebWorker){if(!this._client){const d=l,Z=Object.assign({},lY);this._client=yield _R(Object.assign(Object.assign({},Z),d),((l,d)=>new this._authHelper(l,d)))}return this._initialized=!0,this._onInitialize&&this._onInitialize(!0),Promise.resolve(!0)}if(!this._client){const d=l;return this._client=yield $R(Object.assign(Object.assign({},lY),d),this._worker,((l,d)=>new this._authHelper(l,d))),this._client.initialize().then((()=>(this._onInitialize&&this._onInitialize(!0),this._initialized=!0,Promise.resolve(!0)))).catch((l=>Promise.reject(l)))}return Promise.resolve(!0)}))}
/**
       * This method returns a Promise that resolves with the basic user information obtained from the ID token.
       *
       * @return {Promise<BasicUserInfo>} - A promise that resolves with the user information.
       *
       * @example
       * ```
       * auth.getBasicUserInfo().then((response) => {
       *    // console.log(response);
       * }).catch((error) => {
       *    // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getuserinfo
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getBasicUserInfo(){var l;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getBasicUserInfo()}))}
/**
       * This method initiates the authentication flow. This should be called twice.
       *  1. To initiate the authentication flow.
       *  2. To obtain the access token after getting the authorization code.
       *
       * To satisfy the second condition, one of the two strategies mentioned below can be used:
       *  1. Redirect the user back to the same login page that initiated the authentication flow.
       *  2. Call the `signIn()` method in the page the user is redirected to after authentication.
       *
       * **To fire a callback function after signing in, use the `on()` method.**
       * **To learn more about the `on()` method:**
       * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
       *
       * @param {SignInConfig} config - The sign-in config.
       * The `SignInConfig` object has these two attributes in addition to any custom key-value pairs.
       *  1. fidp - Specifies the FIDP parameter that is used to take the user directly to an IdP login page.
       *  2. forceInit: Specifies if the OIDC Provider Meta Data should be loaded again from the `well-known`
       * endpoint.
       *  3. Any other parameters that should be appended to the authorization request.
       * @param {string} authorizationCode - The authorization code. (Optional)
       * @param {string} sessionState - The session state. (Optional)
       * @param {string} state - The state. (Optional)
       *
       * @return {Promise<BasicUserInfo>} - A promise that resolves with the user information.
       *
       * @example
       * ```
       * auth.signIn();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#signin
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */signIn(l,d,Z,c){var i;return ag(this,void 0,void 0,(function*(){if(yield this._isInitialized(),Eg.canContinueSignIn(Boolean(null==l?void 0:l.callOnlyOnRedirect),d))return null==l||delete l.callOnlyOnRedirect,null===(i=this._client)||void 0===i?void 0:i.signIn(l,d,Z,c).then((l=>(this._onSignInCallback&&(l.allowedScopes||l.displayName||l.email||l.username)&&this._onSignInCallback(l),l)))}))}trySignInSilently(){var l;return ag(this,void 0,void 0,(function*(){if(yield this._isInitialized(),!Eg.wasSignInCalled())return null===(l=this._client)||void 0===l?void 0:l.trySignInSilently().then((l=>{if(this._onSignInCallback&&l){const d=l;(d.allowedScopes||d.displayName||d.email||d.username)&&this._onSignInCallback(d)}return l}))}))}
/**
       * This method initiates the sign-out flow.
       *
       * **To fire a callback function after signing out, use the `on()` method.**
       * **To learn more about the `on()` method:**
       * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
       *
       * @return {Promise<boolean>} - Returns a promise that resolves with `true` if sign out is successful.
       *
       * @example
       * ```
       * auth.signOut();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#signout
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */signOut(){var l,d;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null!==(d=yield null===(l=this._client)||void 0===l?void 0:l.signOut())&&void 0!==d&&d}))}
/**
       * This method sends an API request to a protected endpoint.
       * The access token is automatically attached to the header of the request.
       * This is the only way by which protected endpoints can be accessed
       * when the web worker is used to store session information.
       *
       * @param {HttpRequestConfig} config -  The config object containing attributes necessary to send a request.
       *
       * @return {Promise<HttpResponse>} - Returns a Promise that resolves with the response to the request.
       *
       * @example
       * ```
       *  const requestConfig = {
       *      headers: {
       *          "Accept": "application/json",
       *          "Access-Control-Allow-Origin": "https://api.asgardeo.io/myaccount",
       *          "Content-Type": "application/scim+json"
       *      },
       *      method: "GET",
       *      url: "https://api.asgardeo.io/scim2/me"
       *  };
       *
       *  return auth.httpRequest(requestConfig)
       *     .then((response) => {
       *           // console.log(response);
       *      })
       *      .catch((error) => {
       *           // console.error(error);
       *      });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#httprequest
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */httpRequest(l){var d;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(d=this._client)||void 0===d?void 0:d.httpRequest(l)}))}
/**
       * This method sends multiple API requests to a protected endpoint.
       * The access token is automatically attached to the header of the request.
       * This is the only way by which multiple requests can be sent to protected endpoints
       * when the web worker is used to store session information.
       *
       * @param {HttpRequestConfig[]} config -  The config object containing attributes necessary to send a request.
       *
       * @return {Promise<HttpResponse[]>} - Returns a Promise that resolves with the responses to the requests.
       *
       * @example
       * ```
       *  const requestConfig = {
       *      headers: {
       *          "Accept": "application/json",
       *          "Content-Type": "application/scim+json"
       *      },
       *      method: "GET",
       *      url: "https://api.asgardeo.io/scim2/me"
       *  };
       *
       *  const requestConfig2 = {
       *      headers: {
       *          "Accept": "application/json",
       *          "Content-Type": "application/scim+json"
       *      },
       *      method: "GET",
       *      url: "https://api.asgardeo.io/scim2/me"
       *  };
       *
       *  return auth.httpRequest([requestConfig, requestConfig2])
       *     .then((responses) => {
       *           response.forEach((response)=>{
       *              // console.log(response);
       *           });
       *      })
       *      .catch((error) => {
       *           // console.error(error);
       *      });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#httprequestall
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */httpRequestAll(l){var d;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(d=this._client)||void 0===d?void 0:d.httpRequestAll(l)}))}
/**
       * This method allows you to send a request with a custom grant.
       *
       * @param {CustomGrantRequestParams} config - The request parameters.
       *
       * @return {Promise<HttpResponse<any> | SignInResponse>} - A Promise that resolves with
       * the value returned by the custom grant request.
       *
       * @example
       * ```
       * auth.customGrant({
       *   attachToken: false,
       *   data: {
       *       client_id: "{{clientId}}",
       *       grant_type: "account_switch",
       *       scope: "{{scope}}",
       *       token: "{{token}}",
       *   },
       *   id: "account-switch",
       *   returnResponse: true,
       *   returnsSession: true,
       *   signInRequired: true
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#customgrant
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */requestCustomGrant(l){var d,Z;return ag(this,void 0,void 0,(function*(){if(l.signInRequired,yield this._validateMethod(),!l.id)return Promise.reject(new Lg("SPA-AUTH_CLIENT-RCG-NF01","The custom grant request id not found.","The id attribute of the custom grant config object passed as an argument should have a value."));const c=yield null===(d=this._client)||void 0===d?void 0:d.requestCustomGrant(l),i=this._onCustomGrant.get(l.id);return i&&i(null===(Z=this._onCustomGrant)||void 0===Z?void 0:Z.get(l.id)),c}))}
/**
       * This method ends a user session. The access token is revoked and the session information is destroyed.
       *
       * **To fire a callback function after ending user session, use the `on()` method.**
       * **To learn more about the `on()` method:**
       * @see {@link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#on}
       *
       * @return {Promise<boolean>} - A promise that resolves with `true` if the process is successful.
       *
       * @example
       * ```
       * auth.endUserSession();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#endusersession
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */revokeAccessToken(){var l;return ag(this,void 0,void 0,(function*(){yield this._validateMethod();const d=yield null===(l=this._client)||void 0===l?void 0:l.revokeAccessToken();return this._onEndUserSession&&(yield this._onEndUserSession(d)),d}))}
/**
       * This method returns a Promise that resolves with an object containing the service endpoints.
       *
       * @return {Promise<ServiceResourcesType} - A Promise that resolves with an object containing the service endpoints.
       *
       * @example
       * ```
       * auth.getServiceEndpoints().then((endpoints) => {
       *      // console.log(endpoints);
       *  }).error((error) => {
       *      // console.error(error);
       *  });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getserviceendpoints
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getOIDCServiceEndpoints(){var l;return ag(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.getOIDCServiceEndpoints()}))}
/**
       * This methods returns the Axios http client.
       *
       * @return {HttpClientInstance} - The Axios HTTP client.
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getHttpClient(){if(this._client){if(this._storage!==xg.WebWorker)return this._client.getHttpClient();throw new Lg("SPA-AUTH_CLIENT-GHC-IV01","Http client cannot be returned.","The http client cannot be returned when the storage type is set to webWorker.")}throw new Lg("SPA-AUTH_CLIENT-GHC-NF02","The SDK is not initialized.","The SDK has not been initialized yet. Initialize the SDK using the initialize method before calling this method.")}
/**
       * This method decodes the payload of the id token and returns it.
       *
       * @return {Promise<DecodedIdTokenPayloadInterface>} - A Promise that resolves with
       * the decoded payload of the id token.
       *
       * @example
       * ```
       * auth.getDecodedIDToken().then((response)=>{
       *     // console.log(response);
       * }).catch((error)=>{
       *     // console.error(error);
       * });
       * ```
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getdecodedidtoken
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getDecodedIDToken(){var l;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getDecodedIDToken()}))}
/**
       * This method returns the CryptoHelper instance.
       *
       * @return {Promise<DecodedIdTokenPayloadInterface>} - A Promise that resolves with
       * the CryptoHelper instance.
       *
       * @example
       * ```
       * auth.getCryptoHelper().then((response)=>{
       *     // console.log(response);
       * }).catch((error)=>{
       *     // console.error(error);
       * });
       * ```
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getCryptoHelper
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getCryptoHelper(){var l;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getCryptoHelper()}))}
/**
       * This method return the ID token.
       *
       * @return {Promise<string>} - A Promise that resolves with the ID token.
       *
       * @example
       * ```
       * const idToken = await auth.getIDToken();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIDToken
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */getIDToken(){var l;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.getIDToken()}))}
/**
       * This method return a Promise that resolves with the access token.
       *
       * **This method will not return the access token if the storage type is set to `webWorker`.**
       *
       * @return {Promise<string>} - A Promise that resolves with the access token.
       *
       * @example
       * ```
       *   auth.getAccessToken().then((token) => {
       *       // console.log(token);
       *   }).catch((error) => {
       *       // console.error(error);
       *   });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getaccesstoken
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getAccessToken(){return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(xg.WebWorker,xg.BrowserMemory)].includes(this._storage)?Promise.reject(new Lg("SPA-AUTH_CLIENT-GAT-IV01","The access token cannot be returned.","The access token cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getAccessToken()}))}
/**
       * This method return a Promise that resolves with the idp access token.
       *
       * **This method will not return the access token if the storage type is set to `webWorker`.**
       *
       * @return {Promise<string>} - A Promise that resolves with the idp access token.
       *
       * @example
       * ```
       *   auth.getIDPAccessToken().then((token) => {
       *       // console.log(token);
       *   }).catch((error) => {
       *       // console.error(error);
       *   });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getaccesstoken
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getIDPAccessToken(){return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(xg.WebWorker,xg.BrowserMemory)].includes(this._storage)?Promise.reject(new Lg("SPA-AUTH_CLIENT-GIAT-IV01","The access token cannot be returned.","The access token cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getAccessToken()}))}
/**
       * This method return a Promise that resolves with the data layer object.
       *
       * **This method will not return the data layer object, if the storage type is set to `webWorker`.**
       *
       * @return {Promise<string>} - A Promise that resolves with the data layer object.
       *
       * @example
       * ```
       *   auth.getDataLayer().then((dataLayer) => {
       *       // console.log(dataLayer);
       *   }).catch((error) => {
       *       // console.error(error);
       *   });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#getdatalayer
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */getDataLayer(){return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),this._storage&&[(xg.WebWorker,xg.BrowserMemory)].includes(this._storage)?Promise.reject(new Lg("SPA-AUTH_CLIENT-GDL-IV01","The data layer cannot be returned.","The data layer cannot be returned when the storage type is set to webWorker or browserMemory.")):this._client.getDataLayer()}))}
/**
       * This method refreshes the access token.
       *
       * @return {TokenResponseInterface} - A Promise that resolves with an object containing
       * information about the refreshed access token.
       *
       * @example
       * ```
       * auth.refreshToken().then((response)=>{
       *      // console.log(response);
       * }).catch((error)=>{
       *      // console.error(error);
       * });
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#refreshtoken
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */refreshAccessToken(){var l;return ag(this,void 0,void 0,(function*(){return yield this._validateMethod(),null===(l=this._client)||void 0===l?void 0:l.refreshAccessToken()}))}
/**
       * This method specifies if the user is authenticated or not.
       *
       * @return {Promise<boolean>} - A Promise that resolves with `true` if the user is authenticated.
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */isAuthenticated(){var l;return ag(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.isAuthenticated()}))}on(l,d,Z){var c,i,b,t;return ag(this,void 0,void 0,(function*(){if(yield this._isInitialized(),!d||"function"!=typeof d)throw new Lg("SPA-AUTH_CLIENT-ON-IV02","Invalid callback function.","The provided callback function is invalid.");switch(l){case Qg.SignIn:this._onSignInCallback=d;break;case Qg.SignOut:this._onSignOutCallback=d,(yield Eg.isSignOutSuccessful())&&this._onSignOutCallback();break;case Qg.RevokeAccessToken:this._onEndUserSession=d;break;case Qg.Initialize:this._onInitialize=d;break;case Qg.HttpRequestError:null===(c=this._client)||void 0===c||c.setHttpRequestErrorCallback(d);break;case Qg.HttpRequestFinish:null===(i=this._client)||void 0===i||i.setHttpRequestFinishCallback(d);break;case Qg.HttpRequestStart:null===(b=this._client)||void 0===b||b.setHttpRequestStartCallback(d);break;case Qg.HttpRequestSuccess:null===(t=this._client)||void 0===t||t.setHttpRequestSuccessCallback(d);break;case Qg.CustomGrant:Z&&this._onCustomGrant.set(Z,d);break;case Qg.SignOutFailed:{this._onSignOutFailedCallback=d;const l=Eg.didSignOutFail();l&&this._onSignOutFailedCallback(l);break}default:throw new Lg("SPA-AUTH_CLIENT-ON-IV01","Invalid hook.","The provided hook is invalid.")}}))}
/**
       * This method enables callback functions attached to the http client.
       *
       * @return {Promise<boolean>} - A promise that resolves with True.
       *
       * @example
       * ```
       * auth.enableHttpHandler();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#enableHttpHandler
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */enableHttpHandler(){var l;return ag(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.enableHttpHandler()}))}
/**
       * This method disables callback functions attached to the http client.
       *
       * @return {Promise<boolean>} - A promise that resolves with True.
       *
       * @example
       * ```
       * auth.disableHttpHandler();
       * ```
       *
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master#disableHttpHandler
       *
       * @memberof AsgardeoSPAClient
       *
       * @preserve
       */disableHttpHandler(){var l;return ag(this,void 0,void 0,(function*(){return yield this._isInitialized(),null===(l=this._client)||void 0===l?void 0:l.disableHttpHandler()}))}
/**
       * This method updates the configuration that was passed into the constructor when instantiating this class.
       *
       * @param {Partial<AuthClientConfig<T>>} config - A config object to update the SDK configurations with.
       *
       * @example
       * ```
       * const config = {
       *     signInRedirectURL: "http://localhost:3000/sign-in",
       *     clientID: "client ID",
       *     baseUrl: "https://api.asgardeo.io"
       * }
       * const auth.updateConfig(config);
       * ```
       * @link https://github.com/asgardeo/asgardeo-auth-spa-sdk/tree/master/lib#updateConfig
       *
       * @memberof AsgardeoAuthClient
       *
       * @preserve
       */updateConfig(l){return ag(this,void 0,void 0,(function*(){if(yield this._isInitialized(),this._storage===xg.WebWorker){const d=this._client;yield d.updateConfig(l)}else{const d=this._client;yield d.updateConfig(l)}}))}}dY._instances=new Map;class ZY extends Worker{constructor(){super(...arguments),this.onmessage=()=>null}}const cY=l=>{const d=self;let Z;d.onmessage=d=>{let{data:t,ports:G}=d;return ag(void 0,void 0,void 0,(function*(){var d,I,m,n;const a=G[0];if("init"===t.type||Z)switch(t.type){case"init":try{const d=Object.assign({},t.data);Z=yield((l,d)=>ag(void 0,void 0,void 0,(function*(){const Z=new _y,c=new qR,i=new Tg(Z,c);yield i.initialize(l);const b=new Mg(i),t=d(i,b),G=i.getDataLayer(),I=Oy.getInstance();return(null==I?void 0:I.init)&&(yield I.init(!0,(l=>ag(void 0,void 0,void 0,(function*(){const d=Object.assign({attachToken:!0},l);d.attachToken&&(d.shouldAttachIDPAccessToken?l.headers=Object.assign(Object.assign({},l.headers),{Authorization:"Bearer ".concat(yield t.getIDPAccessToken())}):l.headers=Object.assign(Object.assign({},l.headers),{Authorization:"Bearer ".concat(yield t.getAccessToken())}))}))))),{disableHttpHandler:()=>{t.disableHttpHandler(I)},enableHttpHandler:()=>{t.enableHttpHandler(I)},getAccessToken:()=>t.getAccessToken(),getAuthorizationURL:l=>ag(void 0,void 0,void 0,(function*(){return i.getAuthorizationURL(l).then((l=>ag(void 0,void 0,void 0,(function*(){var d;const Z=null!==(d=new URL(l).searchParams.get(Ng))&&void 0!==d?d:"",c=yield i.getPKCECode(Z);return{authorizationURL:l,pkce:c}})))).catch((l=>Promise.reject(l)))})),getBasicUserInfo:()=>ag(void 0,void 0,void 0,(function*(){return t.getBasicUserInfo()})),getConfigData:()=>ag(void 0,void 0,void 0,(function*(){return G.getConfigData()})),getCryptoHelper:()=>ag(void 0,void 0,void 0,(function*(){return t.getCryptoHelper()})),getDecodedIDPIDToken:()=>ag(void 0,void 0,void 0,(function*(){return t.getDecodedIDPIDToken()})),getDecodedIDToken:()=>ag(void 0,void 0,void 0,(function*(){return t.getDecodedIDToken()})),getIDToken:()=>ag(void 0,void 0,void 0,(function*(){return t.getIDToken()})),getOIDCServiceEndpoints:()=>ag(void 0,void 0,void 0,(function*(){return t.getOIDCServiceEndpoints()})),getSignOutURL:()=>ag(void 0,void 0,void 0,(function*(){return yield i.getSignOutURL()})),httpRequest:l=>ag(void 0,void 0,void 0,(function*(){return yield t.httpRequest(I,l)})),httpRequestAll:l=>ag(void 0,void 0,void 0,(function*(){return yield t.httpRequestAll(l,I)})),isAuthenticated:()=>t.isAuthenticated(),refreshAccessToken:()=>ag(void 0,void 0,void 0,(function*(){try{return yield t.refreshAccessToken()}catch(l){return Promise.reject(l)}})),requestAccessToken:(l,d,Z,c)=>ag(void 0,void 0,void 0,(function*(){return yield t.requestAccessToken(l,d,void 0,Z,c)})),requestCustomGrant:l=>ag(void 0,void 0,void 0,(function*(){return yield t.requestCustomGrant(l)})),revokeAccessToken:()=>i.revokeAccessToken().then((()=>(b.clearRefreshTokenTimeout(),Promise.resolve(!0)))).catch((l=>Promise.reject(l))),setHttpRequestFinishCallback:l=>{(null==I?void 0:I.setHttpRequestFinishCallback)&&I.setHttpRequestFinishCallback(l)},setHttpRequestStartCallback:l=>{(null==I?void 0:I.setHttpRequestStartCallback)&&I.setHttpRequestStartCallback(l)},setHttpRequestSuccessCallback:l=>{(null==I?void 0:I.setHttpRequestSuccessCallback)&&I.setHttpRequestSuccessCallback(l)},setSessionState:l=>ag(void 0,void 0,void 0,(function*(){yield G.setSessionDataParameter(Sg,l)})),signOut:()=>ag(void 0,void 0,void 0,(function*(){return b.clearRefreshTokenTimeout(),yield i.getSignOutURL()})),startAutoRefreshToken:()=>ag(void 0,void 0,void 0,(function*(){b.clearRefreshTokenTimeout(),b.refreshAccessTokenAutomatically(t)})),updateConfig:l=>ag(void 0,void 0,void 0,(function*(){yield i.updateConfig(l)}))}})))(d,l),Z.setHttpRequestFinishCallback(b),Z.setHttpRequestStartCallback(c),Z.setHttpRequestSuccessCallback(i),a.postMessage(Pg.generateSuccessMessage())}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get_auth_url":Z.getAuthorizationURL(null==t?void 0:t.data).then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"request_get_token":Z.requestAccessToken(null===(d=null==t?void 0:t.data)||void 0===d?void 0:d.code,null===(I=null==t?void 0:t.data)||void 0===I?void 0:I.sessionState,null===(m=null==t?void 0:t.data)||void 0===m?void 0:m.pkce,null===(n=null==t?void 0:t.data)||void 0===n?void 0:n.state).then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"http-request":Z.httpRequest(t.data).then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"http-request-all":Z.httpRequestAll(t.data).then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"sign-out":try{a.postMessage(Pg.generateSuccessMessage(yield Z.signOut()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"request-custom-grant":Z.requestCustomGrant(t.data).then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"revoke-access-token":Z.revokeAccessToken().then((l=>{a.postMessage(Pg.generateSuccessMessage(l))})).catch((l=>{a.postMessage(Pg.generateFailureMessage(l))}));break;case"get-oidc-service-endpoints":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getOIDCServiceEndpoints()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get-basic-user-info":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getBasicUserInfo()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get-decoded-id-token":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getDecodedIDToken()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get-crypto-helper":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getCryptoHelper()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get_id_token":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getIDToken()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"enable_http_handler":Z.enableHttpHandler(),a.postMessage(Pg.generateSuccessMessage());break;case"disable_http_handler":Z.disableHttpHandler(),a.postMessage(Pg.generateSuccessMessage());break;case"is_authenticated":try{a.postMessage(Pg.generateSuccessMessage(yield Z.isAuthenticated()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get_sign_out_url":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getSignOutURL()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"refresh_access-token":try{a.postMessage(Pg.generateSuccessMessage(yield Z.refreshAccessToken()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"start_auto_refresh_token":try{a.postMessage(Pg.generateSuccessMessage(Z.startAutoRefreshToken()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"set_session_state":try{a.postMessage(Pg.generateSuccessMessage(yield Z.setSessionState(null==t?void 0:t.data)))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"update_config":try{a.postMessage(Pg.generateSuccessMessage(yield Z.updateConfig(null==t?void 0:t.data)))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;case"get_config_data":try{a.postMessage(Pg.generateSuccessMessage(yield Z.getConfigData()))}catch(l){a.postMessage(Pg.generateFailureMessage(l))}break;default:null==a||a.postMessage(Pg.generateFailureMessage(new Lg("SPA-CLIENT_WORKER-ONMSG-IV02","The message type is invalid.","The message type provided, ".concat(t.type,", is invalid."))))}else a.postMessage(Pg.generateFailureMessage(new Lg("SPA-CLIENT_WORKER-ONMSG-NF01","The web worker has not been initialized yet.","The initialize method needs to be called before the specified operation can be carried out.")))}))};const c=()=>{d.postMessage({type:"request-start"})},i=l=>{d.postMessage({data:JSON.stringify(null!=l?l:""),type:"request-success"})},b=()=>{d.postMessage({type:"request-finish"})}};function iY(l,d,Z){var c=void 0===d?null:d,i=function(l,d){var Z=atob(l);if(d){for(var c=new Uint8Array(Z.length),i=0,b=Z.length;i<b;++i)c[i]=Z.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(c.buffer))}return Z}(l,void 0!==Z&&Z),b=i.indexOf("\n",10)+1,t=i.substring(b)+(c?"//# sourceMappingURL="+c:""),G=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(G)}var bY,tY,GY,IY,mY=(bY="",tY=null,GY=!1,function(l){return IY=IY||iY(bY,tY,GY),new Worker(IY,l)});function nY(l){return Object.prototype.toString.call(l).slice(8,-1)}function aY(l){return"Array"===nY(l)}function oY(l,d,Z,c){return"Object"===nY(i=l)&&i.constructor===Object&&Object.getPrototypeOf(i)===Object.prototype&&Object.keys(l).length&&"FieldValue.serverTimestamp"!==l.methodName?(function(l){return"Number"===nY(l)&&!isNaN(l)}(c)&&c--,Object.keys(l).reduce(((i,b)=>{const t=(d?d+".":"")+b,G=-1===c?{[t]:l[b]}:oY(l[b],t,Z,c);return Object.assign(i,G)}),{})):d?(Z[d]=l,Z):l;var i}function eY(l){return l.reduce(((l,d)=>aY(d)?[...l,...eY(d)]:[...l,d]),[])}function XY(l,d){return aY(l)?eY(l):function(l,d){return oY(l,null,{},d)}(l,d)}var uY;!function(l){l.SessionData="apim_session_data"}(uY||(uY={}));class VY extends jg{constructor(l,d){super(l,d)}exchangeAccessToken(){const l=Object.create(null,{getAccessToken:{get:()=>super.getAccessToken}});var d;return Ig(this,void 0,void 0,(function*(){const Z=yield l.getAccessToken.call(this),c=yield this._dataLayer.getConfigData();if(!Z)throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-RAT2-NF01","Invalid access token.","Failed retrieving access token.");const i={grant_type:"urn:ietf:params:oauth:grant-type:token-exchange",requested_token_type:"urn:ietf:params:oauth:token-type:jwt",subject_token:Z,subject_token_type:"urn:ietf:params:oauth:token-type:jwt"},b=XY(Object.assign({},null==c?void 0:c.stsConfig),1);for(let l in b){let d=b[l];"scope"===l&&Array.isArray(d)?d=d.join(" "):"credentials.client_id"===l?l="client_id":"credentials.client_secret"===l&&(l="client_secret"),i[l]=d}const t=[];for(const l in i){const d=encodeURIComponent(l),Z=encodeURIComponent(i[l]);t.push("".concat(d,"=").concat(Z))}const G={body:t.join("&"),credentials:"include",headers:{"Content-Type":"application/x-www-form-urlencoded",authorization:"Bearer ".concat(Z)},method:"POST",mode:"cors"};try{const l=yield fetch(null!==(d=null==c?void 0:c.stsTokenEndpoint)&&void 0!==d?d:"",G);if(!l.ok)throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE01","Invalid exchanging token response","Token exchange grant has been failed");const Z=yield l.json();(null==Z?void 0:Z.access_token)&&(yield this._dataLayer.setCustomData(uY.SessionData,Z))}catch(l){throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE02","Error in exchanging token","Token exchange grant has been failed")}}))}refreshStsAccessToken(){var l,d,Z,c,i,b,t,G,I;return Ig(this,void 0,void 0,(function*(){const m=yield this._dataLayer.getConfigData(),n=yield this._dataLayer.getCustomData(uY.SessionData);if(!(null==n?void 0:n.refresh_token))throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-RSAT1-NF01","Refresh token not found","STS is not configured to return refresh token");if(!(null===(d=null===(l=null==m?void 0:m.stsConfig)||void 0===l?void 0:l.credentials)||void 0===d?void 0:d.client_id)||!(null===(c=null===(Z=null==m?void 0:m.stsConfig)||void 0===Z?void 0:Z.credentials)||void 0===c?void 0:c.client_secret))throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-RSAT2-NF02","Client credentials not found","Client credentials are not configured");const a=btoa("".concat(null===(b=null===(i=null==m?void 0:m.stsConfig)||void 0===i?void 0:i.credentials)||void 0===b?void 0:b.client_id,":").concat(null===(G=null===(t=null==m?void 0:m.stsConfig)||void 0===t?void 0:t.credentials)||void 0===G?void 0:G.client_secret)),o={body:"grant_type=refresh_token&refresh_token=".concat(n.refresh_token),credentials:"include",headers:{"Content-Type":"application/x-www-form-urlencoded",authorization:"Basic ".concat(a.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,""))},method:"POST",mode:"cors"};try{const l=yield fetch(null!==(I=null==m?void 0:m.stsTokenEndpoint)&&void 0!==I?I:"",o);if(!l.ok)throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-RSAT3-NE01","Invalid refresh token response","STS token refreshing has been failed");const d=yield l.json();(null==d?void 0:d.access_token)&&(yield this._dataLayer.setCustomData(uY.SessionData,d))}catch(l){throw new Lg("TOKEN_EXCHANGE-AUTH_HELPER-EAT1-NE02","Error in refreshing token","STS token refreshing has been failed")}}))}requestAccessToken(l,d,Z,c,i){const b=Object.create(null,{requestAccessToken:{get:()=>super.requestAccessToken}});var t,G;return Ig(this,void 0,void 0,(function*(){try{const t=yield b.requestAccessToken.call(this,l,d,Z,c,i);return yield this.exchangeAccessToken(),t}catch(l){return Promise.reject(new Lg("TOKEN_EXCHANGE-AUTH_HELPER-RAT3-NF01",null!==(t=null==l?void 0:l.name)&&void 0!==t?t:"Failed requesting access token.",null!==(G=null==l?void 0:l.message)&&void 0!==G?G:"Failed retrieving user info."))}}))}getAccessToken(){return Ig(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getCustomData(uY.SessionData);return null==l?void 0:l.access_token}))}refreshAccessToken(l){const d=Object.create(null,{refreshAccessToken:{get:()=>super.refreshAccessToken}});return Ig(this,void 0,void 0,(function*(){let Z={};try{this.refreshStsAccessToken()}catch(c){Z=yield d.refreshAccessToken.call(this,l),yield this.exchangeAccessToken()}return this.refreshAccessTokenAutomatically(),Z}))}refreshAccessTokenAutomatically(){return Ig(this,void 0,void 0,(function*(){const l=yield this._dataLayer.getCustomData(uY.SessionData);if(null==l?void 0:l.expires_in){const d=parseInt(l.expires_in);setTimeout((()=>Ig(this,void 0,void 0,(function*(){yield this.refreshAccessToken()}))),1e3*(d<=10?d:d-10))}}))}getDecodedIDToken(){const l=Object.create(null,{getCryptoHelper:{get:()=>super.getCryptoHelper}});return Ig(this,void 0,void 0,(function*(){const d=yield this._dataLayer.getSessionData(),Z=null==d?void 0:d.id_token;if(!Z)return Promise.reject(new Lg("TOKEN_EXCHANGE-AUTH_HELPER-GDIT-NF01","Failed requesting access token.","Failed retrieving user info."));return(yield l.getCryptoHelper.call(this)).decodeIDToken(Z)}))}}class WY extends dY{static getInstance(l){var d,Z;return l&&(null===(d=WY._instances)||void 0===d?void 0:d.get(l))?this._instances.get(l):!l&&(null===(Z=this._instances)||void 0===Z?void 0:Z.get("primaryInstance"))?this._instances.get("primaryInstance"):l?(this._instances.set(l,new WY(l)),this._instances.get(l)):(this._instances.set("primaryInstance",new WY("primaryInstance")),this._instances.get("primaryInstance"))}initialize(l){const d=Object.create(null,{initialize:{get:()=>super.initialize}});return Ig(this,void 0,void 0,(function*(){const Z=VY;return yield d.initialize.call(this,l,Z,mY)}))}getIDPAccessToken(){const l=Object.create(null,{getDataLayer:{get:()=>super.getDataLayer}});var d;return Ig(this,void 0,void 0,(function*(){const Z=yield l.getDataLayer.call(this);return null===(d=yield Z.getSessionData())||void 0===d?void 0:d.access_token}))}}export{Yg as AUTHORIZATION_CODE,Tg as AsgardeoAuthClient,Lg as AsgardeoAuthException,dY as AsgardeoSPAClient,jg as AuthenticationHelper,Ug as AuthenticationUtils,Cg as CLAIM_VALIDATION_ERROR,Vg as CLIENT_ID_TAG,Wg as CLIENT_SECRET_TAG,Fg as CryptoHelper,Bg as DataLayer,Qg as Hooks,_R as MainThreadClient,Rg as NBF_CLAIM,Jg as OIDC_SCOPE,gg as PKCE_CODE_VERIFIER,sg as PKCE_SEPARATOR,pg as REFRESH_TOKEN_TIMER,mg as ResponseMode,ug as SCOPE_TAG,Sg as SESSION_STATE,Kg as SIGN_OUT_SUCCESS_PARAM,rg as SIGN_OUT_URL,Mg as SPAHelper,Eg as SPAUtils,Ng as STATE,yg as SUPPORTED_SIGNATURE_ALGORITHMS,xg as Storage,hg as Stores,eg as TOKEN_TAG,WY as TokenExchangePlugin,Xg as USERNAME_TAG,ZY as WebWorkerClass,$R as WebWorkerClient,cY as workerReceiver};
//# sourceMappingURL=token-exchange.production.esm.js.map
